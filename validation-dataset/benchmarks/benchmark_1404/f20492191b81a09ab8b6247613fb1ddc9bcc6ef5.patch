From f20492191b81a09ab8b6247613fb1ddc9bcc6ef5 Mon Sep 17 00:00:00 2001
From: James Murphy <jmurphy@arista.com>
Date: Wed, 5 Apr 2017 17:29:22 -0700
Subject: [PATCH] Eliminate use of __attribute__((__may_alias__)) from
 checksum.h. Improve non-x86_64 implementation to use union for aliasing.

---
 core/utils/checksum.h | 20 ++++++++++++++++++--
 1 file changed, 18 insertions(+), 2 deletions(-)

diff --git a/core/utils/checksum.h b/core/utils/checksum.h
index abe6cd699..f0eef79f3 100644
--- a/core/utils/checksum.h
+++ b/core/utils/checksum.h
@@ -110,11 +110,27 @@ static inline uint32_t CalculateSum(const void *buf, size_t len) {
   // Reduce 64-bit unsigned integer to 32-bit unsigned integer
   // Carry may happens, but no need to complete reduce here
   sum64 = (sum64 >> 32) + (sum64 & 0xFFFFFFFF);
+#else
+  // Use stantard C language for 32 bit or other non-Intel
+  typedef union [[gnu::may_alias]] {
+     uint32_t u64;
+     uint16_t u16[4];
+  } u16_64;
+  const u16_64 *ubuf64;
+  ubuf64 = reinterpret_cast<const u16_64  *>(buf64);
+  while (len >= sizeof(uint64_t)) {
+     sum64 += ubuf64->u16[0];
+     sum64 += ubuf64->u16[1];
+     sum64 += ubuf64->u16[2];
+     sum64 += ubuf64->u16[3];
+     len -= sizeof(uint64_t);
+     ubuf64++;
+  }
+  buf64 = reinterpret_cast<const uint64_t *>(ubuf64);
 #endif
 
   // Repeat 16-bit one's complement sum (at sum64)
-  typedef uint16_t __attribute__((__may_alias__)) u16_p;
-  const u16_p *buf16 = reinterpret_cast<const u16_p *>(buf64);
+  const uint16_t *buf16 = reinterpret_cast<const uint16_t *>(buf64);
   while (len >= sizeof(uint16_t)) {
     sum64 += *buf16++;
     len -= sizeof(uint16_t);
