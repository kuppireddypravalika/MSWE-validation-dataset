From babe3f7a21d4c53dda1122a5aeae0f8d0ed1f9c6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Can=20B=C3=B6l=C3=BCk?= <can.boluk89@gmail.com>
Date: Thu, 9 Jul 2020 06:19:39 +0200
Subject: [PATCH] Implemented eval-based ::equals fast path.

---
 VTIL-SymEx/expressions/expression.cpp | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/VTIL-SymEx/expressions/expression.cpp b/VTIL-SymEx/expressions/expression.cpp
index 56dc98a7..c56b7351 100644
--- a/VTIL-SymEx/expressions/expression.cpp
+++ b/VTIL-SymEx/expressions/expression.cpp
@@ -731,6 +731,20 @@ namespace vtil::symbolic
 			 ( other.known_zero() & known_one() ))
 			return false;
 
+		// Try evaluating with 2 random values, if values do not match, expressions cannot be equivalent.
+		//
+		static constexpr auto eval_keys = make_crandom_n<2>();
+		for ( uint64_t key : eval_keys )
+		{
+			auto eval_helper = [ = ] ( const unique_identifier& uid ) 
+			{
+				return uid.hash() ^ key;
+			};
+			if ( this->evaluate( eval_helper ).known_one() != 
+				 other.evaluate( eval_helper ).known_one() )
+				return false;
+		}
+
 		// Simplify both expressions.
 		//
 		expression a = expression{ *this }.simplify();
