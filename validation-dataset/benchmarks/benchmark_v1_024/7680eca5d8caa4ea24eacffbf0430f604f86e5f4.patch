From 7680eca5d8caa4ea24eacffbf0430f604f86e5f4 Mon Sep 17 00:00:00 2001
From: Sam Hocevar <sam@hocevar.net>
Date: Fri, 2 Sep 2011 00:06:18 +0000
Subject: [PATCH] test: implement a custom isnan()

This version is faster (about 25% on x86_64) and works when extreme
optimisation options such as -ffast-math are used.
---
 test/half.cpp | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

diff --git a/test/half.cpp b/test/half.cpp
index 4ae87d669..e614d9716 100644
--- a/test/half.cpp
+++ b/test/half.cpp
@@ -21,10 +21,17 @@
 
 #include "core.h"
 
-/* This will not work with aggressive optimisation, but a reasonable
- * assumption is that such environments do have a proper isnan(). */
+/* Ensure isnan() is present even on systems that don't define it, or
+ * when -ffast-math is being used. */
+#if defined __FAST_MATH__
+#   undef isnan
+#endif
 #if !defined isnan
-#   define isnan(x) (!((x) == (x)))
+static inline int isnan(float f)
+{
+    union { float f; uint32_t x; } u = { f };
+    return (~u.x << 1) < 0x00fffffeu;
+}
 #endif
 
 namespace lol
