From 1e043e923a9243aa15f7fde7fd22162a8205cc8d Mon Sep 17 00:00:00 2001
From: Austin Clements <amdragon@mit.edu>
Date: Fri, 27 Apr 2012 01:33:43 -0400
Subject: [PATCH] Subtract one from PCs recorded by getcallerpcs

This gets the call PCs instead of the return PCs, since this turns out
to be what we really want everywhere we use this.  This was
particularly annoying for panics: since the compiler knows that panic
doesn't return, when it's the last thing in the function, the compiler
doesn't emit any further code after the call, which means the "return"
PC either doesn't map to anything or maps to another function
entirely.
---
 kernel/trap.cc | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/kernel/trap.cc b/kernel/trap.cc
index caede6184..48cde93d8 100644
--- a/kernel/trap.cc
+++ b/kernel/trap.cc
@@ -291,7 +291,8 @@ getcallerpcs(void *v, uptr pcs[], int n)
     if(rbp == 0 || rbp < (uptr*)KBASE || rbp == (uptr*)(~0UL) ||
        (rbp >= (uptr*)KBASEEND && rbp < (uptr*)KCODE))
       break;
-    pcs[i] = rbp[1];     // saved %rip
+    pcs[i] = rbp[1] - 1; // saved %rip; - 1 so it points to the call
+                         // instruction
     rbp = (uptr*)rbp[0]; // saved %rbp
   }
   for(; i < n; i++)
