From a9964d95b2ef80c934305abaf0a176a95934e6d4 Mon Sep 17 00:00:00 2001
From: Sven Verdoolaege <skimo@kotnet.org>
Date: Wed, 6 Feb 2013 14:20:24 +0100
Subject: [PATCH] eliminate_dead_code: coalesce the set of "live" iterations

The set of exposed iterations and the set of iterations of statements
with a function call may overlap.  Since the union of these sets may
get intersected with the iteration domain, we want to remove duplicates
in this union.  Otherwise, the duplicates would also appear in the iteration
domain.  Since coalescing is a potentially expensive operation, we only
perform coalescing (and the union) if there are actually any
statements containing a function call.

Signed-off-by: Sven Verdoolaege <skimo@kotnet.org>
---
 ppcg.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/ppcg.c b/ppcg.c
index 418cefe..5355a57 100644
--- a/ppcg.c
+++ b/ppcg.c
@@ -219,7 +219,10 @@ static void eliminate_dead_code(struct ppcg_scop *ps)
 		    isl_union_map_reverse(isl_union_map_copy(ps->schedule)));
 
 	live = isl_union_map_range(exposed);
-	live = isl_union_set_union(live, isl_union_set_copy(ps->call));
+	if (!isl_union_set_is_empty(ps->call)) {
+		live = isl_union_set_union(live, isl_union_set_copy(ps->call));
+		live = isl_union_set_coalesce(live);
+	}
 
 	dep = isl_union_map_copy(ps->dep_flow);
 	dep = isl_union_map_reverse(dep);
