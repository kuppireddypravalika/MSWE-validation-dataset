From 6c65a0917221d224cc5439b6f78e7ff3b0c15012 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Pawe=C5=82=20Bylica?= <chfast@gmail.com>
Date: Mon, 6 Apr 2020 21:18:40 +0200
Subject: [PATCH] bench: Provide correct typed values to wabt engine

This implements minimal type handling for wabt execution. It is assumed that types are only i32 or i64 and number of parameters is not validated.
---
 test/utils/wabt_engine.cpp | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/test/utils/wabt_engine.cpp b/test/utils/wabt_engine.cpp
index d0031790d..909634f89 100644
--- a/test/utils/wabt_engine.cpp
+++ b/test/utils/wabt_engine.cpp
@@ -82,12 +82,19 @@ WasmEngine::Result WabtEngine::execute(
 
     const auto* e = reinterpret_cast<const wabt::interp::Export*>(func_ref);
 
+    const auto func_sig = m_env.GetFuncSignature(m_env.GetFunc(e->index)->sig_index);
+    assert(func_sig->param_types.size() == args.size());
+
     wabt::interp::TypedValues typed_args;
-    for (const auto arg : args)
+    for (size_t i = 0; i < args.size(); ++i)
     {
-        wabt::interp::Value v{};
-        v.i32 = static_cast<uint32_t>(arg);
-        typed_args.push_back(wabt::interp::TypedValue{wabt::Type::I32, v});
+        wabt::interp::Value value{};
+        const auto type = func_sig->param_types[i];
+        if (type == wabt::Type::I32)
+            value.i32 = static_cast<uint32_t>(args[i]);
+        else
+            value.i64 = args[i];
+        typed_args.push_back(wabt::interp::TypedValue{type, value});
     }
     wabt::interp::ExecResult r = executor.RunExport(e, typed_args);
 
