From 0f01ed4f94c35648606b44b2fb9237fb94457a53 Mon Sep 17 00:00:00 2001
From: Sophia Poirier <2997196+sophiapoirier@users.noreply.github.com>
Date: Wed, 28 Oct 2020 19:38:43 -0700
Subject: [PATCH] Conor Hoekstra's ITM anti-pattern talk reminded me why I
 prefer the original DGMultiControl<T>::checkDefaultValue_all implementation
 (so long as it uses the correct STL algorithm)

---
 dfxgui/dfxguicontrol.hpp | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/dfxgui/dfxguicontrol.hpp b/dfxgui/dfxguicontrol.hpp
index 8d53a1c2..6996f232 100644
--- a/dfxgui/dfxguicontrol.hpp
+++ b/dfxgui/dfxguicontrol.hpp
@@ -329,14 +329,14 @@ bool DGMultiControl<T>::isDirty() const
 template <class T>
 bool DGMultiControl<T>::checkDefaultValue_all(VSTGUI::CButtonState inButtons)
 {
-	bool any = DGControl<T>::checkDefaultValue(inButtons);
-	for (IDGControl* child : mChildren)
+	return std::accumulate(mChildren.cbegin(), mChildren.cend(), DGControl<T>::checkDefaultValue(inButtons), 
+						   [inButtons](auto const anyDefaulted, auto&& child)
 	{
 		// checkDefaultValue has desired side effects, so always execute it prior to testing the existing result, 
 		// so that execution cannot be skipped during the logical OR operation
-		any = child->asCControl()->checkDefaultValue(inButtons) || any;
-	}
-	return any;
+		auto const childDefaulted = child->asCControl()->checkDefaultValue(inButtons);
+		return childDefaulted || anyDefaulted;
+	});
 }
 
 //-----------------------------------------------------------------------------
