From a7ca4f5ad190189136bb967591ff2101c0320585 Mon Sep 17 00:00:00 2001
From: Filip Jeremic <fjeremic@ca.ibm.com>
Date: Mon, 8 Apr 2019 11:14:31 -0400
Subject: [PATCH] Do not double estimate instruction binary encoding length

We have redundant loops which estimate the binary encoding length of an
instruction. Because of the way we generate prologues and recompilation
pre-prologues we may miss to estimate some instructions. Avoid this by
only having one estimation loop which traverses all instructions and
estimates them.

Signed-off-by: Filip Jeremic <fjeremic@ca.ibm.com>
---
 compiler/z/codegen/OMRCodeGenerator.cpp | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/compiler/z/codegen/OMRCodeGenerator.cpp b/compiler/z/codegen/OMRCodeGenerator.cpp
index 5bcef71009..94714f56e0 100644
--- a/compiler/z/codegen/OMRCodeGenerator.cpp
+++ b/compiler/z/codegen/OMRCodeGenerator.cpp
@@ -2329,14 +2329,14 @@ OMR::Z::CodeGenerator::doBinaryEncoding()
       data.estimate += 256;
       }
 
-   while (data.cursorInstruction && data.cursorInstruction->getOpCodeValue() != TR::InstOpCode::PROC)
+   TR::Instruction* cursor = data.cursorInstruction;
+
+   // TODO: We should be caching the PROC instruction as it's used in several places and is pretty important
+   while (cursor && cursor->getOpCodeValue() != TR::InstOpCode::PROC)
       {
-      data.estimate = data.cursorInstruction->estimateBinaryLength(data.estimate);
-      data.cursorInstruction = data.cursorInstruction->getNext();
+      cursor = cursor->getNext();
       }
 
-   TR::Instruction* cursor = data.cursorInstruction;
-
    if (recomp != NULL)
       {
       cursor = recomp->generatePrologue(cursor);
