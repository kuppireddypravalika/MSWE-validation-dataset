From 15faab3cbaac7e4f2b36d746742f53ecc3cc3629 Mon Sep 17 00:00:00 2001
From: Duncan Sands <baldrick@free.fr>
Date: Tue, 31 Jan 2012 13:40:31 +0000
Subject: [PATCH] Speed up handling of type mismatches with huge initial
 values. The origin of this kind of thing is usually that the two types are
 structurally identical struct types, one named the other anonymous.  It's
 probably worth trying to avoid this kind of thing altogether by catching it
 earlier on.

---
 dragonegg/src/Constants.cpp | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/dragonegg/src/Constants.cpp b/dragonegg/src/Constants.cpp
index 0989b0fc9b51..d42f9411370c 100644
--- a/dragonegg/src/Constants.cpp
+++ b/dragonegg/src/Constants.cpp
@@ -412,9 +412,17 @@ static BitSlice ViewAsBits(Constant *C, SignedRange R, TargetFolder &Folder) {
 /// value of type 'Ty' from the stored to memory location.
 static Constant *InterpretAsType(Constant *C, Type* Ty, int StartingBit,
                                  TargetFolder &Folder) {
+  // Efficient handling for some common cases.
   if (C->getType() == Ty)
     return C;
 
+  if (isa<UndefValue>(C))
+    return UndefValue::get(Ty);
+
+  if (C->isNullValue())
+    return Constant::getNullValue(Ty);
+
+  // The general case.
   switch (Ty->getTypeID()) {
   default:
     DieAbjectly("Unsupported type!");
