From 02dc1daaa6db45f3f917cef22942d14d994fc539 Mon Sep 17 00:00:00 2001
From: Mathias Froehlich <Mathias.Froehlich@web.de>
Date: Wed, 2 Apr 2014 23:52:46 +0200
Subject: [PATCH] Make use of atomic memory model in SingletonPtr.

---
 src/OpenRTI/SingletonPtr.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/OpenRTI/SingletonPtr.h b/src/OpenRTI/SingletonPtr.h
index e88ddaa0..cc75286b 100644
--- a/src/OpenRTI/SingletonPtr.h
+++ b/src/OpenRTI/SingletonPtr.h
@@ -1,4 +1,4 @@
-/* -*-c++-*- OpenRTI - Copyright (C) 2012-2013 Mathias Froehlich
+/* -*-c++-*- OpenRTI - Copyright (C) 2012-2014 Mathias Froehlich
  *
  * This file is part of OpenRTI.
  *
@@ -39,12 +39,12 @@ class SingletonPtr {
     // If the pointer is not already initialized
     while (unsigned(_initialized) != 2) {
       // We expect 0 == uninitalized and write there 1 == initializing
-      if (!_initialized.compareAndExchange(0, 1)) {
+      if (!_initialized.compareAndExchange(0, 1, Atomic::MemoryOrderAcqRel)) {
         Clock::sleep(Clock::fromSeconds(1e-6));
       } else {
         _ptr = new T();
         // We know that it must be 1 and write 2 there
-        _initialized.compareAndExchange(1, 2);
+        _initialized.compareAndExchange(1, 2, Atomic::MemoryOrderAcqRel);
       }
     }
     return _ptr;
