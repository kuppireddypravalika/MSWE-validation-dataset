From 3d0e8f5e0f7e6f82cda4b2d3fa2bf5c7dfaa38a5 Mon Sep 17 00:00:00 2001
From: gitamohr <gitamohr@users.noreply.github.com>
Date: Tue, 7 Jun 2022 14:47:02 -0700
Subject: [PATCH] usd: Use a robin_map here instead of std::unordered_map.  It
 is well-suited to this case and provides >10% speedup on usdc file writing
 perf metrics.

(Internal change: 2234973)
---
 pxr/usd/usd/integerCoding.cpp | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/pxr/usd/usd/integerCoding.cpp b/pxr/usd/usd/integerCoding.cpp
index bf0116840a..8aa481c851 100644
--- a/pxr/usd/usd/integerCoding.cpp
+++ b/pxr/usd/usd/integerCoding.cpp
@@ -25,6 +25,7 @@
 #include "pxr/base/tf/diagnostic.h"
 #include "pxr/base/tf/fastCompression.h"
 #include "pxr/usd/usd/integerCoding.h"
+#include "pxr/base/tf/pxrTslRobinMap/robin_map.h"
 
 #include <cstdint>
 #include <cstring>
@@ -85,7 +86,7 @@ input  = [123, 124, 125, 100125, 100125, 100126, 10026]
 output = [int32(1) 01 00 00 11 01 00 01 XX int8(123) int32(100000) int8(0) int8(0)]
 
 Where 'XX' represents unused bits in the last byte of the codes section to round
-up to an even number of bytes.
+up to a whole number of bytes.
 
 In this case the output size is 12 bytes compared to the original input which
 was 28 bytes.  In the best possible case the output is (asymptotically) 2 bits
@@ -294,7 +295,7 @@ _EncodeIntegers(Int const *begin, size_t numInts, char *output)
     SInt commonValue = 0;
     {
         size_t commonCount = 0;
-        std::unordered_map<SInt, size_t> counts;
+        pxr_tsl::robin_map<SInt, size_t> counts;
         SInt prevVal = 0;
         for (Int const *cur = begin, *end = begin + numInts;
              cur != end; ++cur) {
