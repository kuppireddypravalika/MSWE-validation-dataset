From 5e3667473d494f0f5fed719c3ba21b83b7ae03ff Mon Sep 17 00:00:00 2001
From: Samuel Benzaquen <sbenza@google.com>
Date: Fri, 18 Mar 2016 20:14:35 +0000
Subject: [PATCH] [clang-tidy] Use hasAnyName() instead of matchesName().

matchesName() uses regular expressions and it is very slow.
hasAnyName() gives the same result and it is much faster.
A benchmark (with all the checks enabled) shows a ~5% speed up of
clang-tidy.

git-svn-id: https://llvm.org/svn/llvm-project/clang-tools-extra/trunk@263822 91177308-0d34-0410-b5e6-96231b3b80d8
---
 clang-tidy/misc/InefficientAlgorithmCheck.cpp | 13 ++++++++-----
 1 file changed, 8 insertions(+), 5 deletions(-)

diff --git a/clang-tidy/misc/InefficientAlgorithmCheck.cpp b/clang-tidy/misc/InefficientAlgorithmCheck.cpp
index 94e37859..d5855901 100644
--- a/clang-tidy/misc/InefficientAlgorithmCheck.cpp
+++ b/clang-tidy/misc/InefficientAlgorithmCheck.cpp
@@ -33,13 +33,16 @@ void InefficientAlgorithmCheck::registerMatchers(MatchFinder *Finder) {
   if (!getLangOpts().CPlusPlus)
     return;
 
-  const std::string Algorithms =
-      "^::std::(find|count|equal_range|lower_bound|upper_bound)$";
-  const auto ContainerMatcher = classTemplateSpecializationDecl(
-      matchesName("^::std::(unordered_)?(multi)?(set|map)$"));
+  const auto Algorithms =
+      hasAnyName("::std::find", "::std::count", "::std::equal_range",
+                 "::std::lower_bound", "::std::upper_bound");
+  const auto ContainerMatcher = classTemplateSpecializationDecl(hasAnyName(
+      "::std::set", "::std::map", "::std::multiset", "::std::multimap",
+      "::std::unordered_set", "::std::unordered_map"));
+
   const auto Matcher =
       callExpr(
-          callee(functionDecl(matchesName(Algorithms))),
+          callee(functionDecl(Algorithms)),
           hasArgument(
               0, cxxConstructExpr(has(cxxMemberCallExpr(
                      callee(cxxMethodDecl(hasName("begin"))),
