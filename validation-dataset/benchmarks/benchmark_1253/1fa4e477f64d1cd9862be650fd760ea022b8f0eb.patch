From 1fa4e477f64d1cd9862be650fd760ea022b8f0eb Mon Sep 17 00:00:00 2001
From: mattreecebentley <mattreecebentley@gmail.com>
Date: Wed, 2 May 2018 13:52:52 +1200
Subject: [PATCH] v1.23

Same optimization for GCC & clear/splice/etc now applied to other compilers generically. Correction to macro usage.
---
 plf_stack.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/plf_stack.h b/plf_stack.h
index 798e9fc..fa16cb4 100644
--- a/plf_stack.h
+++ b/plf_stack.h
@@ -1076,9 +1076,9 @@ template <class element_type, class element_allocator_type = std::allocator<elem
 
 	inline void blank() PLF_STACK_NOEXCEPT
 	{
-		#if defined(PLF_COLONY_TYPE_TRAITS_SUPPORT) && (defined(__GNUC__) && !defined(__clang__)) && !(defined(__haswell__) || defined(__skylake__) || defined(__silvermont__) || defined(__sandybridge__) || defined(__ivybridge__) || defined(__broadwell__))
-			// this is faster under gcc if CPU is core2 and below:
-			if (std::is_trivial<group_pointer_type>::value && std::is_trivial<element_pointer_type>::value && NULL == 0) // if all pointer types are trivial, and NULL is (almost always) zero, we can just nuke it with memset
+		#if defined(PLF_STACK_TYPE_TRAITS_SUPPORT) && !(defined(__GNUC__) && (defined(__haswell__) || defined(__skylake__) || defined(__silvermont__) || defined(__sandybridge__) || defined(__ivybridge__) || defined(__broadwell__)))
+			// this is faster under gcc if code 'march' is optimized for core2 and below, and faster on MSVC/clang in general:
+			if (std::is_trivial<group_pointer_type>::value && std::is_trivial<element_pointer_type>::value && NULL == 0) // if all pointer types are trivial, and NULL is (almost always) zero, we can just nuke it with memset (faster)
 			{
 				std::memset(this, 0, offsetof(stack, min_elements_per_group));
 			}
