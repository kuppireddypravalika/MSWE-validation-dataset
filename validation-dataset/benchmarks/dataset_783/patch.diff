From 1a97214e410621badbd80d9a948e89baf1113200 Mon Sep 17 00:00:00 2001
From: Simon Robillard <simon.robillard@chalmers.se>
Date: Wed, 8 Nov 2017 18:28:52 +0100
Subject: [PATCH] small optimization in PrecedenceOrdering::compare

---
 Kernel/Ordering.cpp | 10 +++-------
 1 file changed, 3 insertions(+), 7 deletions(-)

diff --git a/Kernel/Ordering.cpp b/Kernel/Ordering.cpp
index dc708622e6..a9d27c855a 100644
--- a/Kernel/Ordering.cpp
+++ b/Kernel/Ordering.cpp
@@ -235,8 +235,6 @@ Ordering::Result PrecedenceOrdering::compare(Literal* l1, Literal* l2) const
     return l1->isNegative() ? LESS : GREATER;
   }
 
-  Result res;
-
   if (p1 != p2) {
     Comparison levComp=Int::compare(predicateLevel(p1),predicateLevel(p2));
     if(levComp!=Lib::EQUAL) {
@@ -250,17 +248,15 @@ Ordering::Result PrecedenceOrdering::compare(Literal* l1, Literal* l2) const
   }
   ASS(!l1->isEquality());
 
-  res = comparePredicates(l1, l2);
-
   if(_reverseLCM && (l1->isNegative() || l2->isNegative()) ) {
     if(l1->isNegative() && l2->isNegative()) {
-      res = reverse(res);
+      return reverse(comparePredicates(l1, l2));
     }
     else {
-      res = l1->isNegative() ? LESS : GREATER;
+      return l1->isNegative() ? LESS : GREATER;
     }
   }
-  return res;
+  return comparePredicates(l1, l2);
 } // PrecedenceOrdering::compare()
 
 /**
