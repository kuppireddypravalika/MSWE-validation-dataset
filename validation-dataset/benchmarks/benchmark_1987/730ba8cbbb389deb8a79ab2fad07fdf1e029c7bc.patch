From 730ba8cbbb389deb8a79ab2fad07fdf1e029c7bc Mon Sep 17 00:00:00 2001
From: Duncan Sands <baldrick@free.fr>
Date: Wed, 27 Apr 2011 14:21:53 +0000
Subject: [PATCH] Initializers for global variables are typically converted at
 least twice. Cache conversion results so that the work of conversion only
 needs to be done once.

---
 dragonegg/src/Constants.cpp | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/dragonegg/src/Constants.cpp b/dragonegg/src/Constants.cpp
index 3201f8408898..ecf264e872af 100644
--- a/dragonegg/src/Constants.cpp
+++ b/dragonegg/src/Constants.cpp
@@ -26,6 +26,9 @@
 #include "dragonegg/Trees.h"
 #include "dragonegg/ADT/IntervalList.h"
 #include "dragonegg/ADT/Range.h"
+extern "C" {
+#include "dragonegg/cache.h"
+}
 
 // LLVM headers
 #include "llvm/GlobalVariable.h"
@@ -1255,6 +1258,10 @@ static Constant *ConvertVIEW_CONVERT_EXPR(tree exp) {
 /// initial value may exceed the alloc size of the LLVM memory type generated
 /// for the GCC type (see ConvertType); it is never smaller than the alloc size.
 Constant *ConvertInitializer(tree exp) {
+  // If we already converted the initializer then return the cached copy.
+  if (Constant *C = (Constant *)llvm_get_cached(exp))
+    return C;
+
   Constant *Init;
   switch (TREE_CODE(exp)) {
   default:
@@ -1316,6 +1323,10 @@ Constant *ConvertInitializer(tree exp) {
     DieAbjectly("Constant over aligned!", exp);
 #endif
 
+  // Cache the result of converting the initializer since the same tree is often
+  // converted multiple times.
+  llvm_set_cached(exp, Init);
+
   return Init;
 }
 
