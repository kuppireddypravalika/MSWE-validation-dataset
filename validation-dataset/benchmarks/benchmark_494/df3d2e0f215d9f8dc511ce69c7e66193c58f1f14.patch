From df3d2e0f215d9f8dc511ce69c7e66193c58f1f14 Mon Sep 17 00:00:00 2001
From: bruni <none@none>
Date: Fri, 19 Mar 2004 14:33:36 +0000
Subject: [PATCH] Always optimize binary nullary CompactTagTests (e.g., if e
 then e_1 else e_2), with e no application.

---
 vm-seam/alice/NativeCodeJitter.cc | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/vm-seam/alice/NativeCodeJitter.cc b/vm-seam/alice/NativeCodeJitter.cc
index 882d3c61f..8d57dafb0 100644
--- a/vm-seam/alice/NativeCodeJitter.cc
+++ b/vm-seam/alice/NativeCodeJitter.cc
@@ -2259,6 +2259,15 @@ TagVal *NativeCodeJitter::InstrCompactTagTest(TagVal *pc) {
  	// but we had to request the tag value
   	Tuple *tuple = Tuple::FromWordDirect(tests->Sub(0));
   	CompileBranch(TagVal::FromWordDirect(tuple->Sel(1)));
+      } else if (n == 2) {
+	// Invariant: No else, thus either of both always succeed
+	Tuple *tuple = Tuple::FromWordDirect(tests->Sub(0));
+	jit_insn *not_zero =
+	  jit_bnei_ui(jit_forward(), Arbiter, Store::IntToWord(0));
+	CompileBranch(TagVal::FromWordDirect(tuple->Sel(1)));
+	jit_patch(not_zero);
+	tuple = Tuple::FromWordDirect(tests->Sub(1));
+	return TagVal::FromWordDirect(tuple->Sel(1));
       } else {
 	DirectWordToInt(JIT_R0, Arbiter);
 	NullaryBranches(JIT_R0, tests);
