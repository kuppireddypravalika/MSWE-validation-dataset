From 075da99f9ef4e3633bc0620e9a4de15c86dcba7e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Nicolai=20H=C3=A4hnle?= <nicolai.haehnle@amd.com>
Date: Sat, 14 May 2022 20:40:28 -0500
Subject: [PATCH] lgc/patch: Move PatchCheckShaderCache earlier

We should be able to safely move this pass across other passes that
don't do cross-stage optimizations -- and the earlier this pass is
run, the better for compile-time performance.

The cache lookup is only affected by (a subset of) resUsage->inOutUsage
values that are filled in by PatchResourceCollect.
---
 lgc/patch/Patch.cpp | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/lgc/patch/Patch.cpp b/lgc/patch/Patch.cpp
index b1616b80c1..ba3e3ec5cc 100644
--- a/lgc/patch/Patch.cpp
+++ b/lgc/patch/Patch.cpp
@@ -131,6 +131,9 @@ void Patch::addPasses(PipelineState *pipelineState, lgc::PassManager &passMgr, b
   // Patch resource collecting, remove inactive resources (should be the first preliminary pass)
   passMgr.addPass(PatchResourceCollect());
 
+  // Check shader cache
+  passMgr.addPass(PatchCheckShaderCache(std::move(checkShaderCacheFunc)));
+
   // Patch wave size adjusting heuristic
   passMgr.addPass(PatchWaveSizeAdjust());
 
@@ -165,9 +168,6 @@ void Patch::addPasses(PipelineState *pipelineState, lgc::PassManager &passMgr, b
   // Patch loop metadata
   passMgr.addPass(createModuleToFunctionPassAdaptor(createFunctionToLoopPassAdaptor(PatchLoopMetadata())));
 
-  // Check shader cache
-  passMgr.addPass(PatchCheckShaderCache(std::move(checkShaderCacheFunc)));
-
   // Stop timer for patching passes and start timer for optimization passes.
   if (patchTimer) {
     LgcContext::createAndAddStartStopTimer(passMgr, patchTimer, false);
