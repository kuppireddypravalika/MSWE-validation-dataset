From d003f8543c7d71dd233267a8f028c4a2c91ac211 Mon Sep 17 00:00:00 2001
From: Baptiste Wicht <baptiste.wicht@gmail.com>
Date: Wed, 4 Nov 2015 15:02:20 +0100
Subject: [PATCH] Align matrices for vectorization

---
 include/etl/dyn.hpp | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/include/etl/dyn.hpp b/include/etl/dyn.hpp
index ac3d6193c..95163b941 100644
--- a/include/etl/dyn.hpp
+++ b/include/etl/dyn.hpp
@@ -99,7 +99,7 @@ struct dyn_matrix_impl final : inplace_assignable<dyn_matrix_impl<T, SO, D>>, co
 public:
     static constexpr const std::size_t n_dimensions = D;
     static constexpr const order storage_order      = SO;
-    static constexpr const std::size_t alignment    = alignof(T);
+    static constexpr const std::size_t alignment    = intrinsic_traits<T>::alignment;
 
     using value_type             = T;
     using dimension_storage_impl = std::array<std::size_t, n_dimensions>;
@@ -126,6 +126,7 @@ struct dyn_matrix_impl final : inplace_assignable<dyn_matrix_impl<T, SO, D>>, co
     static memory_type allocate(std::size_t n) {
         auto* memory = aligned_allocator<void, alignment>::template allocate<T>(n);
         cpp_assert(memory, "Impossible to allocate memory for dyn_matrix");
+        cpp_assert(reinterpret_cast<uintptr_t>(memory) % alignment == 0, "Failed to align memory of matrix");
 
         //In case of non-trivial type, we need to call the constructors
         if(!std::is_trivial<value_type>::value){
