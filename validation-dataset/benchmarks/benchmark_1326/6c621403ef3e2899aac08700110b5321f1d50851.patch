From 6c621403ef3e2899aac08700110b5321f1d50851 Mon Sep 17 00:00:00 2001
From: Cyrille Pitchen <cyrille.pitchen@microchip.com>
Date: Fri, 16 Dec 2022 13:30:32 +0100
Subject: [PATCH] XmlWidgetSerializer: avoid a useless copy of std::vector<>

Pattern::StepArray is a std::vector<>. Also, Pattern::steps() returns a
'const StepArray&', hence a reference.

So, replace 'auto' with 'const auto&' to avoid copying this std::vector<>
but instead keeping a const reference on it.

Again, replace 'auto&' with 'const auto&' when iterating on 'steps' as we
don't modify any element of the 'steps' vector.

Signed-off-by: Cyrille Pitchen <cyrille.pitchen@microchip.com>
Signed-off-by: Ludovic Desroches <ludovic.desroches@microchip.com>
---
 src/serialize.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/serialize.cpp b/src/serialize.cpp
index e4823008..1609130d 100644
--- a/src/serialize.cpp
+++ b/src/serialize.cpp
@@ -502,14 +502,14 @@ void XmlWidgetSerializer::add_property(const std::string& name, const Pattern& v
         enode->append_attribute(m_impl->doc.allocate_attribute("name", "end"));
         enode->value(m_impl->doc.allocate_string(detail::to_string(value.ending()).c_str()));
 
-        auto steps = value.steps();
+        const auto& steps = value.steps();
         std::ostringstream oss;
         auto stepsnode = m_impl->doc.allocate_node(rapidxml::node_element, "property");
         stepsnode->append_attribute(m_impl->doc.allocate_attribute("name", "steps"));
         if (!steps.empty())
         {
             std::string tmp;
-            for (auto& s : steps)
+            for (const auto& s : steps)
             {
                 tmp += "{" + detail::to_string(s.first) + "," + s.second.hex().c_str() + "},";
             }
