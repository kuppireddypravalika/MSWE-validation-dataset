From 961eed048921b1db447acb9b966bf5fd55788b0e Mon Sep 17 00:00:00 2001
From: Junda Liu <Junda.Liu@amd.com>
Date: Tue, 25 Apr 2023 09:28:23 +0800
Subject: [PATCH] Run inliner pass before lower ray tracing pass for all RT
 shader stage (#2414)

Any ray tracing shader may access shader record buffer in non-entry function,
we will replace all Global SRB to a combination of instructions at the
beginning of entry function in SpirvLowerRayTracing pass, so we need to inline
all functions so that SRB is accessible throughout the shader.

e.g.

```
@ShaderRecordBuffer = ...

def entry() {
  access @ShaderRecordBuffer
  call foo()
}

def foo() {
  access @ShaderRecordBuffer
}
```

If we don't inline `foo()`, when we replaceAllUse of `@ShaderRecordBuffer`,
the one in `foo()` will be invalid.
---
 llpc/context/llpcCompiler.cpp | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/llpc/context/llpcCompiler.cpp b/llpc/context/llpcCompiler.cpp
index 6cb640946d..d91565e9eb 100644
--- a/llpc/context/llpcCompiler.cpp
+++ b/llpc/context/llpcCompiler.cpp
@@ -2370,9 +2370,10 @@ Result Compiler::buildRayTracingPipelineInternal(RayTracingContext &rtContext,
     // Start timer for translate.
     timerProfiler.addTimerStartStopPass(*lowerPassMgr, TimerTranslate, true);
 
-    // OpTerminateRay/OpIgnoreIntersection of anyhit shader and OpReportIntersection of intersection shader could
-    // terminate ray during inbetween of shader execution. So functions in these shaders need to be inlined.
-    if (entryStage == ShaderStageRayTracingAnyHit || entryStage == ShaderStageRayTracingIntersect) {
+    // Any ray tracing shader may access shader record buffer in non-entry function, we will replace all Global SRB to a
+    // combination of instructions at the beginning of entry function in SpirvLowerRayTracing pass, so we need to inline
+    // all functions so that SRB is accessible throughout the shader.
+    if (entryStage != ShaderStageCompute) {
       // Lower SPIR-V CFG merges before inlining
       lowerPassMgr->addPass(SpirvLowerCfgMerges());
       lowerPassMgr->addPass(AlwaysInlinerPass());
