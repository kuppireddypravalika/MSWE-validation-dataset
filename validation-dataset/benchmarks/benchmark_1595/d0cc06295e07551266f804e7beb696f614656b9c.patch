From d0cc06295e07551266f804e7beb696f614656b9c Mon Sep 17 00:00:00 2001
From: David Stone <david@doublewise.net>
Date: Wed, 15 May 2019 18:15:06 -0600
Subject: [PATCH] Implement clear more efficiently so that it does not
 deallocate all old capacity.

---
 include/containers/clear.hpp | 31 ++++++++++++++++++++++++++++++-
 1 file changed, 30 insertions(+), 1 deletion(-)

diff --git a/include/containers/clear.hpp b/include/containers/clear.hpp
index 0a075148..51b4fdd2 100755
--- a/include/containers/clear.hpp
+++ b/include/containers/clear.hpp
@@ -11,11 +11,40 @@
 
 namespace containers {
 namespace detail {
+
+template<typename, typename = void>
+constexpr auto has_pop_back = false;
+
+template<typename Container>
+constexpr auto has_pop_back<
+	Container,
+	std::void_t<decltype(std::declval<Container &>().pop_back())>
+> = true;
+
+template<typename, typename = void>
+constexpr auto has_pop_front = false;
+
+template<typename Container>
+constexpr auto has_pop_front<
+	Container,
+	std::void_t<decltype(std::declval<Container &>().pop_front())>
+> = true;
+
 namespace common {
 
 template<typename Container, BOUNDED_REQUIRES(is_container<Container>)>
 constexpr auto clear(Container & container) noexcept {
-	container = Container{};
+	if constexpr (has_pop_back<Container>) {
+		while (!empty(container)) {
+			container.pop_back();
+		}
+	} else if constexpr (has_pop_front<Container>) {
+		while (!empty(container)) {
+			container.pop_front();
+		}
+	} else {
+		container = {};
+	}
 }
 
 }	// namespace common
