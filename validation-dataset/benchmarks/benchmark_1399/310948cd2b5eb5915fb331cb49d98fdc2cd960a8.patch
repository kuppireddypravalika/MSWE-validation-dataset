From 310948cd2b5eb5915fb331cb49d98fdc2cd960a8 Mon Sep 17 00:00:00 2001
From: Michael Kuron <mkuron@icp.uni-stuttgart.de>
Date: Tue, 22 Dec 2020 11:34:46 +0100
Subject: [PATCH] Align to __BIGGEST_ALIGNMENT__ (GCC, Clang, Intel) or to 512
 bits

for AVX512 compatibility via pystencils

Intel always sets __BIGGEST_ALIGNMENT__ to 64, irrespective of what instruction set is enabled
---
 src/field/Field.impl.h | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/src/field/Field.impl.h b/src/field/Field.impl.h
index 2ae44c77..e1515cb7 100644
--- a/src/field/Field.impl.h
+++ b/src/field/Field.impl.h
@@ -316,14 +316,18 @@ namespace field {
       // Automatically select allocator if none was given
       if ( alloc == 0 )
       {
-         const uint_t alignment = 32;
+#ifdef __BIGGEST_ALIGNMENT__
+         const uint_t alignment = __BIGGEST_ALIGNMENT__;
+#else
+         const uint_t alignment = 64;
+#endif
 
          // aligned allocator only used (by default) if ...
          if ( l == fzyx                      && // ... we use a structure of arrays layout
               _xSize * sizeof(T) > alignment && // ... the inner coordinate is sufficiently large
               sizeof(T) < alignment          && // ... the stored data type is smaller than the alignment
               alignment % sizeof(T) == 0 )      // ... there is an integer number of elements fitting in one aligned line
-            alloc = make_shared<AllocateAligned<T,32> >();
+            alloc = make_shared<AllocateAligned<T,alignment> >();
          else
             alloc = make_shared<StdFieldAlloc<T> > ();
       }
