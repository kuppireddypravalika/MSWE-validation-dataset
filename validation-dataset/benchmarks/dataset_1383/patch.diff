From b1270c5a5c5be9aa53d44f6d45452b7b3862ad89 Mon Sep 17 00:00:00 2001
From: Jason Snell <jason@embarktrucks.com>
Date: Thu, 26 Mar 2020 22:06:04 -0700
Subject: [PATCH] Blob optimizations for fixed size primitive arrays.

---
 lib/message_parser.cc | 10 +---------
 1 file changed, 1 insertion(+), 9 deletions(-)

diff --git a/lib/message_parser.cc b/lib/message_parser.cc
index 66e7e07..ce0e445 100644
--- a/lib/message_parser.cc
+++ b/lib/message_parser.cc
@@ -36,12 +36,6 @@ std::unique_ptr<RosValue> MessageParser::parseField(const std::string &scope, Ba
 
       if (primitive_type_map.find(field.type_name) != primitive_type_map.end()) {
         // This is a primitive type array
-        /*
-        for (size_t i = 0; i < array_len; i++) {
-          parsed_field->values.emplace_back(getPrimitiveField(field));
-        }
-         */
-        parsed_field->type = RosValue::Type::blob;
         parsed_field = getPrimitiveBlob(field, array_len);
       } else {
         // This is an array of embedded types
@@ -72,9 +66,7 @@ std::unique_ptr<RosValue> MessageParser::parseField(const std::string &scope, Ba
     default: {
       parsed_field->type = RosValue::Type::array;
       if (primitive_type_map.find(field.type_name) != primitive_type_map.end()) {
-        for (int32_t i = 0; i < field.array_size; i++) {
-          getPrimitiveField(field);
-        }
+        parsed_field = getPrimitiveBlob(field, field.array_size);
       } else {
         auto embedded_type = getEmbeddedType(scope, field);
         parseArray(field.array_size, embedded_type, parsed_field);
