From 674e5e2d69ebbada117b734488ad6ece24762931 Mon Sep 17 00:00:00 2001
From: David Korth <gerbilsoft@gerbilsoft.com>
Date: Sun, 24 Dec 2017 15:37:45 -0500
Subject: [PATCH] [librpbase] bitstuff.h, uilog2(): Optimized and fixed up some
 code.

- gcc: Use __builtin_clz(), not __builtin_ctz(). The latter would return
       a smaller value if the input number wasn't a power of 2. The XOR
       with 31 is needed in order to convert the value from "number of
       leading zeroes" to a bit index.
- MSVC: Remove the "n == 0" check, since _BitScanReverse() does that
        automatically. (gcc's __builtin_clz() does not.)
---
 src/librpbase/bitstuff.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/librpbase/bitstuff.h b/src/librpbase/bitstuff.h
index 03dc01a3f6..debf7a0a3f 100644
--- a/src/librpbase/bitstuff.h
+++ b/src/librpbase/bitstuff.h
@@ -38,10 +38,10 @@ extern "C" {
 static inline unsigned int uilog2(unsigned int n)
 {
 #if defined(__GNUC__)
-	return (n == 0 ? 0 : __builtin_ctz(n));
+	// NOTE: XOR is needed to return the bit index
+	// instead of the number of leading zeroes.
+	return (n == 0 ? 0 : 31^__builtin_clz(n));
 #elif defined(_MSC_VER)
-	if (n == 0)
-		return 0;
 	unsigned long index;
 	unsigned char x = _BitScanReverse(&index, n);
 	return (x ? index : 0);
