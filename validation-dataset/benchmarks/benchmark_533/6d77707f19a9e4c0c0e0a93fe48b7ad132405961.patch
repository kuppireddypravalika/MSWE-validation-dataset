From 6d77707f19a9e4c0c0e0a93fe48b7ad132405961 Mon Sep 17 00:00:00 2001
From: David Stuttard <david.stuttard@amd.com>
Date: Fri, 12 Aug 2022 13:29:42 +0100
Subject: [PATCH] Fix use of Log2 ready for upstream llvm change (#1962)

Upstream has removed Log2 work-around. Appears this was mainly for Android
support.
Changing to use log2 instead.
---
 lgc/patch/PatchInOutImportExport.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/lgc/patch/PatchInOutImportExport.cpp b/lgc/patch/PatchInOutImportExport.cpp
index a51af10b54..d8b0e970da 100644
--- a/lgc/patch/PatchInOutImportExport.cpp
+++ b/lgc/patch/PatchInOutImportExport.cpp
@@ -5551,7 +5551,7 @@ Value *PatchInOutImportExport::reconfigWorkgroup(Value *localInvocationId, Instr
 
     if (isPowerOf2_32(workgroupSizeYMul8)) {
       // If we have a power of two, we can use a right shift to compute the division more efficiently.
-      offset = BinaryOperator::CreateLShr(x, ConstantInt::get(int32Ty, Log2(workgroupSizeYMul8)), "", insertPos);
+      offset = BinaryOperator::CreateLShr(x, ConstantInt::get(int32Ty, log2(workgroupSizeYMul8)), "", insertPos);
     } else {
       // Otherwise we truncate down to a 16-bit integer, do the division, and zero extend. This will
       // result in significantly less instructions to do the divide.
@@ -5616,7 +5616,7 @@ Value *PatchInOutImportExport::reconfigWorkgroup(Value *localInvocationId, Instr
 
     if (isPowerOf2_32(workgroupSizeXMul2)) {
       // If we have a power of two, we can use a right shift to compute the division more efficiently.
-      div = BinaryOperator::CreateLShr(maskedX, ConstantInt::get(int32Ty, Log2(workgroupSizeXMul2)), "", insertPos);
+      div = BinaryOperator::CreateLShr(maskedX, ConstantInt::get(int32Ty, log2(workgroupSizeXMul2)), "", insertPos);
     } else {
       // Otherwise we truncate down to a 16-bit integer, do the division, and zero extend. This will
       // result in significantly less instructions to do the divide.
