From eab55e0dd6832f097863d64a2034cb74cc38ee73 Mon Sep 17 00:00:00 2001
From: Charles Ofria <charles.ofria@gmail.com>
Date: Tue, 5 Feb 2019 00:24:51 -0500
Subject: [PATCH] Setup CalcLexicaseProbs to return a const reference from the
 cache rather than allocating new space.

---
 apps/SelectionAnalyze/SelectionData.h | 8 +++-----
 1 file changed, 3 insertions(+), 5 deletions(-)

diff --git a/apps/SelectionAnalyze/SelectionData.h b/apps/SelectionAnalyze/SelectionData.h
index 1e509195c5..5347def660 100644
--- a/apps/SelectionAnalyze/SelectionData.h
+++ b/apps/SelectionAnalyze/SelectionData.h
@@ -351,9 +351,9 @@ class SelectionData {
 
   /// Calculate the remaining probabilities for a given starting prob and
   /// current orgs and criteria.
-  emp::vector<double> CalcLexicaseProbs(const emp::BitVector & orgs, const emp::BitVector & fits) {
+  const emp::vector<double> & CalcLexicaseProbs(const emp::BitVector & orgs, const emp::BitVector & fits) {
     // Look up this set of organisms in the cache.
-    emp::vector<double> out_probs = prob_cache[orgs];
+    emp::vector<double> & out_probs = prob_cache[orgs];
 
     // If out_probs has already been set, return the result!
     if (out_probs.size()) return out_probs;
@@ -396,7 +396,7 @@ class SelectionData {
       total_fit_weight += weight;
 
       // Recursively call on the next population.
-      const auto next_probs = CalcLexicaseProbs(next_orgs, next_fits);
+      const auto & next_probs = CalcLexicaseProbs(next_orgs, next_fits);
       for (size_t i = 0; i < out_probs.size(); i++) {
         out_probs[i] += weight * next_probs[i];
       }
@@ -405,8 +405,6 @@ class SelectionData {
     }
 
     emp::Scale(out_probs, 1.0 / total_fit_weight);
-
-    prob_cache[orgs] = out_probs;
     return out_probs;
   }
 
