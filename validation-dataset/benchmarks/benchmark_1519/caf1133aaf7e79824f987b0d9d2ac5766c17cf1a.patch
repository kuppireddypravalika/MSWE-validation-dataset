From caf1133aaf7e79824f987b0d9d2ac5766c17cf1a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Can=20B=C3=B6l=C3=BCk?= <can.boluk89@gmail.com>
Date: Sat, 11 Jul 2020 17:31:02 +0200
Subject: [PATCH] Implement simple filtering to mov prop. to improve speed.

---
 VTIL-Compiler/optimizer/mov_propagation_pass.cpp | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/VTIL-Compiler/optimizer/mov_propagation_pass.cpp b/VTIL-Compiler/optimizer/mov_propagation_pass.cpp
index 4be00edb..02e3608d 100644
--- a/VTIL-Compiler/optimizer/mov_propagation_pass.cpp
+++ b/VTIL-Compiler/optimizer/mov_propagation_pass.cpp
@@ -124,10 +124,17 @@ namespace vtil::optimizer
 				if ( type >= operand_type::write || !op.is_register() )
 					continue;
 
+				// Skip if stack pointer, volatile, or read-only.
+				//
+				if ( op.reg().is_stack_pointer() ||
+					 op.reg().is_volatile() ||
+					 op.reg().is_read_only() )
+					continue;
+
 				// Declare bypass point and trace it.
 				//
 				mtracer.bypass = it;
-				auto res = xblock ? mtracer.rtrace_p( { it, op.reg() } ) : mtracer.trace_p( { it, op.reg() } );
+				auto res = ( xblock && op.reg().is_global() ) ? mtracer.rtrace_p( { it, op.reg() } ) : mtracer.trace_p( { it, op.reg() } );
 
 				// Skip if invalid result or if we resolved it into an expression.
 				//
