From bfef1ddaf1582092a4cadbb5de37af0013fd2949 Mon Sep 17 00:00:00 2001
From: Bradley Lowekamp <blowekamp@mail.nih.gov>
Date: Wed, 29 May 2013 09:56:36 -0400
Subject: [PATCH] BUG: Prevent signed integer overflow in vnl urand_

Use bit shifting instead of power of 2 loop, to prevent signed integer
overflow.

Change-Id: I7369dba8e0d073de4213cfc646e81dda462b9955
---
 .../ThirdParty/VNL/src/vxl/v3p/netlib/laso/urand.c   | 12 +++---------
 1 file changed, 3 insertions(+), 9 deletions(-)

diff --git a/Modules/ThirdParty/VNL/src/vxl/v3p/netlib/laso/urand.c b/Modules/ThirdParty/VNL/src/vxl/v3p/netlib/laso/urand.c
index c21ed2da848..7f8186d8df4 100644
--- a/Modules/ThirdParty/VNL/src/vxl/v3p/netlib/laso/urand.c
+++ b/Modules/ThirdParty/VNL/src/vxl/v3p/netlib/laso/urand.c
@@ -30,7 +30,6 @@ doublereal urand_(integer *iy)
     double atan(doublereal), sqrt(doublereal);
 
     /* Local variables */
-    integer m;
     real s=0;
     integer ia=0, ic=0, mic=0;
     doublereal halfm;
@@ -55,18 +54,13 @@ doublereal urand_(integer *iy)
     }
 
 /*  IF FIRST ENTRY, COMPUTE MACHINE INTEGER WORD LENGTH */
-
 /*<       M = 1 >*/
-    m = 1;
 /*<    10 M2 = M >*/
-L10:
-    m2 = m;
 /*<       M = ITWO*M2 >*/
-    m = itwo * m2;
 /*<       IF (M .GT. M2) GO TO 10 >*/
-    if (m > m2) {
-        goto L10;
-    }
+/* Just use bit shifting to prevent signed integer overflow in original f2c code */
+    m2 = ((integer) 1) << ( sizeof(integer) * 8 - 2);
+
 /*<       HALFM = M2 >*/
     halfm = (doublereal) m2;
 
