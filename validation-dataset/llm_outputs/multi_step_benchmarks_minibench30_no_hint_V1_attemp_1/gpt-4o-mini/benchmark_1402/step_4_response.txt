```json
{
  "optimized_code": "#include \"tensor.hpp\"\n#include <algorithm>\n#include <vector>\n#include <limits>\n\nvoid topk(const Tensor<float>& input, Tensor<float>& output, Tensor<int64_t>& indices, std::size_t k) {\n    std::size_t row = input.rows;\n    std::size_t col = input.cols;\n    for (std::size_t i = 0; i < row; ++i) {\n        // Min-heap for maintaining the top k elements\n        std::vector<std::pair<float, std::size_t>> minHeap;\n        minHeap.reserve(k);\n\n        // Fill the heap with the first k elements\n        for (std::size_t j = 0; j < k; ++j) {\n            minHeap.emplace_back(input(i, j), j);\n        }\n        std::make_heap(minHeap.begin(), minHeap.end(), std::greater<>());\n\n        // Process remaining elements\n        for (std::size_t j = k; j < col; ++j) {\n            if (input(i, j) > minHeap.front().first) {\n                std::pop_heap(minHeap.begin(), minHeap.end(), std::greater<>());\n                minHeap.pop_back();\n                minHeap.emplace_back(input(i, j), j);\n                std::push_heap(minHeap.begin(), minHeap.end(), std::greater<>());\n            }\n        }\n        // Now minHeap contains the k largest elements\n        std::sort_heap(minHeap.begin(), minHeap.end(), std::greater<>());\n\n        // Write results to output and indices\n        for (std::size_t j = 0; j < k; ++j) {\n            output(i, j) = minHeap[j].first;\n            indices(i, j) = static_cast<int64_t>(minHeap[j].second);\n        }\n    }\n}\n\n// Explicit template instantiations\n\ntemplate struct Tensor<float>;\ntemplate struct Tensor<int64_t>;",
  "analysis": "The optimization improves the performance of the top-k function by using a min-heap data structure to maintain only the top k elements instead of sorting the entire row. This reduces unnecessary computations and memory operations, particularly effective for larger matrices. The adjustments focus on efficient heap operations combined with strategic population of the heap, resulting in improved average execution time."
}
```