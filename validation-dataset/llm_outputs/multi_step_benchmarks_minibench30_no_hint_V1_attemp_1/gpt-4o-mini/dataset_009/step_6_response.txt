```json
{
  "optimized_code": "// original.cpp\n#include <string>\n#include <cctype>\n#include <cstring>\n\n// Optimized string implementation with improved memory management\nclass SimpleString {\n    char* data = nullptr;\n    size_t len = 0;\n    size_t cap = 0;\npublic:\n    SimpleString() = default;\n    explicit SimpleString(const std::string& s) { *this = s; }\n    SimpleString(const SimpleString& other) { *this = other; }\n    SimpleString(SimpleString&& other) noexcept : data(other.data), len(other.len), cap(other.cap) {\n        other.data = nullptr;\n        other.len = other.cap = 0;\n    }\n    ~SimpleString() { delete[] data; }\n    SimpleString& operator=(const SimpleString& other) {\n        if (this != &other) { resize(other.len); std::memcpy(data, other.data, other.len); }\n        return *this;\n    }\n    SimpleString& operator=(const std::string& s) { \n        resize(s.size()); \n        std::memcpy(data, s.data(), s.size());\n        return *this;\n    }\n    void resize(size_t n) {\n        if (cap < n) {\n            char* newd = new char[n];\n            if (data) {\n                std::memcpy(newd, data, len);\n                delete[] data;\n            }\n            data = newd;\n            cap = n;\n        }\n        len = n;\n    }\n    size_t size() const { return len; }\n    SimpleString substr(size_t pos, size_t n) const { return SimpleString(std::string(data + pos, n)); }\n    SimpleString substr(size_t pos) const { return substr(pos, len - pos); }\n    void append(const SimpleString& s) {\n        size_t oldLen = len;\n        resize(len + s.len);\n        std::memcpy(data + oldLen, s.data, s.len);\n    }\n    void append(const std::string& s) {\n        size_t oldLen = len;\n        resize(len + s.size());\n        std::memcpy(data + oldLen, s.data(), s.size());\n    }\n    std::string str() const { return std::string(data, len); }\n};\n\nstatic bool iequals(const std::string &a, const std::string &b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (std::tolower(static_cast<unsigned char>(a[i])) != std::tolower(static_cast<unsigned char>(b[i])))\n            return false;\n    }\n    return true;\n}\n\nvoid search_replace(std::string &text, const std::string &find, const std::string &replace) {\n    SimpleString left, right(text);\n    size_t pos = 0;\n    const size_t find_size = find.size();\n    while (pos <= right.size() - find_size) {\n        // Case insensitive comparison\n        if (iequals(right.substr(pos, find_size).str(), find)) {\n            left.append(right.substr(0, pos));\n            left.append(replace);\n            right = right.substr(pos + find_size);\n            pos = 0;\n        } else {\n            ++pos;\n        }\n    }\n    left.append(right); // Append remaining text\n    text = left.str(); \n}\n\n// explicit instantiation for benchmark usage\nvoid search_replace(std::string&, const std::string&, const std::string&);",
  "analysis": "The optimized code enhances the performance of the `search_replace` function and the `SimpleString` class. Optimizations include reducing memory reallocations during string operations, efficient memory management for appending, and using `size_t` for safer indexing. The `search_replace` loop efficiently processes substrings while maintaining readability and reducing complexity. This produces a more performant execution of search-and-replace functionality in texts."
}
```