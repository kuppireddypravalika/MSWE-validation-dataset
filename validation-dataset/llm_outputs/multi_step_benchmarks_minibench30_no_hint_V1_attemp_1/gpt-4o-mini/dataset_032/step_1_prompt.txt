You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include "streamer.hpp"

int Streamer::tick_send(uint32_t timeout)
{
    std::lock_guard<std::mutex> stack(mStreamerMtx);

    /* short circuit everything if bio isn't active */
    if (!(mBio->isactive()))
    {
        free_pend();
        return 0;
    }

    if (mBio->cansend(timeout))
    {
        handleoutgoing_locked();
    }

    return 1;
}


// streamer.hpp
#pragma once
#include <chrono>
#include <thread>
#include <mutex>

class MockBio {
public:
    explicit MockBio(bool active = true) : active_(active) {}
    bool isactive() const { return active_; }
    bool cansend(uint32_t timeout_us) {
        std::this_thread::sleep_for(std::chrono::microseconds(timeout_us));
        return true;
    }
private:
    bool active_;
};

class Streamer {
public:
    explicit Streamer(MockBio* bio) : mBio(bio), sent(0) {}

    int tick_send(uint32_t timeout);

    void free_pend() {}
    void handleoutgoing_locked() { ++sent; }

    std::size_t sent;
private:
    std::mutex mStreamerMtx;
    MockBio* mBio;
};


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include "streamer.hpp"
#include <chrono>
#include <iostream>
#include <string>
#include <thread>
#include <vector>

int main(int argc, char* argv[])
{
    std::string mode = "perf";
    int threads = 6;
    int iters = 6000;

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg.rfind("--threads=",0)==0) threads = std::stoi(arg.substr(10));
        else if (arg.rfind("--iters=",0)==0) iters = std::stoi(arg.substr(8));
    }

    MockBio bio(true);
    Streamer streamer(&bio);
    const uint32_t timeout = 300; // microseconds for cansend simulation

    if (mode == "correct") {
        for (int i = 0; i < iters; ++i) {
            streamer.tick_send(timeout);
        }
        std::cout << streamer.sent << "\n";
        return 0;
    }

    using clock = std::chrono::high_resolution_clock;
    auto start = clock::now();
    std::vector<std::thread> workers;
    for (int t = 0; t < threads; ++t) {
        workers.emplace_back([&, timeout]() {
            for (int i = 0; i < iters; ++i) {
                streamer.tick_send(timeout);
            }
        });
    }
    for (auto& th : workers) th.join();
    auto end = clock::now();

    std::cout << "Time: "
              << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count()
              << " ms\n";
    return 0;
}


// streamer.hpp
#pragma once
#include <chrono>
#include <thread>
#include <mutex>

class MockBio {
public:
    explicit MockBio(bool active = true) : active_(active) {}
    bool isactive() const { return active_; }
    bool cansend(uint32_t timeout_us) {
        std::this_thread::sleep_for(std::chrono::microseconds(timeout_us));
        return true;
    }
private:
    bool active_;
};

class Streamer {
public:
    explicit Streamer(MockBio* bio) : mBio(bio), sent(0) {}

    int tick_send(uint32_t timeout);

    void free_pend() {}
    void handleoutgoing_locked() { ++sent; }

    std::size_t sent;
private:
    std::mutex mStreamerMtx;
    MockBio* mBio;
};


Previous attempt info:
Original execution time: mean = 12849.60 ms, std = 10.69 ms