{
  "benchmarks": [
    {
      "name": "benchmark_001",
      "inefficiency": "Redundant computations",
      "optimization": "Precompute values"
    },
    {
      "name": "benchmark_002",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_008",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_009",
      "inefficiency": "Unwanted type conversions",
      "optimization": "Avoid unnecessary type conversions"
    },
    {
      "name": "benchmark_010",
      "inefficiency": "Redundant computations",
      "optimization": "Precompute values"
    },
    {
      "name": "benchmark_011",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_012",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_100",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_101",
      "inefficiency": "Redundant computations",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_102",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_104",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_107",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_109",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_110",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Utilize architecture-specific features"
    },
    {
      "name": "benchmark_113",
      "inefficiency": "Missing optimization flags",
      "optimization": "Tune build or compile flags"
    },
    {
      "name": "benchmark_116",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_121",
      "inefficiency": "Missing early-exit checks",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_123",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_125",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_128",
      "inefficiency": "Redundant computations",
      "optimization": "Precompute values"
    },
    {
      "name": "benchmark_130",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Utilize architecture-specific features"
    },
    {
      "name": "benchmark_131",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Refine data structures"
    },
    {
      "name": "benchmark_132",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Utilize architecture-specific features"
    },
    {
      "name": "benchmark_135",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_136",
      "inefficiency": "Missing optimization flags",
      "optimization": "Tune build or compile flags"
    },
    {
      "name": "benchmark_137",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_138",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_141",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_144",
      "inefficiency": "Redundant computations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_145",
      "inefficiency": "Unwanted type conversions",
      "optimization": "Avoid unnecessary type conversions"
    },
    {
      "name": "benchmark_146",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_149",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_151",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_156",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_158",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_163",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_164",
      "inefficiency": "Redundant computations",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_165",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Utilize architecture-specific features"
    },
    {
      "name": "benchmark_166",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_170",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_172",
      "inefficiency": "Missing optimization flags",
      "optimization": "Tune build or compile flags"
    },
    {
      "name": "benchmark_177",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_178",
      "inefficiency": "Redundant computations",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_179",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_180",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_181",
      "inefficiency": "Redundant computations",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_185",
      "inefficiency": "Missing early-exit checks",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_192",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_197",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_202",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_209",
      "inefficiency": "Redundant computations",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_212",
      "inefficiency": "Disabled or broken parallelism",
      "optimization": "Fix or enable parallelism"
    },
    {
      "name": "benchmark_217",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_218",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_219",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_220",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_221",
      "inefficiency": "Unwanted type conversions",
      "optimization": "Avoid unnecessary type conversions"
    },
    {
      "name": "benchmark_223",
      "inefficiency": "Redundant computations",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_224",
      "inefficiency": "Missing early-exit checks",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_226",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_229",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Utilize architecture-specific features"
    },
    {
      "name": "benchmark_230",
      "inefficiency": "Missing optimization flags",
      "optimization": "Tune build or compile flags"
    },
    {
      "name": "benchmark_237",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_238",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_243",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_244",
      "inefficiency": "Redundant computations",
      "optimization": "Precompute values"
    },
    {
      "name": "benchmark_249",
      "inefficiency": "Redundant computations",
      "optimization": "Precompute values"
    },
    {
      "name": "benchmark_253",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_255",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Refine data structures"
    },
    {
      "name": "benchmark_259",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_261",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_262",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_263",
      "inefficiency": "Disabled or broken parallelism",
      "optimization": "Fix or enable parallelism"
    },
    {
      "name": "benchmark_264",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_267",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_269",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_272",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_273",
      "inefficiency": "Missing early-exit checks",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_274",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_276",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_277",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_278",
      "inefficiency": "Missing early-exit checks",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_280",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_282",
      "inefficiency": "Missing optimization flags",
      "optimization": "Tune build or compile flags"
    },
    {
      "name": "benchmark_283",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_285",
      "inefficiency": "Missing optimization flags",
      "optimization": "Tune build or compile flags"
    },
    {
      "name": "benchmark_287",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_291",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_292",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_293",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_294",
      "inefficiency": "Unwanted type conversions",
      "optimization": "Avoid unnecessary type conversions"
    },
    {
      "name": "benchmark_295",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_296",
      "inefficiency": "Missing early-exit checks",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_301",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Emplace into optional"
    },
    {
      "name": "benchmark_302",
      "inefficiency": "Unnecessary object creation",
      "optimization": "Use integer overload"
    },
    {
      "name": "benchmark_304",
      "inefficiency": "Fixed long sleep interval",
      "optimization": "Expose configurable GC interval"
    },
    {
      "name": "benchmark_306",
      "inefficiency": "Repeated function pointer lookup",
      "optimization": "Cache pointer outside loop"
    },
    {
      "name": "benchmark_307",
      "inefficiency": "Redundant variable management",
      "optimization": "Use helper functions"
    },
    {
      "name": "benchmark_308",
      "inefficiency": "Suboptimal variable ordering",
      "optimization": "Order variables by domain cost"
    },
    {
      "name": "benchmark_310",
      "inefficiency": "Missing page table A/D bits",
      "optimization": "Set A and D bits early"
    },
    {
      "name": "benchmark_311",
      "inefficiency": "Low-level JIT label manipulation",
      "optimization": "Use higher level wrappers"
    },
    {
      "name": "benchmark_312",
      "inefficiency": "Heap allocations in string concatenation",
      "optimization": "Use SmallString"
    },
    {
      "name": "benchmark_313",
      "inefficiency": "Heavy algorithm for small matrix inversion",
      "optimization": "Use specialized inverse routine"
    },
    {
      "name": "benchmark_314",
      "inefficiency": "Redundant async check detection",
      "optimization": "Skip check on unsupported CPU"
    },
    {
      "name": "benchmark_317",
      "inefficiency": "Redundant computations",
      "optimization": "Avoid redundant simplification"
    },
    {
      "name": "benchmark_320",
      "inefficiency": "Repeated cache construction",
      "optimization": "Use thread-local cache"
    },
    {
      "name": "benchmark_322",
      "inefficiency": "Redundant name normalization",
      "optimization": "Reuse normalized name"
    },
    {
      "name": "benchmark_327",
      "inefficiency": "Repeated fragment recording after mismatches",
      "optimization": "Blacklist fragment early"
    },
    {
      "name": "benchmark_331",
      "inefficiency": "Linear global slot scan",
      "optimization": "Early isGlobal check"
    },
    {
      "name": "benchmark_332",
      "inefficiency": "Unnecessary precision promotions",
      "optimization": "Use powf for floats"
    },
    {
      "name": "benchmark_333",
      "inefficiency": "Inefficient instruction selection",
      "optimization": "Emit tMOVgpr2gpr"
    },
    {
      "name": "benchmark_336",
      "inefficiency": "Manual pointer math with division",
      "optimization": "Use CreatePtrDiff"
    },
    {
      "name": "benchmark_337",
      "inefficiency": "Container copies with foreach macro",
      "optimization": "Use range-based loop"
    },
    {
      "name": "benchmark_341",
      "inefficiency": "Disabled NRVO via std::move",
      "optimization": "Return value directly"
    },
    {
      "name": "benchmark_342",
      "inefficiency": "High overhead dynamic scheduling",
      "optimization": "Use static OpenMP schedule"
    },
    {
      "name": "benchmark_343",
      "inefficiency": "Unconditional attribute copies",
      "optimization": "Skip copy when disabled"
    },
    {
      "name": "benchmark_345",
      "inefficiency": "Expensive memory profiling macro",
      "optimization": "Use lightweight version"
    },
    {
      "name": "benchmark_348",
      "inefficiency": "Lock contention on shared table",
      "optimization": "Replace lock with memory fence"
    },
    {
      "name": "benchmark_350",
      "inefficiency": "Missed optimization for declared functions",
      "optimization": "Process declarations in ArgCast"
    },
    {
      "name": "benchmark_351",
      "inefficiency": "Manual XOR loop with resizing",
      "optimization": "Use std::transform and skip resizing"
    },
    {
      "name": "benchmark_352",
      "inefficiency": "Forced interpreter execution",
      "optimization": "Enable JIT via ExecutionEngine"
    },
    {
      "name": "benchmark_353",
      "inefficiency": "Custom stacks hinder ASAN",
      "optimization": "Skip pthread_attr_setstack when ASAN"
    },
    {
      "name": "benchmark_354",
      "inefficiency": "Runtime CPU mode check",
      "optimization": "Bypass check on 64-bit builds"
    },
    {
      "name": "benchmark_355",
      "inefficiency": "Repeated PLT fix-ups",
      "optimization": "Emit fix-ups once"
    },
    {
      "name": "benchmark_358",
      "inefficiency": "Scanning debug users unnecessarily",
      "optimization": "Early return if not used"
    },
    {
      "name": "benchmark_363",
      "inefficiency": "Locale-dependent strtod",
      "optimization": "Use custom parser"
    },
    {
      "name": "benchmark_365",
      "inefficiency": "Copying force vector",
      "optimization": "Move into member"
    },
    {
      "name": "benchmark_370",
      "inefficiency": "Generic eigen solver call",
      "optimization": "Use direct eigenvalue method"
    },
    {
      "name": "benchmark_371",
      "inefficiency": "Redundant FoldingSet lookups",
      "optimization": "Return existing list when unchanged"
    },
    {
      "name": "benchmark_372",
      "inefficiency": "Copying string return",
      "optimization": "Return buffer with move"
    },
    {
      "name": "benchmark_374",
      "inefficiency": "Scanning all redeclarations",
      "optimization": "Break after first default args"
    },
    {
      "name": "benchmark_379",
      "inefficiency": "Repeated name normalization",
      "optimization": "Call GetProtoNorm directly"
    },
    {
      "name": "benchmark_380",
      "inefficiency": "Queue reallocates each append",
      "optimization": "Skip when capacity suffices"
    },
    {
      "name": "benchmark_383",
      "inefficiency": "Thread search on each call",
      "optimization": "Cache thread pointer"
    },
    {
      "name": "benchmark_386",
      "inefficiency": "Recomputing variable address space",
      "optimization": "Read from pointer type"
    },
    {
      "name": "benchmark_388",
      "inefficiency": "Lookup of Int32 type each time",
      "optimization": "Cache pointer for reuse"
    },
    {
      "name": "benchmark_391",
      "inefficiency": "Registry lookup per call",
      "optimization": "Cache attached property function"
    },
    {
      "name": "benchmark_392",
      "inefficiency": "Using Adam with small batch",
      "optimization": "Switch to SGD and larger batch"
    },
    {
      "name": "benchmark_394",
      "inefficiency": "StructurizeCFG processes uniform regions",
      "optimization": "Enable SkipUniformRegions"
    },
    {
      "name": "benchmark_395",
      "inefficiency": "Inaccurate max trip count",
      "optimization": "Use min sign bits to tighten bound"
    },
    {
      "name": "benchmark_396",
      "inefficiency": "Always null move prune",
      "optimization": "Check staticEval before pruning"
    },
    {
      "name": "benchmark_400",
      "inefficiency": "Disabled parallelism",
      "optimization": "Parallelize ReLU with OpenMP"
    }
  ]
}
