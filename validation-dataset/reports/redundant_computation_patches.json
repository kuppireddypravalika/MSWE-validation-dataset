{
  "dataset_001": {
    "eliminates_redundant_computation": true,
    "reason": "The commit disables the sequential importer to enhance cache generation speed, preventing potentially redundant processing during the parser's execution.",
    "redundancy_type": "RC"
  },
  "dataset_002": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors the condition to normalize the character comparison, reducing unnecessary calculations.",
    "redundancy_type": "LI"
  },
  "dataset_003": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces error handling for memory allocation during the creation of a debug visualization but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_004": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a potentially redundant call to FindEntryByFilename with a more exact lookup, eliminating unnecessary computation related to finding the filename.",
    "redundancy_type": "RF"
  },
  "dataset_005": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repeated call to lseek with a single call to fstat, which avoids redundant calculation of the file size.",
    "redundancy_type": "RF"
  },
  "dataset_006": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary sorting of the list by checking if the sorting order has changed before performing the sort.",
    "redundancy_type": "RC"
  },
  "dataset_007": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces duplicated pushes in a loop with a single index-based assignment, eliminating redundant calculations for each vertex.",
    "redundancy_type": "LI"
  },
  "dataset_008": {
    "eliminates_redundant_computation": true,
    "reason": "The commit moves the final assignment of 'idx' outside of the loop, eliminating redundant computation each iteration.",
    "redundancy_type": "LI"
  },
  "dataset_009": {
    "eliminates_redundant_computation": true,
    "reason": "Optimizes string allocation by allocating memory for 'Left' only once based on the length of 'Right'.",
    "redundancy_type": "LI"
  },
  "dataset_010": {
    "eliminates_redundant_computation": true,
    "reason": "The commit sets a specific fonts directory, preventing redundant searches through the entire home directory during initialization.",
    "redundancy_type": "RC"
  },
  "dataset_011": {
    "eliminates_redundant_computation": false,
    "reason": "The patch modifies a conditional check related to cursor behavior but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_012": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts a calculation for a better output without removing redundancy.",
    "redundancy_type": null
  },
  "dataset_013": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates repeated style name comparisons and reduces unnecessary list traversal by directly erasing styles after they are added to the results, thus preventing duplicate entries.",
    "redundancy_type": "RF"
  },
  "dataset_014": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces unnecessary calls to the Update method by only executing it when 'full' is true, avoiding extraneous updates during drags.",
    "redundancy_type": "UE"
  },
  "dataset_015": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a pointless call to AssDialogue::SetEntryData that was not necessary for each dialog entry, leading to improved performance.",
    "redundancy_type": "RF"
  },
  "dataset_016": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the function to directly update the map instead of redundantly calling UpdateMaps() after every insertion, which improves efficiency.",
    "redundancy_type": "UE"
  },
  "dataset_017": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the line_iterator to streamline the handling of string input by reducing unnecessary function calls based on input width.",
    "redundancy_type": "RF"
  },
  "dataset_018": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary evaluations of `colWidth[i]`, which enhances performance during grid painting.",
    "redundancy_type": "CE"
  },
  "dataset_019": {
    "eliminates_redundant_computation": true,
    "reason": "The new implementation of GetASSFormated reduces multiple calls to GetTimeHours, GetTimeMinutes, and other functions by directly computing the required values from 'time' instead.",
    "redundancy_type": "RF"
  },
  "dataset_020": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary operations on an empty container, which optimizes performance.",
    "redundancy_type": "UE"
  },
  "dataset_021": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the constructor to directly copy the group string instead of constructing a new one, reducing unnecessary computation.",
    "redundancy_type": "RC"
  },
  "dataset_022": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a linear search for whitespace characters with a binary search, making the computation more efficient.",
    "redundancy_type": "RF"
  },
  "dataset_023": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary multiplication by the sample rate that was leading to excess memory allocation.",
    "redundancy_type": "RC"
  },
  "dataset_024": {
    "eliminates_redundant_computation": true,
    "reason": "The commit consolidates multiple audio clip saves into a single save operation, thus reducing redundant computations related to determining the start and end times.",
    "redundancy_type": "RC"
  },
  "dataset_025": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary calculations related to scaling syllable lengths, effectively reducing computation by truncating syllables directly.",
    "redundancy_type": "LI"
  },
  "dataset_026": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a redundant computation using std::partial_sum with a more efficient approach using std::iota, preventing unnecessary calculations.",
    "redundancy_type": "RC"
  },
  "dataset_027": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the data structure used to store values from std::set to std::unordered_set, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_028": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop that finds the maximum value in an array with a more efficient built-in function, eliminating redundant calculations.",
    "redundancy_type": "RC"
  },
  "dataset_029": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes audio downmixing by utilizing FFMS2's capabilities instead of a suboptimal method, avoiding unnecessary calculations for multiple channels.",
    "redundancy_type": "LI"
  },
  "dataset_030": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant calls to 'checkSize' and moves the 'quantization' call outside of the loop to avoid repeated computations.",
    "redundancy_type": "RC"
  },
  "dataset_031": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces std::transform with a loop for better readability but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_032": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant mutex lock when checking if mBio is active, thus avoiding unnecessary locking when it is not needed.",
    "redundancy_type": "LI"
  },
  "dataset_033": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the processing of tasks to be asynchronous, but does not eliminate any redundant computations; it merely changes the context of how tasks are handled.",
    "redundancy_type": null
  },
  "dataset_034": {
    "eliminates_redundant_computation": false,
    "reason": "The commit mainly focuses on improving the UI behavior and scrolling mechanics rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_035": {
    "eliminates_redundant_computation": false,
    "reason": "The commit is focused on fixing a memory leak by ensuring that the allocated memory is properly deleted, rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_036": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant loop that asynchronously processes pairs, optimizing the execution without unnecessary recomputation.",
    "redundancy_type": "LI"
  },
  "dataset_037": {
    "eliminates_redundant_computation": false,
    "reason": "The commit improves performance by using asynchronous calls but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_038": {
    "eliminates_redundant_computation": true,
    "reason": "Removed a time-consuming check that was triggered every time a game started, which should only occur in debug mode.",
    "redundancy_type": "CE"
  },
  "dataset_039": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a linear search with a logarithmic search for checking containment, improving performance for larger sets.",
    "redundancy_type": "RC"
  },
  "dataset_040": {
    "eliminates_redundant_computation": false,
    "reason": "The patch optimizes the sorting of warehouses by converting from a list to a vector and using std::sort, but it does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_041": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the unnecessary search for events tied to 'currentGF' when the first event is already checked against 'currentGF'.",
    "redundancy_type": "RF"
  },
  "dataset_042": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors the Lua execution to avoid redundant execution of similar assertions by storing values in temporary variables, thus improving efficiency.",
    "redundancy_type": "RF"
  },
  "dataset_043": {
    "eliminates_redundant_computation": true,
    "reason": "The change replaces two separate conditional checks with a single, more efficient computation, reducing redundancy.",
    "redundancy_type": "CE"
  },
  "dataset_044": {
    "eliminates_redundant_computation": false,
    "reason": "The patch changes the method of inserting elements into the 'joined' vector but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_045": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the container from std::vector to boost::container::small_vector, which is an optimization but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_046": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary data transmission by copying the map via the filesystem instead of transmitting it over the network.",
    "redundancy_type": "UE"
  },
  "dataset_047": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reserves a vector for a known size instead of allowing it to grow dynamically, reducing unnecessary memory reallocations.",
    "redundancy_type": "RC"
  },
  "dataset_048": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a sort operation with a partition, reducing unnecessary comparisons for ordering, thus optimizing the computation involved.",
    "redundancy_type": "RC"
  },
  "dataset_049": {
    "eliminates_redundant_computation": true,
    "reason": "The commit skips the loop iteration if there are no people of a job, preventing unnecessary computations and calls to RANDOM_RAND.",
    "redundancy_type": "LI"
  },
  "dataset_050": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a sleep call which was unnecessary and reduces unnecessary waiting time in the loop.",
    "redundancy_type": "LI"
  },
  "dataset_051": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the removal of an item from the vector, avoiding unnecessary data movement by using a move operation instead of erasing and shifting elements.",
    "redundancy_type": "RC"
  },
  "dataset_052": {
    "eliminates_redundant_computation": false,
    "reason": "The changes replace a manual implementation with a library function for case-insensitive comparison, but do not eliminate redundancy.",
    "redundancy_type": null
  },
  "dataset_053": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a default simulation speed but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_054": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the event_filter based on a specific condition but does not eliminate any existing redundant computations.",
    "redundancy_type": null
  },
  "dataset_055": {
    "eliminates_redundant_computation": true,
    "reason": "The patch reactivates caching for terrain, which prevents the need to regenerate terrain data that hasn't changed, thereby eliminating unnecessary recomputation.",
    "redundancy_type": "UE"
  },
  "dataset_056": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant calls to ShowMainMenu, which were made under both branches of the conditional statements.",
    "redundancy_type": "RC"
  },
  "dataset_057": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the calculation of the number of CPU cores by streamlining the logic, reducing redundancy in determining the cores based on specific conditions.",
    "redundancy_type": "RF"
  },
  "dataset_058": {
    "eliminates_redundant_computation": true,
    "reason": "The patch simplifies the conditional checking with an additional condition to avoid unnecessary calculations if the airfoil width is not valid.",
    "redundancy_type": "RC"
  },
  "dataset_059": {
    "eliminates_redundant_computation": true,
    "reason": "The commit extracts the layout of the tensor into a variable, avoiding multiple calls to the same function and enhancing performance.",
    "redundancy_type": "RF"
  },
  "dataset_060": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop generating the same value multiple times with a single vector initialization, thus removing repeated calculations.",
    "redundancy_type": "RC"
  },
  "dataset_061": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant memory cache release that is no longer necessary after building the operation function list.",
    "redundancy_type": "RC"
  },
  "dataset_062": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a variable assignment and directly returns false if any tensor is not initialized, thus avoiding unnecessary checks after the loop.",
    "redundancy_type": "LI"
  },
  "dataset_063": {
    "eliminates_redundant_computation": false,
    "reason": "The patch optimizes the formatting of output but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_064": {
    "eliminates_redundant_computation": true,
    "reason": "The patch reduces unnecessary repeated allocations and directly uses the allocated holder after checking its size.",
    "redundancy_type": "UE"
  },
  "dataset_065": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary recomputation of `ddout` when conditions for `grad_x_grad` and `grad_y_grad` are met, thereby streamlining the calculation.",
    "redundancy_type": "RC"
  },
  "dataset_066": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the computation by avoiding redundant calculations of tensor values when either grad_x_grad or grad_y_grad is present, eliminating unnecessary tensor operations.",
    "redundancy_type": "RC"
  },
  "dataset_067": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the flatten_decomp function by removing repeated calculations of the tensor slice and uses a more efficient approach to accumulate the result, thereby reducing unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_068": {
    "eliminates_redundant_computation": true,
    "reason": "The commit moves the computation of 'temp' outside of a loop where it was repeatedly calculated with the same values.",
    "redundancy_type": "LI"
  },
  "dataset_069": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant string 'concat' from the list of operations, which may indicate that the computation related to this operation was unnecessary.",
    "redundancy_type": "CE"
  },
  "dataset_070": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the logic for handling out-of-bound seeks by clamping to fsize instead of resetting to 0, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_071": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant conditional checks that double-verify the `data` pointer and its `equipmentId` value before loading equipment.",
    "redundancy_type": "CE"
  },
  "dataset_072": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the erase operation by directly removing the first element without specifying the range, which improves code clarity and efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_073": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the way arguments are collected by eliminating the unnecessary repeated insertion into the vector, reducing computational overhead.",
    "redundancy_type": "RF"
  },
  "dataset_074": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes matrix traversal by recalculating indices for upper triangular elements based on a single loop iteration, thus reducing redundant calculations.",
    "redundancy_type": "LI"
  },
  "dataset_075": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a broadcast operation with a single signal, which reduces unnecessary wake-ups of threads.",
    "redundancy_type": "RF"
  },
  "dataset_076": {
    "eliminates_redundant_computation": false,
    "reason": "The change removes an unnecessary addition of 0.5 before division, but does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_077": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary check that was redundant due to the state of m_bHasData already being updated.",
    "redundancy_type": "CE"
  },
  "dataset_078": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a comparison threshold but does not address any redundant computations.",
    "redundancy_type": null
  },
  "dataset_079": {
    "eliminates_redundant_computation": true,
    "reason": "This commit replaces the count and insert method calls with a single emplace call, eliminating the need to call vote.GetMasternodeOutpoint() multiple times and reducing function calls.",
    "redundancy_type": "RF"
  },
  "dataset_080": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the logic in the InMempool() method by directly returning the result of the check, thereby removing unnecessary conditional logic.",
    "redundancy_type": "CE"
  },
  "dataset_081": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary check for posInBlock since it is no longer relevant, simplifying the assignment.",
    "redundancy_type": "CE"
  },
  "dataset_082": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the way transaction hashes are checked in the mapDSTX, eliminating the redundant calculation of the hash for both counting and accessing.",
    "redundancy_type": "RF"
  },
  "dataset_083": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the cache size for quorum loading based on the actual active quorums, avoiding unnecessary computation and data loading.",
    "redundancy_type": "RC"
  },
  "dataset_084": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the boolean check by removing the redundant check for model, which is guaranteed to be non-null at this point in the code.",
    "redundancy_type": "CE"
  },
  "dataset_085": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the sleep time during connection attempts if a previous connection was made, avoiding unnecessary waiting time.",
    "redundancy_type": "LI"
  },
  "dataset_086": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the reserve calculation for vInv by eliminating the redundant call to reserve while the lock is held, preventing unnecessary computation.",
    "redundancy_type": "RC"
  },
  "dataset_087": {
    "eliminates_redundant_computation": true,
    "reason": "The commit defines a constant for the sleep duration instead of repeating the value in multiple places.",
    "redundancy_type": "RC"
  },
  "dataset_088": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds logic to adjust pruning behavior during block download, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_089": {
    "eliminates_redundant_computation": false,
    "reason": "The commit reduces the sleep duration in a recovery thread, but it does not address any redundant computations.",
    "redundancy_type": null
  },
  "dataset_090": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies a boolean expression by removing redundant check for a null pointer, given the earlier guard clause.",
    "redundancy_type": "CE"
  },
  "dataset_091": {
    "eliminates_redundant_computation": true,
    "reason": "The patch reduces potential duplicate verification by limiting the number of locks processed at a time, avoiding unnecessary computations related to lock verification.",
    "redundancy_type": "RC"
  },
  "dataset_092": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the computation of the reserve size for vInv by moving it outside the LOCK and reusing it effectively, reducing unnecessary function calls.",
    "redundancy_type": "LI"
  },
  "dataset_093": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a constant for the select timeout, replacing direct calculations, which avoids redundancy in specifying the timeout value.",
    "redundancy_type": "RC"
  },
  "dataset_094": {
    "eliminates_redundant_computation": false,
    "reason": "The commit moves the input tick call within the loop but does not eliminate redundant computation.",
    "redundancy_type": null
  },
  "dataset_095": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a sleep to improve efficiency but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_096": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds conditional compilation for shadowmaps in server mode, but does not appear to eliminate any existing redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_097": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a direct access pattern with a remapped index, which avoids the need for repeated computation of vertex indices.",
    "redundancy_type": "RC"
  },
  "dataset_098": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary intersection checks with the bounding box when the node is a leaf, thereby reducing redundant calculations.",
    "redundancy_type": "RC"
  },
  "dataset_099": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary variable (`hit`) since its value is never used, reducing computation without impacting functionality.",
    "redundancy_type": "UE"
  },
  "dataset_100": {
    "eliminates_redundant_computation": false,
    "reason": "The commit primarily changes the object instantiation and access method, without removing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_101": {
    "eliminates_redundant_computation": true,
    "reason": "The commit points out a potential performance improvement by avoiding memory reallocation if the sizes match, thus eliminating unnecessary computations related to memory management.",
    "redundancy_type": "UE"
  },
  "dataset_102": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a hardcoded magic number with a macro definition, improving code clarity and maintainability.",
    "redundancy_type": "RC"
  },
  "dataset_103": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the behavior of the printf functionality without targeting redundant computations.",
    "redundancy_type": null
  },
  "dataset_104": {
    "eliminates_redundant_computation": false,
    "reason": "The changes involve modifying the number of messages processed, not eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_105": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a sleep time duration without addressing redundant computations or unnecessary calculations.",
    "redundancy_type": null
  },
  "dataset_106": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the size of 'big_queue_bytes' by dividing it by 8, thus eliminating potential unnecessary computations or memory usage from the original size.",
    "redundancy_type": "RC"
  },
  "dataset_107": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the string manipulation by replacing a substring operation with a resizing operation, which eliminates unnecessary repeated computations.",
    "redundancy_type": "RF"
  },
  "dataset_108": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a call to sprintf with strcpy, eliminating unnecessary formatting when copying a string.",
    "redundancy_type": "RF"
  },
  "dataset_109": {
    "eliminates_redundant_computation": false,
    "reason": "The patch changes test probabilities but does not eliminate any redundant computations as defined.",
    "redundancy_type": null
  },
  "dataset_110": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a new method but does not eliminate any existing redundant computations.",
    "redundancy_type": null
  },
  "dataset_111": {
    "eliminates_redundant_computation": false,
    "reason": "The change reduces the wait time for a condition variable but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_112": {
    "eliminates_redundant_computation": false,
    "reason": "The commit implements a new feature for compressing logs, which does not focus on eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_113": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the access_right assignment to conditionally compute its value based on the addr variable, rather than using a constant value, which may lead to improved performance.",
    "redundancy_type": "RC"
  },
  "dataset_114": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes the process by preventing unnecessary calls to the suspend list for inactive threads.",
    "redundancy_type": "DB"
  },
  "dataset_115": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on improving efficiency by adding a wait to allow for ongoing operations to complete, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_116": {
    "eliminates_redundant_computation": false,
    "reason": "The change replaces direct function calls with std::invoke but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_117": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds an overflow condition and adjusts size checks but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_118": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a call to reset the file handle before reconstructing it, eliminating unnecessary initialization.",
    "redundancy_type": "UE"
  },
  "dataset_119": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the number of calls to fstat and lseek by eliminating unnecessary conditional checks and ensuring file size is truncated only when necessary, thus avoiding redundant calculations.",
    "redundancy_type": "CE"
  },
  "dataset_120": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a duplicated check for 'm_repaint_watcher.isRunning()', which was previously evaluated twice.",
    "redundancy_type": "CE"
  },
  "dataset_121": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes file writing by consolidating file operations into a single call instead of separate redundant operations for different platforms.",
    "redundancy_type": "UE"
  },
  "dataset_122": {
    "eliminates_redundant_computation": true,
    "reason": "The patch updates padding calculation to ensure it does not exceed a certain value, eliminating possible redundant calculations when m_padding is less than 4.",
    "redundancy_type": "RC"
  },
  "dataset_123": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the stack size for threads on macOS but does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_124": {
    "eliminates_redundant_computation": true,
    "reason": "The patch reduces the size of the `cond_ids` array, which minimizes stack usage and eliminates the need for handling excessive semaphore notifications, preventing unnecessary computations in case of an unusually large number of semaphore notifications.",
    "redundancy_type": "RC"
  },
  "dataset_125": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary iterations by checking if the _module's variables are empty before continuing, preventing redundant processing.",
    "redundancy_type": "LI"
  },
  "dataset_126": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the logic by eliminating the unnecessary use of 'lv2_obj::g_waiting' when it is not needed, thus avoiding redundant calls.",
    "redundancy_type": "RF"
  },
  "dataset_127": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the conditional logic to use simpler terms, potentially reducing unnecessary checks and improving clarity.",
    "redundancy_type": "CE"
  },
  "dataset_128": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repeated clock function call with a stored value, reducing redundant computation.",
    "redundancy_type": "RF"
  },
  "dataset_129": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the unnecessary conversion to UTF-8 when the encoding is already UTF-8.",
    "redundancy_type": "RF"
  },
  "dataset_130": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces unnecessary initializations and function calls when the encoding is already 'utf-8'.",
    "redundancy_type": "RF"
  },
  "dataset_131": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates a repeated call to GetReverseUnicodePosition with the same input, moving the computation outside the loop.",
    "redundancy_type": "RF"
  },
  "dataset_132": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary conversion of data to and from wxString, streamlining the code.",
    "redundancy_type": "UE"
  },
  "dataset_133": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a prior call to set progress that used a redundant calculation of the index, improving efficiency.",
    "redundancy_type": "LI"
  },
  "dataset_134": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates redundant stack manipulation by using splice instead of swap and pop, which reduces unnecessary operations.",
    "redundancy_type": "RC"
  },
  "dataset_135": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes a copied object to a sorted temporary variable to avoid redundant sorting in every call.",
    "redundancy_type": "RC"
  },
  "dataset_136": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates the need to loop over the file to find changed rows by directly adding new AssDialogue objects, thereby reducing unnecessary computation.",
    "redundancy_type": "LI"
  },
  "dataset_137": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces unnecessary calls to Refresh() by checking if the computed positions are different before invoking it.",
    "redundancy_type": "RF"
  },
  "dataset_138": {
    "eliminates_redundant_computation": true,
    "reason": "The patch simplifies the logic for parsing lines by avoiding multiple memory allocations for the string chunks, thereby reducing redundancy.",
    "redundancy_type": "RC"
  },
  "dataset_139": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a multimap with a vector to avoid the overhead of inserting into an associative container, improving performance by eliminating unnecessary complexity.",
    "redundancy_type": "RC"
  },
  "dataset_140": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates a repeated call to GetSortedSelection by using the size of the selected set directly, thus avoiding unnecessary computations for large selections.",
    "redundancy_type": "RF"
  },
  "dataset_141": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a delay to prevent unnecessary re-evaluation of the 'shared->ready' flag, reducing redundant checks while waiting for fontconfig.",
    "redundancy_type": "RC"
  },
  "dataset_142": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a check for a magic number specific to MKV files but does not eliminate any existing redundant calculations.",
    "redundancy_type": null
  },
  "dataset_143": {
    "eliminates_redundant_computation": true,
    "reason": "Simplifies the computation by removing dependence on GUI element width, which is redundant.",
    "redundancy_type": "RC"
  },
  "dataset_144": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the code to call the method `optTarget->put(q)` only once instead of multiple times during the function execution.",
    "redundancy_type": "RF"
  },
  "dataset_145": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds an unnecessary comparison 'newCost!=newCost', which is always false, potentially preventing future computations.",
    "redundancy_type": "CE"
  },
  "dataset_146": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repeated call with a variable that stores the result, thus avoiding unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_147": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a property value from 'no' to 'yes' without addressing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_148": {
    "eliminates_redundant_computation": true,
    "reason": "The commit comments out the resizing of large unused matrices to reduce memory usage, avoiding unnecessary memory allocation in the process.",
    "redundancy_type": "RC"
  },
  "dataset_149": {
    "eliminates_redundant_computation": true,
    "reason": "The removal of the redundant 'N_padded' computation eliminates unnecessary recalculation related to particle alignment size.",
    "redundancy_type": "RC"
  },
  "dataset_150": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the computation by removing the redundant intermediate storage and directly using results in the output vector.",
    "redundancy_type": "RC"
  },
  "dataset_151": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a constant value assignment based on the cell type, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_152": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts parameters for an iterative algorithm but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_153": {
    "eliminates_redundant_computation": true,
    "reason": "The patch changes string reading to integer reading for determining wavefunction type, avoiding the need for repeated string checks.",
    "redundancy_type": "RC"
  },
  "dataset_154": {
    "eliminates_redundant_computation": false,
    "reason": "The commit primarily focuses on memory management by deallocating xmlNode, rather than optimizing redundant computations.",
    "redundancy_type": null
  },
  "dataset_155": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the loop structure but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_156": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the logic by avoiding repeated checks and computations related to file paths, moving constant evaluations outside of the loop.",
    "redundancy_type": "LI"
  },
  "dataset_157": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds checks to prevent unnecessary operations when certain conditions are met, which reduces redundant computations within the syncUnits function.",
    "redundancy_type": "RC"
  },
  "dataset_158": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a check to avoid redundant computations of 'calculatesub' when 'i' is positive, thus optimizing performance.",
    "redundancy_type": "RF"
  },
  "dataset_159": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a manual string handling process with a direct call to std::getline, thus improving efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_160": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes the computation by applying a simplification for a specific range of values, reducing the number of operations performed.",
    "redundancy_type": "RC"
  },
  "dataset_161": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on implementing memory cleanup in the destructor of the Calculator object without removing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_162": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the loop by moving invariant evaluations outside the loop, avoiding redundant calculations of 'mstruct.eval(eo)' and 'mcounter.calculatesub(eo, eo, false)'.",
    "redundancy_type": "LI"
  },
  "dataset_163": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents unnecessary calculations within function arguments when the previous function calculation fails.",
    "redundancy_type": "UE"
  },
  "dataset_164": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to return early if min is 0.0 and max is 1.0, preventing unnecessary computations in the case where the output is already known.",
    "redundancy_type": "RC"
  },
  "dataset_165": {
    "eliminates_redundant_computation": false,
    "reason": "The commit primarily focuses on modifying an attribute description without addressing redundant computations.",
    "redundancy_type": null
  },
  "dataset_166": {
    "eliminates_redundant_computation": true,
    "reason": "Reserving space for the vector before the loop prevents repeated reallocations during element insertion, thus optimizing performance.",
    "redundancy_type": "LI"
  },
  "dataset_167": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the data structure from map to unordered_map for performance improvement, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_168": {
    "eliminates_redundant_computation": true,
    "reason": "The commit caches the created PaddlePredictor to avoid repeated creation with the same model directory, thus reducing redundant computation.",
    "redundancy_type": "RF"
  },
  "dataset_169": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a duplicated check for a nullptr in favor of a more informative error message, reducing redundancy.",
    "redundancy_type": "CE"
  },
  "dataset_170": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the backend setup for the ShapeKernel but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_171": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a fast path for a specific case (max_replace == 0) but does not eliminate redundant computations in the general logic of the function.",
    "redundancy_type": null
  },
  "dataset_172": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the type from int to size_t for indexing but does not eliminate any computations.",
    "redundancy_type": null
  },
  "dataset_173": {
    "eliminates_redundant_computation": true,
    "reason": "Switched the order of nested loops to improve performance, potentially reducing redundant calculations.",
    "redundancy_type": "LI"
  },
  "dataset_174": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the method used to save a cloud file from savePCDFile to writeBinaryCompressed, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_175": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the extraction process by eliminating unnecessary iterations and checks, thereby reducing repeated evaluations in the loop.",
    "redundancy_type": "LI"
  },
  "dataset_176": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the deletion of empty regions by reducing unnecessary iterations and checks, particularly eliminating redundant evaluations in the loop.",
    "redundancy_type": "LI"
  },
  "dataset_177": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the calculation method for h_index but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_178": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the handling of smart pointers by removing unnecessary exception handling and directly using the weak pointer's lock method, which introduces no redundant computations.",
    "redundancy_type": "RF"
  },
  "dataset_179": {
    "eliminates_redundant_computation": false,
    "reason": "The commit normalizes cone coefficients but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_180": {
    "eliminates_redundant_computation": true,
    "reason": "The commit fixes the variable 'seed_counter' to prevent unnecessary repeat computations, thus improving speed.",
    "redundancy_type": "RC"
  },
  "dataset_181": {
    "eliminates_redundant_computation": true,
    "reason": "The commit updates the logic to prevent unnecessary iterations in the kNN search by adjusting when the search box is updated.",
    "redundancy_type": "LI"
  },
  "dataset_182": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary string operations that were repeatedly transforming the same data.",
    "redundancy_type": "RC"
  },
  "dataset_183": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the preallocation size from a maximum value to 1, eliminating unnecessary large memory allocation.",
    "redundancy_type": "RC"
  },
  "dataset_184": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the count from a maximum value to a fixed value of 1, reducing unnecessary complexity in code execution.",
    "redundancy_type": "RC"
  },
  "dataset_185": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the assignment operator from % to %=, which simplifies the code but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_186": {
    "eliminates_redundant_computation": false,
    "reason": "The commit primarily focuses on code style improvements by changing the variable type and loop structure, without eliminating any redundant computations.",
    "redundancy_type": null
  },
  "dataset_187": {
    "eliminates_redundant_computation": false,
    "reason": "The commit improves code readability and uses modern C++ features but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_188": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors the initialization of the min_max_angle_by_dist vector, removing redundant code that repeatedly initializes identical values.",
    "redundancy_type": "RC"
  },
  "dataset_189": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces multiple function calls to find minimum and maximum with a single call to `std::minmax_element`, reducing repeated computations.",
    "redundancy_type": "RF"
  },
  "dataset_190": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a nested loop for copying data with a single efficient call to std::copy_n, which reduces redundancy in data copying operations.",
    "redundancy_type": "LI"
  },
  "dataset_191": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces multiple conditional checks with a more efficient implementation using std::min and std::max functions, simplifying the updates to min/max values.",
    "redundancy_type": "CE"
  },
  "dataset_192": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop that finds the maximum strength and corresponding rotation with a single call to std::max_element, eliminating unnecessary computations.",
    "redundancy_type": "LI"
  },
  "dataset_193": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a loop that pushes back elements into a vector with a more efficient insert operation.",
    "redundancy_type": "RC"
  },
  "dataset_194": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a loop with a single call to std::iota, eliminating the redundant computation of indices.",
    "redundancy_type": "LI"
  },
  "dataset_195": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates the range of the std::copy function but does not eliminate any computations.",
    "redundancy_type": null
  },
  "dataset_196": {
    "eliminates_redundant_computation": true,
    "reason": "The patch changes a for loop to use a range-based for loop, which simplifies the access to the elements and can reduce redundant indexing operations.",
    "redundancy_type": "RC"
  },
  "dataset_197": {
    "eliminates_redundant_computation": true,
    "reason": "The change simplifies the lambda capture list, reducing unnecessary complexity and potential overhead.",
    "redundancy_type": "UE"
  },
  "dataset_198": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a step to clear the contents of the leaf before reuse, which doesn't remove unnecessary computations but instead prevents potential data issues.",
    "redundancy_type": null
  },
  "dataset_199": {
    "eliminates_redundant_computation": false,
    "reason": "The patch replaces a function with a more suitable variant for float types, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_200": {
    "eliminates_redundant_computation": true,
    "reason": "The patch changes a zero-memset operation to an array initializer, which is more efficient and reduces redundant computation.",
    "redundancy_type": "RC"
  },
  "dataset_201": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a memset with a braced initializer to zero-initialize a structure, thus eliminating an unneeded function call.",
    "redundancy_type": "RF"
  },
  "dataset_202": {
    "eliminates_redundant_computation": true,
    "reason": "The use of a braced initializer replaces a call to memset, which is an unnecessary operation since the new object can be constructed in a zero-initialized state.",
    "redundancy_type": "RC"
  },
  "dataset_203": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates redundant computations of `lon_now_rad` and `lon_next_rad`, which were previously declared and computed but were not used in the calculations, while moving invariant calculations outside the function.",
    "redundancy_type": "LI"
  },
  "dataset_204": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the method of initialization from memset to direct assignment, but does not eliminate any redundant or unnecessary computation.",
    "redundancy_type": null
  },
  "dataset_205": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the performance names for better readability but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_206": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a memory copy operation with a direct value assignment, reducing unnecessary data movement.",
    "redundancy_type": "RC"
  },
  "dataset_207": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids searching the map twice by using an iterator for both checking existence and retrieving the value.",
    "redundancy_type": "RF"
  },
  "dataset_208": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a hardcoded size to a dynamic one but does not eliminate redundant calculations.",
    "redundancy_type": null
  },
  "dataset_209": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the stack size for a task but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_210": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces one method of solving linear least squares with another but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_211": {
    "eliminates_redundant_computation": true,
    "reason": "The commit moves the NULL assignment inside an if block to avoid unnecessary assignment when the pointer is already NULL.",
    "redundancy_type": "UE"
  },
  "dataset_212": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts return values in a switch statement and does not eliminate any computations.",
    "redundancy_type": null
  },
  "dataset_213": {
    "eliminates_redundant_computation": true,
    "reason": "The commit minimizes CPU usage by avoiding repeated checks for input when there is none, thus reducing redundant calls to m_Process->HasInput().",
    "redundancy_type": "RF"
  },
  "dataset_214": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a parameter setting but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_215": {
    "eliminates_redundant_computation": true,
    "reason": "The calculation of 'offset' was moved outside of the loop, eliminating unnecessary recomputation.",
    "redundancy_type": "LI"
  },
  "dataset_216": {
    "eliminates_redundant_computation": false,
    "reason": "The commit alters thread priority but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_217": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates an unnecessary computation by correcting the time comparison to use 'last_prune', preventing repeated pruning calls within the same time frame.",
    "redundancy_type": "RF"
  },
  "dataset_218": {
    "eliminates_redundant_computation": true,
    "reason": "The patch introduces a check on the size of 'parts', which is crucial for preventing errors in future computations, thus making the processing more efficient and reliable.",
    "redundancy_type": "RF"
  },
  "dataset_219": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces multiple calls to find the same waiter in the d_waiters map down to a single call, thereby eliminating repeated computation of the same value.",
    "redundancy_type": "RF"
  },
  "dataset_220": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids calling RemoteGetFreeRecorderCount() more than once in the loop, reducing redundant function calls.",
    "redundancy_type": "RF"
  },
  "dataset_221": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the DNS registration option but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_222": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the 'stats_' array to be volatile, which does not eliminate any redundant computation, but rather ensures accuracy in a multi-threaded context.",
    "redundancy_type": null
  },
  "dataset_223": {
    "eliminates_redundant_computation": false,
    "reason": "The commit increases buffer allocation size but does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_224": {
    "eliminates_redundant_computation": false,
    "reason": "The commit fixes a memory leak by calling ::deflateEnd(&zs);, which does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_225": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check for an empty filename to prevent unnecessary calls to stat() when the filename is invalid.",
    "redundancy_type": "UE"
  },
  "dataset_226": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a string reservation to optimize string handling, but does not eliminate any specific redundant computation.",
    "redundancy_type": null
  },
  "dataset_227": {
    "eliminates_redundant_computation": false,
    "reason": "The patch focuses on resource cleanup at the end of execution rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_228": {
    "eliminates_redundant_computation": true,
    "reason": "The commit rearranges method checks to prioritize frequently used methods, reducing the number of checks needed during linear searches.",
    "redundancy_type": "RF"
  },
  "dataset_229": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on memory efficiency by releasing buffers rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_230": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a new method without removing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_231": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the computation of WINTUN_READ_BUF_SIZE by replacing a repetitive calculation with a constant, improving performance.",
    "redundancy_type": "RC"
  },
  "dataset_232": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the code to retrieve the device interfaces list only once instead of for each adapter, reducing unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_233": {
    "eliminates_redundant_computation": false,
    "reason": "The patch adds a new header file for logging compression but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_234": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a repetitive calculation of time with a more direct method to set timer expiration.",
    "redundancy_type": "RC"
  },
  "dataset_235": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the way the 'push' function is called by passing a dereferenced value instead of a pointer, which avoids unnecessary pointer dereferencing.",
    "redundancy_type": "RF"
  },
  "dataset_236": {
    "eliminates_redundant_computation": true,
    "reason": "The commit rearranges conditional checks to improve performance by evaluating 'OnActivate' and 'OnDeactivate' only when necessary.",
    "redundancy_type": "CE"
  },
  "dataset_237": {
    "eliminates_redundant_computation": true,
    "reason": "Removed unnecessary conditional printing that did not affect the program's functionality.",
    "redundancy_type": "CE"
  },
  "dataset_238": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates unnecessary dynamic memory allocation and replaces it with a fixed-length buffer, which reduces potential overhead and avoids the cost of repeated memory management.",
    "redundancy_type": "UE"
  },
  "dataset_239": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes a repeated function call to a single function call, reducing unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_240": {
    "eliminates_redundant_computation": true,
    "reason": "Removed unnecessary conversion of QString to char* when checking for null, avoiding redundant computation.",
    "redundancy_type": "RF"
  },
  "dataset_241": {
    "eliminates_redundant_computation": false,
    "reason": "The commit only changes the buffer size declaration and does not eliminate any computations.",
    "redundancy_type": null
  },
  "dataset_242": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the order by clause by directly handling the case of an empty order_by without unnecessary conditionals.",
    "redundancy_type": "CE"
  },
  "dataset_243": {
    "eliminates_redundant_computation": false,
    "reason": "The change modifies the limit of responses but does not eliminate any redundant calculations.",
    "redundancy_type": null
  },
  "dataset_244": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a LEFT JOIN with a WHERE NOT EXISTS clause, which can be more efficient by eliminating unnecessary computation related to join evaluation.",
    "redundancy_type": "RC"
  },
  "dataset_245": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a suboptimal 'WHERE NOT IN' clause with a 'LEFT JOIN', potentially reducing redundant computations in database queries.",
    "redundancy_type": "DB"
  },
  "dataset_246": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a subquery using WHERE IN with a JOIN, which can reduce the number of repeated database reads and improve query performance.",
    "redundancy_type": "DB"
  },
  "dataset_247": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a potentially more expensive WHERE NOT IN operation with a LEFT JOIN, thereby optimizing the query and reducing computation.",
    "redundancy_type": "RC"
  },
  "dataset_248": {
    "eliminates_redundant_computation": true,
    "reason": "The patch makes 'input_fmt_ctx' static, eliminating the need for repeated memory allocation.",
    "redundancy_type": "RF"
  },
  "dataset_249": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds new functionality to change cubemap shot delay but does not remove any existing redundant computations.",
    "redundancy_type": null
  },
  "dataset_250": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a new allocation for XModels but does not eliminate any existing redundant computations.",
    "redundancy_type": null
  },
  "dataset_251": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary allocations of memory for m_steamCookieKey and m_steamAppTicket by checking their current state, thus eliminating redundant memory operations.",
    "redundancy_type": "RC"
  },
  "dataset_252": {
    "eliminates_redundant_computation": true,
    "reason": "The commit restricts the computation of array bounds to specific types, thus eliminating unnecessary calculations for unsupported types.",
    "redundancy_type": "RC"
  },
  "dataset_253": {
    "eliminates_redundant_computation": true,
    "reason": "The commit restricts the computation of bounds based on the type of the array, preventing unnecessary calculations for unsupported types.",
    "redundancy_type": "RC"
  },
  "dataset_254": {
    "eliminates_redundant_computation": false,
    "reason": "The change does not eliminate redundant computations but optimizes stack allocation for garbage collection.",
    "redundancy_type": null
  },
  "dataset_255": {
    "eliminates_redundant_computation": true,
    "reason": "The commit ensures that the time output is only printed if a new solution is provided, preventing unnecessary output when it isn't relevant.",
    "redundancy_type": "CE"
  },
  "dataset_256": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a garbage collection trigger to manage memory rather than eliminating redundant calculations.",
    "redundancy_type": null
  },
  "dataset_257": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary call to the garbage collector (GC) that was triggered after each solution, which avoids redundant invocation.",
    "redundancy_type": "UE"
  },
  "dataset_258": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds timing measurements without removing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_259": {
    "eliminates_redundant_computation": false,
    "reason": "The commit reduces a timeout duration; it does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_260": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a blocking sleep call to a yielding call, improving responsiveness but not eliminating redundancy.",
    "redundancy_type": null
  },
  "dataset_261": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a yield call to potentially improve performance rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_262": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies thread behavior to prevent spinning during tests, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_263": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates the repeated construction of 'RenderingOperator' within the loop, which is unnecessary as it can be moved outside.",
    "redundancy_type": "LI"
  },
  "dataset_264": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the number of iterations in a loop, decreasing unnecessary repeated function calls that do not change behavior.",
    "redundancy_type": "LI"
  },
  "dataset_265": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a busy wait with a yielding wait, reducing unnecessary CPU usage.",
    "redundancy_type": "RC"
  },
  "dataset_266": {
    "eliminates_redundant_computation": false,
    "reason": null,
    "redundancy_type": null
  },
  "dataset_267": {
    "eliminates_redundant_computation": false,
    "reason": "The patch changes a switch statement to an if-else structure but does not eliminate any redundant computations; both cases still compute graphics region and draw patterns without savings.",
    "redundancy_type": null
  },
  "dataset_268": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces std::swap with std::move to avoid unnecessary copying.",
    "redundancy_type": "UE"
  },
  "dataset_269": {
    "eliminates_redundant_computation": false,
    "reason": "The patch focuses on initializing memory and checking conditions, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_270": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces potential unnecessary memory allocation by adding checks to avoid allocating excessively large buffers.",
    "redundancy_type": "RF"
  },
  "dataset_271": {
    "eliminates_redundant_computation": true,
    "reason": "The commit improves file size calculations by ensuring that redundancy in the computation of expected file size is eliminated, particularly by using invariant results.",
    "redundancy_type": "LI"
  },
  "dataset_272": {
    "eliminates_redundant_computation": true,
    "reason": "The insertion sets lipdstmpl[i] to 0 to avoid potentially calculating an unnecessary value in subsequent operations.",
    "redundancy_type": "RC"
  },
  "dataset_273": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not eliminate redundant calculations, but instead adds a condition to handle invalid inputs for 'nNumElements'.",
    "redundancy_type": null
  },
  "dataset_274": {
    "eliminates_redundant_computation": false,
    "reason": "The patch adds a condition to break the loop if the pending features exceed a threshold, but it does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_275": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a boundary check for maximum dimensions without removing any existing computations.",
    "redundancy_type": null
  },
  "dataset_276": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a boundary check for BufferRadius but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_277": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an entry from the map to avoid listing redundant layers, preventing excessive memory allocations.",
    "redundancy_type": "RC"
  },
  "dataset_278": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents excessive memory allocations based on a condition that checks the values of ngroups and ndpts, which could lead to unnecessary computations in memory management.",
    "redundancy_type": "RC"
  },
  "dataset_279": {
    "eliminates_redundant_computation": true,
    "reason": "Adds a check to avoid excessive memory allocation for repeated table cells, preventing unnecessary computational overhead.",
    "redundancy_type": "RC"
  },
  "dataset_280": {
    "eliminates_redundant_computation": false,
    "reason": "The patch adds a check to avoid excessive memory allocation attempts but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_281": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids excessive memory allocation by calculating the expected size only once instead of multiple times during processing.",
    "redundancy_type": "RC"
  },
  "dataset_282": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates the sizeof parameter but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_283": {
    "eliminates_redundant_computation": false,
    "reason": "The patch improves error handling rather than eliminating redundant computation.",
    "redundancy_type": null
  },
  "dataset_284": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids repeated calls to CPLGetErrorCounter(), which returns the same value across loop iterations.",
    "redundancy_type": "RC"
  },
  "dataset_285": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes a duplicate conditional check for nRowBlobLength, thus avoiding unnecessary evaluation in certain code paths.",
    "redundancy_type": "CE"
  },
  "dataset_286": {
    "eliminates_redundant_computation": true,
    "reason": "The commit moves the computation of 'fmod' for angles outside the conditional checks, avoiding repeated calculations.",
    "redundancy_type": "LI"
  },
  "dataset_287": {
    "eliminates_redundant_computation": false,
    "reason": "The patch prevents a potential memory allocation issue by checking for end of buffer, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_288": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces error counter checks but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_289": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds an error handling condition when the field count exceeds a threshold, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_290": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the frequency of reallocating memory by adjusting the allocation size, thereby avoiding unnecessary memory operations within a loop.",
    "redundancy_type": "LI"
  },
  "dataset_291": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to avoid unnecessary memory allocation attempts, which can occur if memory usage is deemed excessive based on raster parameters.",
    "redundancy_type": "RC"
  },
  "dataset_292": {
    "eliminates_redundant_computation": true,
    "reason": "The commit checks memory usage before allocating resources to avoid excessive memory allocation attempts.",
    "redundancy_type": "RF"
  },
  "dataset_293": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds checks to avoid integer overflow, but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_294": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check for memory usage to prevent excessive memory allocation, which avoids unnecessary resource consumption.",
    "redundancy_type": "RC"
  },
  "dataset_295": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not identify or eliminate any redundant computation but adds a memory usage check.",
    "redundancy_type": null
  },
  "dataset_296": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts a memory allocation check; it does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_297": {
    "eliminates_redundant_computation": false,
    "reason": "The commit primarily adds error handling and logging without removing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_298": {
    "eliminates_redundant_computation": false,
    "reason": "The commit alters a configuration setting but does not remove or optimize any redundant computations.",
    "redundancy_type": null
  },
  "dataset_299": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary addition of identical geometries to the 'aosPolygons' vector, which eliminates redundant storage and future computations with duplicate geometries.",
    "redundancy_type": "RF"
  },
  "dataset_300": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces logic to reuse an output facet index, but does not eliminate any redundant computations based on the defined categories.",
    "redundancy_type": null
  },
  "dataset_301": {
    "eliminates_redundant_computation": true,
    "reason": "The patch improves efficiency by breaking out of the loop early when a busy tuner is found, preventing unnecessary iterations.",
    "redundancy_type": "LI"
  },
  "dataset_302": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the loop by introducing a condition to break early if nCount exceeds nMax, preventing unnecessary comparisons after reaching Count.",
    "redundancy_type": "LI"
  },
  "dataset_303": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the DISTINCT clause from a SQL query that was unnecessary, potentially improving performance by eliminating redundant operations in the database call.",
    "redundancy_type": "DB"
  },
  "dataset_304": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the buffer size used for reading from a constant value, improving performance by ensuring that the correct size is utilized in the file copy operations.",
    "redundancy_type": "RC"
  },
  "dataset_305": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary function calls related to file registration check when EOF is encountered, optimizing CPU usage.",
    "redundancy_type": "RF"
  },
  "dataset_306": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the `GetRealFileSize` method by avoiding unnecessary calls to `QFileInfo` when the file is already opened.",
    "redundancy_type": "RC"
  },
  "dataset_307": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a computation involving 'matroska->ctx->duration' with a more accurate calculation using 'av_rescale', reducing redundancy and improving accuracy.",
    "redundancy_type": "RC"
  },
  "dataset_308": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes a function call to include a flag that optimizes the search process, which eliminates potential redundant calculations.",
    "redundancy_type": "RF"
  },
  "dataset_309": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents querying the backend when there are no commercials to skip, reducing unnecessary backend calls.",
    "redundancy_type": "DB"
  },
  "dataset_310": {
    "eliminates_redundant_computation": true,
    "reason": "The patch adds a conditional check to call ff_rfps_add_frame() only for video streams, avoiding unnecessary computations for other stream types.",
    "redundancy_type": "RF"
  },
  "dataset_311": {
    "eliminates_redundant_computation": true,
    "reason": "The commit checks if the file is open before trying to read, thus preventing unnecessary computations when the file cannot be read.",
    "redundancy_type": "UE"
  },
  "dataset_312": {
    "eliminates_redundant_computation": true,
    "reason": "The patch modifies the waiting mechanism to reduce unnecessary repeated checks for available frames, streamlining the wait loop.",
    "redundancy_type": "LI"
  },
  "dataset_313": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary suspension of Pulse audio output when there is no valid output configuration, potentially saving computation time.",
    "redundancy_type": "UE"
  },
  "dataset_314": {
    "eliminates_redundant_computation": true,
    "reason": "The patch avoids calling DoneDisplayingFrame unnecessarily when the player is in PiP mode, thereby preserving the last shown frame for subsequent calls.",
    "redundancy_type": "UE"
  },
  "dataset_315": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check for an empty input, preventing unnecessary database queries that would yield no results.",
    "redundancy_type": "DB"
  },
  "dataset_316": {
    "eliminates_redundant_computation": false,
    "reason": "The commit corrects a logic error by writing the proper predictor value, but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_317": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds database indexes to improve performance rather than eliminating any specific redundant computations.",
    "redundancy_type": null
  },
  "dataset_318": {
    "eliminates_redundant_computation": false,
    "reason": "The patch modifies the timeout check to use a variable instead of a hardcoded value, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_319": {
    "eliminates_redundant_computation": true,
    "reason": "The patch reduces the threshold value for audio buffered time checks, eliminating unnecessary calculations related to buffer fullness.",
    "redundancy_type": "RC"
  },
  "dataset_320": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary reinitialization of member variables by copying existing values instead of setting them to default.",
    "redundancy_type": "RC"
  },
  "dataset_321": {
    "eliminates_redundant_computation": false,
    "reason": "The commit enhances buffer handling for HD video but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_322": {
    "eliminates_redundant_computation": false,
    "reason": "The commit increases the buffer size for probing MP3 files but does not address redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_323": {
    "eliminates_redundant_computation": true,
    "reason": "The update prevents unnecessary recalculation of 'fps' when 'seqFPS' is not valid, thereby reducing redundant checks.",
    "redundancy_type": "UE"
  },
  "dataset_324": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant call to setStatus, which was being executed twice unnecessarily.",
    "redundancy_type": "RF"
  },
  "dataset_325": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the condition to check if media has changed and whether the status is not unknown, potentially avoiding redundant calls to mediaChanged.",
    "redundancy_type": "RC"
  },
  "dataset_326": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates repeated calls to QImageReader by checking file extensions against a predefined list instead.",
    "redundancy_type": "RF"
  },
  "dataset_327": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates the check for disk image types to avoid scanning mounted images, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_328": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the scheduling of a redraw operation to an immediate redraw, eliminating potential redundant scheduling overhead.",
    "redundancy_type": "RF"
  },
  "dataset_329": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on ensuring proper closure of a file stream after reading data, rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_330": {
    "eliminates_redundant_computation": true,
    "reason": "Preallocating vectors in the patch reduces the overhead of dynamic memory allocation during parallel execution.",
    "redundancy_type": "RC"
  },
  "dataset_331": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces multiple calls to convert time to `time_t` within a loop with a single call before the loop.",
    "redundancy_type": "LI"
  },
  "dataset_332": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a string literal with a static QString, eliminating unnecessary repeated creation of the same string.",
    "redundancy_type": "RF"
  },
  "dataset_333": {
    "eliminates_redundant_computation": true,
    "reason": "The construction of the AABB tree is moved outside of the parallel loop to avoid repeated computation, improving performance.",
    "redundancy_type": "LI"
  },
  "dataset_334": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the default value for max days, but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_335": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a potentially heavy call to allSummaryCases, which was unnecessary for determining if the command is enabled.",
    "redundancy_type": "RF"
  },
  "dataset_336": {
    "eliminates_redundant_computation": true,
    "reason": "The computation of isUsingGlobalActiveIndex is moved outside the loop, avoiding repeated calls with the same input.",
    "redundancy_type": "LI"
  },
  "dataset_337": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant lookups by performing a map lookup only once instead of twice.",
    "redundancy_type": "RF"
  },
  "dataset_338": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to return early if the result is already computed, preventing redundant recomputation when the same data is requested multiple times.",
    "redundancy_type": "UE"
  },
  "dataset_339": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes a call to a time-consuming function that is deemed unnecessary for the operation at hand.",
    "redundancy_type": "UE"
  },
  "dataset_340": {
    "eliminates_redundant_computation": true,
    "reason": "The commit moves the computation of selectedUiItems outside the loop to avoid repeated calls with the same inputs.",
    "redundancy_type": "RF"
  },
  "dataset_341": {
    "eliminates_redundant_computation": false,
    "reason": "The commit limits the number of time steps for a specific result type, but it does not eliminate any redundant computation directly.",
    "redundancy_type": null
  },
  "dataset_342": {
    "eliminates_redundant_computation": true,
    "reason": "Increased the polling interval to reduce high CPU usage, preventing unnecessary constant polling.",
    "redundancy_type": "RC"
  },
  "dataset_343": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids calling appendIntersectionsForCurrentTimeStep() multiple times, reducing unnecessary computation for the legend update.",
    "redundancy_type": "RF"
  },
  "dataset_344": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes the unnecessary creation of a vector to hold global cell indices, which is a redundant computation based on the grid's data structure.",
    "redundancy_type": "RC"
  },
  "dataset_345": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary computation by reserving space in the jacobian matrix based on the size of the input, preventing repeated memory allocations.",
    "redundancy_type": "RC"
  },
  "dataset_346": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refines the calculation of dflux, ensuring that expensive function calls do not repeat with the same inputs.",
    "redundancy_type": "RF"
  },
  "dataset_347": {
    "eliminates_redundant_computation": true,
    "reason": "The commit defers the calculation of rsSat and rvSat until it is confirmed that the gas phase is active, thereby preventing unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_348": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the redundant computation of 'all_cells' within the variableState method, using a pre-computed list instead.",
    "redundancy_type": "RC"
  },
  "dataset_349": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes unnecessary intermediate storage for normed_queries by directly reusing queries for linear transformation.",
    "redundancy_type": "RF"
  },
  "dataset_350": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the way tokens are handled by eliminating redundant pushes and uses emplace instead.",
    "redundancy_type": "RF"
  },
  "dataset_351": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the vector construction to avoid unnecessary computation of the vector size and makes the code more concise.",
    "redundancy_type": "RC"
  },
  "dataset_352": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes pre-allocation of memory which was unnecessary given the variation in vocabulary sizes.",
    "redundancy_type": "RC"
  },
  "dataset_353": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes unnecessary computation by eliminating an invalid array size in the U8_APPEND function.",
    "redundancy_type": "RC"
  },
  "dataset_354": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a condition to return early when the distance is zero, eliminating further unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_355": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the transformation logic by consolidating repeated transformations into a single 'transform' variable, reducing redundant computations.",
    "redundancy_type": "RF"
  },
  "dataset_356": {
    "eliminates_redundant_computation": true,
    "reason": "The commit pre-allocates memory for the image based on known size and format, avoiding unnecessary repeated allocations.",
    "redundancy_type": "UE"
  },
  "dataset_357": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary 64-bit conversions that were repeated, which are not needed for the computations.",
    "redundancy_type": "RC"
  },
  "dataset_358": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces the use of a stream to read data multiple times with a QBuffer, eliminating repeated reads from the stream.",
    "redundancy_type": "RC"
  },
  "dataset_359": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a repeated calculation of 'resolution' within the GDI drawing code with a single scale operation, thus preventing unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_360": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the writing of coordinates by avoiding unnecessary conversions and escaping, thus improving performance.",
    "redundancy_type": "UE"
  },
  "dataset_361": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates the URL format and improves arithmetic precision but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_362": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a manual comparison of two vectors with a more efficient built-in operator, eliminating redundant checks.",
    "redundancy_type": "RC"
  },
  "dataset_363": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant length check that was already covered by the surrounding loop, simplifying the code.",
    "redundancy_type": "CE"
  },
  "dataset_364": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the image quality setting to a less CPU intensive option but does not address redundant computations or eliminate any unnecessary calculations.",
    "redundancy_type": null
  },
  "dataset_365": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the cosine product calculation by precomputing the normalization value, thus eliminating unnecessary recomputation during execution.",
    "redundancy_type": "RC"
  },
  "dataset_366": {
    "eliminates_redundant_computation": true,
    "reason": "The patch changes the copying of statistics to referencing, which eliminates unnecessary object copying.",
    "redundancy_type": "RC"
  },
  "dataset_367": {
    "eliminates_redundant_computation": false,
    "reason": "The commit reduces the minimum PDF threshold for accuracy but does not remove redundant computations.",
    "redundancy_type": null
  },
  "dataset_368": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates repeated calls to RCT2_GLOBAL by storing the result in a variable.",
    "redundancy_type": "RF"
  },
  "dataset_369": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes file handling by reducing multiple opens/reads and improving efficiency in checksum writing.",
    "redundancy_type": "UE"
  },
  "dataset_370": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the error handling after a failed load to use a flag instead of duplicating code for unloading objects and returning an error.",
    "redundancy_type": "CE"
  },
  "dataset_371": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adjusts memory allocation to use the correct count for filters, preventing potential over-allocation.",
    "redundancy_type": "RC"
  },
  "dataset_372": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces multiple calls to strlen with direct checks for null-termination, thus avoiding redundant string length computations.",
    "redundancy_type": "RC"
  },
  "dataset_373": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces the naive distance calculation with a more efficient Manhattan distance calculation, streamlining the process of finding the closest mechanic without unnecessary conditional checks.",
    "redundancy_type": "RC"
  },
  "dataset_374": {
    "eliminates_redundant_computation": true,
    "reason": "The patch updates the chunk size to a larger value, which may optimize the transfer efficiency instead of recalculating it multiple times.",
    "redundancy_type": "RC"
  },
  "dataset_375": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces manual byte copying within loops with optimized memset and memcpy functions, improving performance significantly.",
    "redundancy_type": "LI"
  },
  "dataset_376": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the calculation of image_id by pulling out computations that were being recalculated, optimizing performance.",
    "redundancy_type": "RC"
  },
  "dataset_377": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a less efficient call to isVisible with the more efficient getVisible method, which eliminates unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_378": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a conditional check to prevent redundant processing of explosion logic when the explosion flag is already set.",
    "redundancy_type": "CE"
  },
  "dataset_379": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces an expensive function call with a simpler calculation, eliminating unnecessary computation.",
    "redundancy_type": "UE"
  },
  "dataset_380": {
    "eliminates_redundant_computation": false,
    "reason": "The commit fixes a memory bug but does not optimize any computations.",
    "redundancy_type": null
  },
  "dataset_381": {
    "eliminates_redundant_computation": false,
    "reason": "The commit fixes a memory leak without addressing redundant computations in the code.",
    "redundancy_type": null
  },
  "dataset_382": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to return early when the length is zero, preventing unnecessary memory allocation.",
    "redundancy_type": "RC"
  },
  "dataset_383": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the loop by directly calculating the index instead of iterating to find it, eliminating redundant steps.",
    "redundancy_type": "LI"
  },
  "dataset_384": {
    "eliminates_redundant_computation": true,
    "reason": "The commit skips leading zeroes during the iteration, which avoids unnecessary checks and computations, thereby improving efficiency.",
    "redundancy_type": "LI"
  },
  "dataset_385": {
    "eliminates_redundant_computation": true,
    "reason": "The commit addresses a potential for quadratic complexity by avoiding unnecessary repeated parsing of empty chunks in a loop.",
    "redundancy_type": "LI"
  },
  "dataset_386": {
    "eliminates_redundant_computation": false,
    "reason": "The commit improves the logic for handling response lines but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_387": {
    "eliminates_redundant_computation": false,
    "reason": "The patch modifies the calculation of oH and oW to use ceil, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_388": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a memory deallocation step but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_389": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates multiple calls to the color retrieval functions by accessing the color data directly, thus reducing overhead.",
    "redundancy_type": "RF"
  },
  "dataset_390": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary checks and computations related to memory allocation for SOIL results, ensuring that memory is allocated once instead of conditionally.",
    "redundancy_type": "LI"
  },
  "dataset_391": {
    "eliminates_redundant_computation": true,
    "reason": "The commit calculates an estimated count of vertices based on a constant formula and reserves memory accordingly, reducing unnecessary repeated calls and calculations.",
    "redundancy_type": "RC"
  },
  "dataset_392": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check for invalid cells, which avoids unnecessary computations related to invalid cells.",
    "redundancy_type": "LI"
  },
  "dataset_393": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a simple split with a regex that efficiently handles multiple whitespace characters, avoiding potential redundant splitting.",
    "redundancy_type": "RC"
  },
  "dataset_394": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces indexed access to curves with a range-based loop, eliminating repeated function calls for size computation.",
    "redundancy_type": "RF"
  },
  "dataset_395": {
    "eliminates_redundant_computation": true,
    "reason": "The patch reduces redundant access to 'ci->values' within the loop by checking if it's empty first, effectively avoiding unnecessary iterations when the list is empty.",
    "redundancy_type": "LI"
  },
  "dataset_396": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes how the well path is looked up by switching from an exact name match to a fuzzy search, but does not eliminate computations.",
    "redundancy_type": null
  },
  "dataset_397": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop with repeated calls to createSummaryReaderInterface() with a single call to loadAllSummaryCaseData(), which reduces redundancy.",
    "redundancy_type": "RF"
  },
  "dataset_398": {
    "eliminates_redundant_computation": true,
    "reason": "The commit moves the object allocation of 'hexCorners' outside the loop, avoiding repeated allocations for each iteration.",
    "redundancy_type": "LI"
  },
  "dataset_399": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant call to drawBoxFilled by using clipRect only once for drawing purposes.",
    "redundancy_type": "RF"
  },
  "dataset_400": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a string comparison with a comparison by a tag value, which is more efficient and avoids unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_401": {
    "eliminates_redundant_computation": true,
    "reason": "The commit moves checks for mHighlightIndex earlier to prevent continued execution when unnecessary, thus reducing redundant evaluations.",
    "redundancy_type": "CE"
  },
  "dataset_402": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the ListBox update logic by calculating visible index bounds only once instead of repeatedly calculating them in the loop.",
    "redundancy_type": "LI"
  },
  "dataset_403": {
    "eliminates_redundant_computation": true,
    "reason": "The patch refactors the inner loop to replace a hardcoded value with a method call, eliminating potential redundant calls and conditions.",
    "redundancy_type": "LI"
  },
  "dataset_404": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a nested if/else conditional for selecting tile colors with a table lookup, thus eliminating repeated conditional evaluations.",
    "redundancy_type": "CE"
  },
  "dataset_405": {
    "eliminates_redundant_computation": true,
    "reason": "The patch moves a ternary operation into a single function call, eliminating the need to compute the tile color in an inline statement, thus streamlining the code.",
    "redundancy_type": "RF"
  },
  "dataset_406": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces an explicit computation of distance with a method that already calculates the squared length, reducing redundancy.",
    "redundancy_type": "RC"
  },
  "dataset_407": {
    "eliminates_redundant_computation": false,
    "reason": "The change refactors nested if/else if conditions into a switch statement for clarity, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_408": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reuses the already computed imageWidth value instead of recalculating it using a function call.",
    "redundancy_type": "RF"
  },
  "dataset_409": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces redundant initialization of variables by moving their declaration and initialization inside the loop, thus eliminating repeated assignments.",
    "redundancy_type": "LI"
  },
  "dataset_410": {
    "eliminates_redundant_computation": true,
    "reason": "The patch changes the method of iterating over XML nodes to avoid unnecessary conversions, thereby preventing redundant attribute retrieval.",
    "redundancy_type": "RC"
  },
  "dataset_411": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the loop to iterate only over XmlElement nodes, eliminating unnecessary calls to convert nodes to elements.",
    "redundancy_type": "RF"
  },
  "dataset_412": {
    "eliminates_redundant_computation": true,
    "reason": "The use of std::accumulate simplifies the addition of population roles, removing the need for a manual for loop and thereby reducing redundancy in computing the total.",
    "redundancy_type": "LI"
  },
  "dataset_413": {
    "eliminates_redundant_computation": true,
    "reason": "The commit uses std::clamp to ensure bounds on populationToKill, eliminating potential infinite loops with inappropriate mStarveRate values.",
    "redundancy_type": "RC"
  },
  "dataset_414": {
    "eliminates_redundant_computation": true,
    "reason": "The patch introduces a cache for the tile retrieved from the tile map, reducing repeated calls for the same data.",
    "redundancy_type": "RF"
  },
  "dataset_415": {
    "eliminates_redundant_computation": true,
    "reason": "The commit caches the result of 'tileMouseHover()' to avoid repeated calls with the same input.",
    "redundancy_type": "RF"
  },
  "dataset_416": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes location checking by using a vector to track used locations, eliminating the need for repeated checks against existing locations.",
    "redundancy_type": "RC"
  },
  "dataset_417": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces multiple bound function calls with a single lambda that generates random points directly, eliminating repeated function calls.",
    "redundancy_type": "RF"
  },
  "dataset_418": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a bounding box check with a more precise method call, which avoids redundant computations related to calculating the bounding box.",
    "redundancy_type": "RF"
  },
  "dataset_419": {
    "eliminates_redundant_computation": false,
    "reason": "The commit improves numerical stability by modifying the arithmetic operations, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_420": {
    "eliminates_redundant_computation": true,
    "reason": "This commit changes the way the increment value is calculated based on mouse click position, reducing redundant logic and simplifying the computations needed for different scrollbar orientations.",
    "redundancy_type": "LI"
  },
  "dataset_421": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids looping through all rectangles by calculating an estimated index and checking just one rectangle instead.",
    "redundancy_type": "LI"
  },
  "dataset_422": {
    "eliminates_redundant_computation": true,
    "reason": "The commit caches the `structureState` value to avoid repeated calls to the same method with the same result.",
    "redundancy_type": "RF"
  },
  "dataset_423": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces the use of an enum to calculate offsets with direct offset values, eliminating unnecessary transformation calls.",
    "redundancy_type": "RF"
  },
  "dataset_424": {
    "eliminates_redundant_computation": true,
    "reason": "The commit delays the initialization of the recycle value table until the init function is called, preventing unnecessary computation up to that point.",
    "redundancy_type": "RC"
  },
  "dataset_425": {
    "eliminates_redundant_computation": true,
    "reason": "The commit stores the result of `renderer.size().x` in `maxX` to avoid repeated calls, thus reducing redundancy in calculations.",
    "redundancy_type": "RC"
  },
  "dataset_426": {
    "eliminates_redundant_computation": false,
    "reason": null,
    "redundancy_type": null
  },
  "dataset_427": {
    "eliminates_redundant_computation": false,
    "reason": null,
    "redundancy_type": null
  },
  "dataset_428": {
    "eliminates_redundant_computation": false,
    "reason": null,
    "redundancy_type": null
  },
  "dataset_429": {
    "eliminates_redundant_computation": false,
    "reason": null,
    "redundancy_type": null
  },
  "dataset_430": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates a redundant computation by replacing repeated calls to a function with a calculation that uses a pre-computed variable.",
    "redundancy_type": "RC"
  },
  "dataset_431": {
    "eliminates_redundant_computation": false,
    "reason": "The commit initializes a structure using memset to prevent crashes due to uninitialized fields, but it does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_432": {
    "eliminates_redundant_computation": false,
    "reason": "The commit optimizes string manipulation by replacing insert with append but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_433": {
    "eliminates_redundant_computation": true,
    "reason": "The commit checks if the handler implements the tag() method before calling ffmpeg_copy_metadata, avoiding unnecessary function calls when the method is not implemented.",
    "redundancy_type": "RF"
  },
  "dataset_434": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes a redundant nullptr check before calling av_free, which is unnecessary since av_free can handle nullptr gracefully.",
    "redundancy_type": "CE"
  },
  "dataset_435": {
    "eliminates_redundant_computation": true,
    "reason": "The commit merges two calls to free() for the same buffer, eliminating redundancy in memory management.",
    "redundancy_type": "RC"
  },
  "dataset_436": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reimplements GetSuffix() to utilize GetBase() and avoids redundant calls to uri_get_suffix(), thus eliminating repeated function calls with the same input.",
    "redundancy_type": "RF"
  },
  "dataset_437": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the Tag object creation by moving the tag instead of copying it, reducing unnecessary overhead.",
    "redundancy_type": "RF"
  },
  "dataset_438": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates the repeated call to gme_free_info(ti) and fetches ti->length once into a local variable to avoid multiple accesses.",
    "redundancy_type": "RF"
  },
  "dataset_439": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary calls to read data when enough data is already available.",
    "redundancy_type": "UE"
  },
  "dataset_440": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates a duplicate operation by avoiding a second read into the buffer when the data is already available in the query buffer, effectively reducing unnecessary computation.",
    "redundancy_type": "RC"
  },
  "dataset_441": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary seek call and replaces it with a more direct function that performs its intended action more efficiently.",
    "redundancy_type": "UE"
  },
  "dataset_442": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a dynamic allocation with a stack variable, removing the need for a redundant delete operation and improving memory management.",
    "redundancy_type": "RF"
  },
  "dataset_443": {
    "eliminates_redundant_computation": true,
    "reason": "The commit limits the number of packets processed in a loop, reducing unnecessary iterations and potential computation.",
    "redundancy_type": "LI"
  },
  "dataset_444": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant memset() call that initializes a temporary array to zero, which is unnecessary before it is immediately overwritten by snprintf().",
    "redundancy_type": "RC"
  },
  "dataset_445": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents unnecessary calls to ffmpeg_copy_metadata when the handler does not implement the tag() method, thus eliminating redundant function calls.",
    "redundancy_type": "RF"
  },
  "dataset_446": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces lock/unlock overhead and avoids unnecessary locking by properly using a scope-based unlock pattern.",
    "redundancy_type": "LI"
  },
  "dataset_447": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates a temporary string allocation by directly passing the URI without conversion, thus optimizing memory usage.",
    "redundancy_type": "RF"
  },
  "dataset_448": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the method of inserting a song into the queue but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_449": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a std::list with a std::set, eliminating the need for sorting and thus avoiding redundant computation.",
    "redundancy_type": "RC"
  },
  "dataset_450": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces sorting of a std::list with the use of a std::set, which inherently maintains order and eliminates the need for additional sorting.",
    "redundancy_type": "RC"
  },
  "dataset_451": {
    "eliminates_redundant_computation": false,
    "reason": "The patch changes a constant value reference but does not eliminate any redundancy in computation.",
    "redundancy_type": null
  },
  "dataset_452": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the method for trimming strings but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_453": {
    "eliminates_redundant_computation": true,
    "reason": "The commit substitutes a method that potentially reduces the duration of mutex lock by using a more efficient locking mechanism.",
    "redundancy_type": "RC"
  },
  "dataset_454": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes computations by calculating 'num_dop_quads' once and using it in the loop condition, reducing repetitive divisions.",
    "redundancy_type": "LI"
  },
  "dataset_455": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the loop by consuming the ConstBuffer directly, eliminating redundant checks and potentially unnecessary iterations.",
    "redundancy_type": "LI"
  },
  "dataset_456": {
    "eliminates_redundant_computation": true,
    "reason": "The commit increases the buffer size to reduce the overhead of buffer management, which improves efficiency in processing audio frames.",
    "redundancy_type": "RC"
  },
  "dataset_457": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a call to std::fill_n() with direct initialization of the array, simplifying the code and eliminating redundant computations.",
    "redundancy_type": "RC"
  },
  "dataset_458": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the method to call time() only once, thus avoiding redundant calls with the same input.",
    "redundancy_type": "RF"
  },
  "dataset_459": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a loop with repetitive assignments by a single call to memset, reducing unnecessary computations.",
    "redundancy_type": "LI"
  },
  "dataset_460": {
    "eliminates_redundant_computation": true,
    "reason": "The patch avoids repeated calls to 'object_create_identifier_name' by storing the result in a variable instead of calling it with the same address repeatedly.",
    "redundancy_type": "RF"
  },
  "dataset_461": {
    "eliminates_redundant_computation": false,
    "reason": "The patch replaces a computation with a constant, but does not eliminate redundancy in calculations.",
    "redundancy_type": null
  },
  "dataset_462": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not eliminate redundant computations; it expands the neighbourDir range without making computational optimizations.",
    "redundancy_type": null
  },
  "dataset_463": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes multiple redundant calls to Memory::Set with the same parameters, consolidating them into a single call within InitialiseEntryMaps.",
    "redundancy_type": "RF"
  },
  "dataset_464": {
    "eliminates_redundant_computation": false,
    "reason": "The commit improves memory management by resetting the string builder instead of overwriting it, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_465": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary ceil function call, which does not affect the overall logic since the result is invariant.",
    "redundancy_type": "LI"
  },
  "dataset_466": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop that sets all elements of the array to zero with a single call to std::fill, improving code efficiency and maintainability.",
    "redundancy_type": "LI"
  },
  "dataset_467": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the method of limiting the tree count but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_468": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop that repeatedly calls push_back with a single call to resize, eliminating redundant computations.",
    "redundancy_type": "LI"
  },
  "dataset_469": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies string construction by using a direct constructor instead of a loop, eliminating unnecessary steps.",
    "redundancy_type": "RF"
  },
  "dataset_470": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the smart pointer type for LocalisationService from std::shared_ptr to std::unique_ptr, which does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_471": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repeated computation of a random index with a single use of a uniform distribution, reducing redundancy in random number generation.",
    "redundancy_type": "RF"
  },
  "dataset_472": {
    "eliminates_redundant_computation": true,
    "reason": "Refactored the code to eliminate repeated calculations by calculating viewport coordinates once and reusing them.",
    "redundancy_type": "RC"
  },
  "dataset_473": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a manual loop with a more efficient algorithm using std::find_if, reducing redundancy in the search process.",
    "redundancy_type": "LI"
  },
  "dataset_474": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids repeated calls to `get_ride_entry` and `RCT2RideTypeToOpenRCT2RideType` by only executing them when necessary based on a condition.",
    "redundancy_type": "RF"
  },
  "dataset_475": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary calculations by checking if the provided DPI is the same as the active DPI before proceeding.",
    "redundancy_type": "UE"
  },
  "dataset_476": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces the allocation of a new vector each time the function is called with a thread-local vector, thus reducing memory allocation overhead.",
    "redundancy_type": "RF"
  },
  "dataset_477": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates a redundant call to duplicate the playerName string, directly assigning it instead.",
    "redundancy_type": "RF"
  },
  "dataset_478": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant calculation of remaining bytes that is unnecessary when directly checking the fread return value.",
    "redundancy_type": "RC"
  },
  "dataset_479": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop that searches through the map with a direct map lookup, reducing computation time.",
    "redundancy_type": "RC"
  },
  "dataset_480": {
    "eliminates_redundant_computation": true,
    "reason": "The commit limits the number of packets processed in a loop to avoid unnecessary iterations, thus reducing redundant computation.",
    "redundancy_type": "LI"
  },
  "dataset_481": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to prevent painting operations on invalid locations, avoiding unnecessary computations for unviewable entities.",
    "redundancy_type": "UE"
  },
  "dataset_482": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop that counts litter with a more efficient 'count_if' operation, removing the need to manually iterate and maintain a counter.",
    "redundancy_type": "LI"
  },
  "dataset_483": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes from a stack-allocated array to a vector for dynamic sizing but does not specifically eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_484": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts the buffer size for receiving data but does not eliminate redundant computation.",
    "redundancy_type": null
  },
  "dataset_485": {
    "eliminates_redundant_computation": false,
    "reason": "The commit mainly focuses on improving UI performance by turning off updates while items are added to the tree, not eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_486": {
    "eliminates_redundant_computation": false,
    "reason": "The patch modifies a method to use a standard library function for safety and locale support, but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_487": {
    "eliminates_redundant_computation": false,
    "reason": "The patch adds synchronization for thread safety but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_488": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces std::for_each with a range-based for loop, which optimizes iteration without repeated invocations.",
    "redundancy_type": "RC"
  },
  "dataset_489": {
    "eliminates_redundant_computation": false,
    "reason": "The patch consists of a conditional compilation change and does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_490": {
    "eliminates_redundant_computation": false,
    "reason": "The commit refactors a traditional for-loop to a range-based for-loop for improved readability without affecting computation.",
    "redundancy_type": null
  },
  "dataset_491": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces unnecessary clearing of vectors with reserving size, improving efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_492": {
    "eliminates_redundant_computation": false,
    "reason": "The commit reduces the maximum level of detail for geometry rendering but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_493": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the implementation of PLCCalc based on the architecture but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_494": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes the redundant push_back call after creating the achievement object, optimizing the code by directly emplacing it into the vector.",
    "redundancy_type": "RF"
  },
  "dataset_495": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the handling of an unnecessary SDL_WINDOWEVENT_RESIZED event, since it is always preceded by SDL_WINDOWEVENT_SIZE_CHANGED, which makes it redundant.",
    "redundancy_type": "CE"
  },
  "dataset_496": {
    "eliminates_redundant_computation": false,
    "reason": "The changes mainly involve code optimization and readability rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_497": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a copy operation with an inline construction of a pair, reducing unnecessary overhead.",
    "redundancy_type": "RC"
  },
  "dataset_498": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces an insertion operation with a more efficient emplace operation which constructs the object in place, reducing unnecessary temporary object creation.",
    "redundancy_type": "RC"
  },
  "dataset_499": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes an 'insert' operation to 'emplace', which eliminates an unnecessary temporary object creation, thus optimizing the code.",
    "redundancy_type": "RC"
  },
  "dataset_500": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the assignment operation by eliminating an unnecessary conversion from string to char* and back to string.",
    "redundancy_type": "RF"
  },
  "dataset_501": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a method of inserting elements into a container but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_502": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates an unnecessary assignment to m_name by using an initializer list directly.",
    "redundancy_type": "RC"
  },
  "dataset_503": {
    "eliminates_redundant_computation": true,
    "reason": "Replaced 'push_back' with 'emplace_back' to eliminate unnecessary temporary object creation.",
    "redundancy_type": "UE"
  },
  "dataset_504": {
    "eliminates_redundant_computation": false,
    "reason": "The commit refactors a loop to use range-based iteration, but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_505": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a delete statement for the DefaultOutputHandler in case of an error, preventing memory leaks from unhandled allocations.",
    "redundancy_type": "UE"
  },
  "dataset_506": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces multiple redundant calculations of the same dot products with precomputed values, improving performance.",
    "redundancy_type": "RC"
  },
  "dataset_507": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents the explosion from restarting if multiple explosion events occur, thus eliminating unnecessary recomputation.",
    "redundancy_type": "UE"
  },
  "dataset_508": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes repeated logging of phase time and memory usage by checking if the load screen renderer is active, which prevents unnecessary log messages in each frame.",
    "redundancy_type": "RF"
  },
  "dataset_509": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces push_back with emplace_back, reducing the overhead of creating a temporary object.",
    "redundancy_type": "RF"
  },
  "dataset_510": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the threshold for camera position change detection, which minimizes unnecessary sector detection runs when the camera movement is imperceptible.",
    "redundancy_type": "RC"
  },
  "dataset_511": {
    "eliminates_redundant_computation": false,
    "reason": "The commit refactors a loop for better readability, but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_512": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes redundant opening and closing of the chunk by using a single open and iterating through the data, eliminating redundant reads.",
    "redundancy_type": "RF"
  },
  "dataset_513": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant assignments and replaces them with constant declarations, avoiding unnecessary reevaluation.",
    "redundancy_type": "LI"
  },
  "dataset_514": {
    "eliminates_redundant_computation": false,
    "reason": "The commit optimizes the way an alias is inserted into a container by using 'emplace' instead of 'insert' and 'std::make_pair', but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_515": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes the waiting condition by reducing the call to shouldPause.load() from within the wait to one outside the loop, thus avoiding unnecessary recomputation.",
    "redundancy_type": "RC"
  },
  "dataset_516": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces an assignment of an empty string with a clear operation on the std::string, which is more efficient.",
    "redundancy_type": "UE"
  },
  "dataset_517": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes unnecessary multiplications that are repeated within the function, optimizing the calculation of the source and destination pointers.",
    "redundancy_type": "LI"
  },
  "dataset_518": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary computations within the conditional checks for units with insufficient time units, preventing further processing.",
    "redundancy_type": "CE"
  },
  "dataset_519": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a calculation related to explosion speed but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_520": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the percentage check from 5% to 20%, which alters the logic but does not reduce redundant computations.",
    "redundancy_type": null
  },
  "dataset_521": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repeated calculation of curvature with a constant value for specific conditions, streamlining the computation process.",
    "redundancy_type": "RC"
  },
  "dataset_522": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary conditional check by always normalizing the pixel value, thereby streamlining the computation.",
    "redundancy_type": "LI"
  },
  "dataset_523": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a string comparison with a direct character comparison, reducing unnecessary computation when checking for trailing slashes.",
    "redundancy_type": "RC"
  },
  "dataset_524": {
    "eliminates_redundant_computation": false,
    "reason": "The commit reduces a timeout but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_525": {
    "eliminates_redundant_computation": false,
    "reason": "The commit increases stack size for Mac OS without eliminating any redundant computations.",
    "redundancy_type": null
  },
  "dataset_526": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces an optimization but does not eliminate any redundant computation based on the defined types.",
    "redundancy_type": null
  },
  "dataset_527": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces repeated calls to expandAll() and collapseAll() by adding a conditional check based on the diff count, which avoids unnecessary UI updates when the diff is either invalid or too large.",
    "redundancy_type": "RC"
  },
  "dataset_528": {
    "eliminates_redundant_computation": true,
    "reason": "The removed code was unnecessary as it no longer applies to the current context, preventing redundant checks.",
    "redundancy_type": "CE"
  },
  "dataset_529": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repeated computation of 'mDiff.name(i)' and 'containsPath(name, prefix)' with a single computation of patch indices.",
    "redundancy_type": "RF"
  },
  "dataset_530": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a wait time but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_531": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the way frames are decoded to ensure that redundant calls to 'decodeNextFrame' and 'decodeNextFrameHeader' are avoided, particularly when 'data->muteFrame' is true.",
    "redundancy_type": "RC"
  },
  "dataset_532": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes repetitive bitrate settings and replaces them with a variable approach, reducing unnecessary recalculation.",
    "redundancy_type": "RC"
  },
  "dataset_533": {
    "eliminates_redundant_computation": true,
    "reason": "The commit checks if the read buffer is full before attempting to read, preventing unnecessary read operations.",
    "redundancy_type": "UE"
  },
  "dataset_534": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes string comparisons to avoid unnecessary recalculations of the same values.",
    "redundancy_type": "UE"
  },
  "dataset_535": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary memory allocation and deallocation (strdup/free) within a loop by using a direct copy instead.",
    "redundancy_type": "LI"
  },
  "dataset_536": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a local buffer initialization with a static buffer to eliminate repeated memory initialization.",
    "redundancy_type": "RC"
  },
  "dataset_537": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a costly operation (closing Mp3 directory) that doesn't provide significant benefits during shutdown.",
    "redundancy_type": "UE"
  },
  "dataset_538": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces multiple conditional checks for audio format with a single memcmp call, reducing redundant comparisons.",
    "redundancy_type": "CE"
  },
  "dataset_539": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary checks which would stop decoding prematurely, allowing for more efficient frame processing.",
    "redundancy_type": "CE"
  },
  "dataset_540": {
    "eliminates_redundant_computation": false,
    "reason": "The commit addresses a bug related to flushing the warning log, but it does not primarily optimize or eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_541": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a fixed timeout and replaces it with a NULL pointer, eliminating unnecessary CPU cycles spent on select() calls.",
    "redundancy_type": "UE"
  },
  "dataset_542": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant second call to select() that consumes unnecessary CPU cycles.",
    "redundancy_type": "RF"
  },
  "dataset_543": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces realloc() with free() and malloc(), avoiding unnecessary memory copying.",
    "redundancy_type": "RC"
  },
  "dataset_544": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the way the buffer size is determined, but it does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_545": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces busy-waiting with a sleep function, eliminating unnecessary CPU resource usage.",
    "redundancy_type": "LI"
  },
  "dataset_546": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces realloc() with free() and malloc() to avoid unnecessary memory operations (memcpy).",
    "redundancy_type": "UE"
  },
  "dataset_547": {
    "eliminates_redundant_computation": true,
    "reason": "The commit calculates 'bytes_per_sample' once and uses it in the loop, eliminating repeated computations.",
    "redundancy_type": "LI"
  },
  "dataset_548": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant check for 'dc->stop' that was previously being evaluated both in the while loop condition and after it, saving CPU cycles.",
    "redundancy_type": "CE"
  },
  "dataset_549": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes repeated checks for flushing the output buffer inside a loop, instead performing the flush after the loop when necessary.",
    "redundancy_type": "LI"
  },
  "dataset_550": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a broad signaling method with a more efficient signal method, as only one waiter exists, eliminating unnecessary operations.",
    "redundancy_type": "UE"
  },
  "dataset_551": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary delays after opening the audio device, which eliminates redundant blocking operations.",
    "redundancy_type": "RC"
  },
  "dataset_552": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates redundant recalculation of the number of samples inside the loop, computing it once before the loop instead.",
    "redundancy_type": "LI"
  },
  "dataset_553": {
    "eliminates_redundant_computation": true,
    "reason": "The calculation of 'num_samples' was moved outside the loop to avoid repeated computation with the same inputs.",
    "redundancy_type": "LI"
  },
  "dataset_554": {
    "eliminates_redundant_computation": true,
    "reason": "The change replaces a cast with a more appropriate type for the output buffer, reducing unnecessary type conversions.",
    "redundancy_type": "RF"
  },
  "dataset_555": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies condition checks by moving the decoder error check to the top, eliminating redundant checks for state when an error exists.",
    "redundancy_type": "CE"
  },
  "dataset_556": {
    "eliminates_redundant_computation": true,
    "reason": "The initialization of inAudioFormat and outAudioFormat is unnecessary before opening the audio output device since they will be set in audio_output_open().",
    "redundancy_type": "RC"
  },
  "dataset_557": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a call to 'freeSong' with 'freeJustSong', which avoids unnecessary handling of the song object since it was just allocated and not yet inserted into the playlist.",
    "redundancy_type": "RC"
  },
  "dataset_558": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates a redundant database query by checking the directory structure directly instead of querying the database multiple times.",
    "redundancy_type": "DB"
  },
  "dataset_559": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors a recursive function into a non-recursive one, removing redundant calls to itself which could lead to stack overflow.",
    "redundancy_type": "RF"
  },
  "dataset_560": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the notification mechanism to wake up the decoder less frequently, reducing unnecessary context switches.",
    "redundancy_type": "RC"
  },
  "dataset_561": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a macro definition and buffer size, but does not focus on eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_562": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents polling when the awake nodes have not been queried, eliminating unnecessary polling operations.",
    "redundancy_type": "CE"
  },
  "dataset_563": {
    "eliminates_redundant_computation": true,
    "reason": "The commit moves the calculation of 'upperLeftScreenCorner' and the subsequent method calls outside of the loop to prevent redundancy.",
    "redundancy_type": "LI"
  },
  "dataset_564": {
    "eliminates_redundant_computation": true,
    "reason": "Switching from a hard-coded array size to using sizeof() eliminates the risk of errors if the array size changes, ensuring consistent usage throughout the code.",
    "redundancy_type": "RC"
  },
  "dataset_565": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces manual memory management with a safer string handling method, ensuring no redundant memory allocation/deallocation occurs.",
    "redundancy_type": "RF"
  },
  "dataset_566": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the unnecessary conversion of the face name to a string, optimizing hashing by directly using wxStringHash.",
    "redundancy_type": "RC"
  },
  "dataset_567": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a missing recalculation rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_568": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the retry logic for subtitle fragments to only retry once instead of ten times, reducing unnecessary repeated attempts to fetch unavailable subtitles.",
    "redundancy_type": "RC"
  },
  "dataset_569": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary memory reservations that were larger than needed.",
    "redundancy_type": "RC"
  },
  "dataset_570": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces one string search method with another that is more appropriate for string_view, but it doesn't eliminate redundant computation.",
    "redundancy_type": null
  },
  "dataset_571": {
    "eliminates_redundant_computation": false,
    "reason": "The patch modifies a hashing function from FNV to MurmurHash2 but does not address any redundant computations.",
    "redundancy_type": null
  },
  "dataset_572": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repeated check for the existence of an element in a set with an emplace operation that handles both insertion and existence check in one step.",
    "redundancy_type": "RF"
  },
  "dataset_573": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces a multimap with an unordered_multimap, improving efficiency but not eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_574": {
    "eliminates_redundant_computation": false,
    "reason": "The patch adjusts encoding and cursor handling but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_575": {
    "eliminates_redundant_computation": true,
    "reason": "This commit reduces CPU usage by adding sleep calls under conditions where the socket is not ready, thus avoiding repeated function calls that do not yield new results.",
    "redundancy_type": "RC"
  },
  "dataset_576": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the message handling loop to process multiple messages in a single iteration instead of one, reducing potential delays caused by multiple calls.",
    "redundancy_type": "RF"
  },
  "dataset_577": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a redundant `msecsTo()` function call, which was recalculated multiple times, with a single `elapsed()` call for better efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_578": {
    "eliminates_redundant_computation": true,
    "reason": "Clears the pending messages array after sending to free resources, avoiding potential unnecessary memory usage.",
    "redundancy_type": "RC"
  },
  "dataset_579": {
    "eliminates_redundant_computation": false,
    "reason": "The commit disables HTTP connections which do not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_580": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the encoding method for demo clients but does not eliminate any computational redundancies.",
    "redundancy_type": null
  },
  "dataset_581": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the computation of frequency tones by introducing a conditional check and computing `ncoval` only once, avoiding unnecessary recalculation within the loop.",
    "redundancy_type": "LI"
  },
  "dataset_582": {
    "eliminates_redundant_computation": false,
    "reason": "The patch increases the buffer size for reading lines from a file but does not address any redundant computations.",
    "redundancy_type": null
  },
  "dataset_583": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant checks and function calls related to parsing the '^' character, optimizing the logic flow.",
    "redundancy_type": "CE"
  },
  "dataset_584": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a static regex to avoid re-compiling the regex pattern multiple times, improving efficiency.",
    "redundancy_type": "RF"
  },
  "dataset_585": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates the initialization of inter_frame_interval variables but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_586": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary buffer copy code that was creating a redundant memory operation.",
    "redundancy_type": "RC"
  },
  "dataset_587": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a calculation that returns the size of a character with a constant value of 1, eliminating unnecessary computation.",
    "redundancy_type": "RC"
  },
  "dataset_588": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant use of std::boyer_moore_searcher, optimizing the search operation.",
    "redundancy_type": "RF"
  },
  "dataset_589": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces multiple string concatenation operations with a single function call, reducing redundant computation.",
    "redundancy_type": "RF"
  },
  "dataset_590": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a complex computation with a simpler formula, which eliminates redundancy in calculating the payload size.",
    "redundancy_type": "RC"
  },
  "dataset_591": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces a hardcoded `LONG_MAX` with a more appropriate maximum value for `ssize_t`, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_592": {
    "eliminates_redundant_computation": true,
    "reason": "The commit implements caching for the image to avoid unnecessary recomputation if the image hasn't changed.",
    "redundancy_type": "UE"
  },
  "dataset_593": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts audio stream setup logic based on version conditions but does not eliminate any actual redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_594": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary resizing and sleeps, simplifying the logic to just resize the window to its current size.",
    "redundancy_type": "LI"
  },
  "dataset_595": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the handling of the ABORT node by reusing the type of the child node, preventing redundant evaluations.",
    "redundancy_type": "LI"
  },
  "dataset_596": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes multiple calls to CollectAllValuesOnLeaf and CollectAllSepsOnInner methods, which likely were called redundantly.",
    "redundancy_type": "RF"
  },
  "dataset_597": {
    "eliminates_redundant_computation": false,
    "reason": "The change from 'continue' to 'break' alters control flow but does not eliminate redundant calculations.",
    "redundancy_type": null
  },
  "dataset_598": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a new variable for performance improvement but does not remove any existing redundant computations.",
    "redundancy_type": null
  },
  "dataset_599": {
    "eliminates_redundant_computation": false,
    "reason": "The commit mainly involves formatting changes, such as removing comments and whitespace, without eliminating any redundant computation.",
    "redundancy_type": null
  },
  "dataset_600": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the number of iterations from 10 to 1, which reduces unnecessary repeated performance test iterations.",
    "redundancy_type": "RC"
  },
  "dataset_601": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the calculation to eliminate redundant computations in repeated print statements by consolidating the formula for computation.",
    "redundancy_type": "RC"
  },
  "dataset_602": {
    "eliminates_redundant_computation": true,
    "reason": "The commit updates the calculations to avoid redundant division, notably by removing unnecessary repetitive computations of `key_num / (1024.0 * 1024.0)`.",
    "redundancy_type": "RC"
  },
  "dataset_603": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes repetitive random number generation and replaces it with a stable hashing function, thus avoiding unnecessary computations.",
    "redundancy_type": "RF"
  },
  "dataset_604": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the memory allocation calculation but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_605": {
    "eliminates_redundant_computation": true,
    "reason": "This commit refactors the way memory references are managed by clearing the hash map in a single operation, which eliminates the need to individually erase entries, thus reducing unnecessary operations.",
    "redundancy_type": "CE"
  },
  "dataset_606": {
    "eliminates_redundant_computation": true,
    "reason": "The change introduces a local variable that eliminates unnecessary memory volatility while keeping the calculation consistent.",
    "redundancy_type": "RC"
  },
  "dataset_607": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the calculation of 's' by eliminating a function call that was redundant.",
    "redundancy_type": "RF"
  },
  "dataset_608": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the assignment of variables by combining two assignments into one, thereby reducing redundant operations.",
    "redundancy_type": "RF"
  },
  "dataset_609": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes duplicate calls to 'BenchMarkByName' for TEA and XTEA, which were previously called in one place and then again later, suggesting redundancy.",
    "redundancy_type": "RF"
  },
  "dataset_610": {
    "eliminates_redundant_computation": false,
    "reason": "The patch introduces a more efficient multiplication method but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_611": {
    "eliminates_redundant_computation": false,
    "reason": "The patch changes the arguments in a function call, but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_612": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a hardcoded value with a constant, reducing redundancy in specifying the key length.",
    "redundancy_type": "RC"
  },
  "dataset_613": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a line reading operation with a byte read operation, preventing unnecessary computation associated with parsing a line when dealing with binary header data.",
    "redundancy_type": "RC"
  },
  "dataset_614": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds additional functionality without eliminating any redundant computations.",
    "redundancy_type": null
  },
  "dataset_615": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not appear to address redundant or unnecessary computations as per the specified criteria.",
    "redundancy_type": null
  },
  "dataset_616": {
    "eliminates_redundant_computation": false,
    "reason": "The provided commit patch does not contain any changes that aim to eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_617": {
    "eliminates_redundant_computation": false,
    "reason": "The provided HTML content does not contain a software commit patch (diff) to analyze for redundant computations.",
    "redundancy_type": null
  },
  "dataset_618": {
    "eliminates_redundant_computation": false,
    "reason": "The provided HTML content does not contain any commit patch (diff) details to analyze for redundant calculations.",
    "redundancy_type": null
  },
  "dataset_619": {
    "eliminates_redundant_computation": false,
    "reason": "The provided patch does not contain changes related to redundant computations.",
    "redundancy_type": null
  },
  "dataset_620": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not appear to eliminate redundant computations, as it is not evident from the given content that any specific computation redundancy has been addressed.",
    "redundancy_type": null
  },
  "dataset_621": {
    "eliminates_redundant_computation": false,
    "reason": "The patch does not seem to address any redundant or unnecessary computations.",
    "redundancy_type": null
  },
  "dataset_622": {
    "eliminates_redundant_computation": false,
    "reason": "The provided content is not a commit patch (diff) but HTML content from a GitHub webpage.",
    "redundancy_type": null
  },
  "dataset_623": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not appear to focus on eliminating redundant computations based on the provided diff.",
    "redundancy_type": null
  },
  "dataset_624": {
    "eliminates_redundant_computation": true,
    "reason": "Reduces repeated computation of the buffer size by defining a constant and using it instead.",
    "redundancy_type": "RC"
  },
  "dataset_625": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the copyout operation, potentially reducing unnecessary data copying.",
    "redundancy_type": "RC"
  },
  "dataset_626": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a new implementation for lseek and writev but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_627": {
    "eliminates_redundant_computation": true,
    "reason": "The commit caches the result of the 'seg->end()' call to avoid repeated function calls within the loop.",
    "redundancy_type": "RF"
  },
  "dataset_628": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the checksum calculation by eliminating repeated accesses to the buffer and moving the pointer manipulation outside of the redundant loop.",
    "redundancy_type": "LI"
  },
  "dataset_629": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the computation of hashes but does not eliminate redundant calculations.",
    "redundancy_type": null
  },
  "dataset_630": {
    "eliminates_redundant_computation": true,
    "reason": "The commit calculates the difference 'q - p' once and reuses it instead of recalculating it multiple times within the loop.",
    "redundancy_type": "RC"
  },
  "dataset_631": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces two separate calls with one more efficient call, thus eliminating redundancy.",
    "redundancy_type": "RF"
  },
  "dataset_632": {
    "eliminates_redundant_computation": false,
    "reason": "The patch contains a commentary about potential improvements but does not modify any code to eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_633": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a mechanism to collapse repeated log messages within a specified timeframe, avoiding the need to log the same message multiple times.",
    "redundancy_type": "RF"
  },
  "dataset_634": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the redundant resizing of the byte array before storing the value, which optimizes the push operation.",
    "redundancy_type": "RF"
  },
  "dataset_635": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a repeated memory initialization by directly instantiating the engine in each loop iteration, reducing unnecessary computation.",
    "redundancy_type": null
  },
  "dataset_636": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the argument conversion by using the function signature to determine the type of each argument only once instead of redundantly applying the same mesh of condition checks.",
    "redundancy_type": "LI"
  },
  "dataset_637": {
    "eliminates_redundant_computation": true,
    "reason": "The commit hoists the instantiation of the engine and function reference out of the benchmark loop to avoid repeated computations on each iteration.",
    "redundancy_type": "LI"
  },
  "dataset_638": {
    "eliminates_redundant_computation": false,
    "reason": "The commit refactors the code to use a range-based for loop, which improves readability but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_639": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a constant value and does not remove any redundant computations or calculations.",
    "redundancy_type": null
  },
  "dataset_640": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a constant value but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_641": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts a calculation in a lambda function without removing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_642": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes a calculation to avoid repeated checks against `segment_length`, replacing it with a computed constant `max_seg_len` that is evaluated once.",
    "redundancy_type": "RC"
  },
  "dataset_643": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces manual loop for removing non-canonical hashes with a standard library function to improve efficiency.",
    "redundancy_type": "LI"
  },
  "dataset_644": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces repeated calculations of windowSize by reassigning it based on updated values, ensuring consistent usage without redundancies.",
    "redundancy_type": "RC"
  },
  "dataset_645": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces redundant calculations for 'block_length_min' based on 'percentageIdentity' conditions.",
    "redundancy_type": "RC"
  },
  "dataset_646": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a complex function call for window size calculation in favor of a simpler heuristic, potentially removing unnecessary recomputation.",
    "redundancy_type": "RC"
  },
  "dataset_647": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the computation of the window size but does not eliminate any redundant calculations.",
    "redundancy_type": null
  },
  "dataset_648": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes constants to optimize conditions for WFA execution but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_649": {
    "eliminates_redundant_computation": false,
    "reason": "The changes in the commit alter constant values but do not eliminate any redundant computations in the code.",
    "redundancy_type": null
  },
  "dataset_650": {
    "eliminates_redundant_computation": false,
    "reason": "The patch modifies a computation but does not eliminate redundancy.",
    "redundancy_type": null
  },
  "dataset_651": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a memory leak caused by placement new with direct assignment, preventing unnecessary allocations and improving resource management.",
    "redundancy_type": "RC"
  },
  "dataset_652": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes memory allocation from stack to heap and cleans up allocated memory, but it does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_653": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the file opening mode from non-blocking to blocking to reduce unnecessary CPU usage while waiting for frame reads.",
    "redundancy_type": "RC"
  },
  "dataset_654": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a call to sizeInBytes() with a computation of bytesPerLine() * height, eliminating a redundant function call.",
    "redundancy_type": "RF"
  },
  "dataset_655": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary call to QTcpSocket::flush() which would be handled automatically by the event loop, thus improving reliability.",
    "redundancy_type": "UE"
  },
  "dataset_656": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on initializing the struct using memset for safety rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_657": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies output handling to discard unnecessary output when not in debug mode, preventing potential blocking and improving resource management.",
    "redundancy_type": "UE"
  },
  "dataset_658": {
    "eliminates_redundant_computation": false,
    "reason": "The commit refactors the minimum width calculation of a button based on rendered text but does not eliminate any redundant computations; it replaces hard-coded sizes with a dynamic calculation.",
    "redundancy_type": null
  },
  "dataset_659": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids redundant attribute name matching for each loop iteration by storing the matched real attribute name once.",
    "redundancy_type": "LI"
  },
  "dataset_660": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a less efficient function call (rfbClientSwap32IfLE) with a more specific one (rfbClientSwap24IfLE) to reduce computation related to the alpha channel.",
    "redundancy_type": "RF"
  },
  "dataset_661": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary variable definitions and recalculates values directly in the function calls, reducing redundancy.",
    "redundancy_type": "RC"
  },
  "dataset_662": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant call to seek the buffer at position 0, which is unnecessary before writing the message size and data.",
    "redundancy_type": "RF"
  },
  "dataset_663": {
    "eliminates_redundant_computation": false,
    "reason": "The commit refactors the control flow of a loop but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_664": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents unnecessary signal emission by checking if data has changed before updating and emitting the signal.",
    "redundancy_type": "UE"
  },
  "dataset_665": {
    "eliminates_redundant_computation": true,
    "reason": "The commit caches the result of rowCount() to avoid recalculating it on every iteration of the loop.",
    "redundancy_type": "LI"
  },
  "dataset_666": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes a check by avoiding unnecessary conversion to lowercase, thus preventing redundant computation.",
    "redundancy_type": "RF"
  },
  "dataset_667": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant check for an empty list of server processes, as stopAllServers() already handles the scenario if the list is empty.",
    "redundancy_type": "CE"
  },
  "dataset_668": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant calculations of features by iterating only over related features and eliminating repeated checks for disabled features.",
    "redundancy_type": "RC"
  },
  "dataset_669": {
    "eliminates_redundant_computation": true,
    "reason": "The update utilizes direct comparison of string pointers instead of constructing a StringId, which reduces unnecessary string object creation.",
    "redundancy_type": "RC"
  },
  "dataset_670": {
    "eliminates_redundant_computation": false,
    "reason": "The commit optimizes the return value based on the sample count but does not eliminate any redundant computations present in the original code.",
    "redundancy_type": null
  },
  "dataset_671": {
    "eliminates_redundant_computation": true,
    "reason": "The commit improves performance by avoiding redundant swaps of node IDs and instead uses a mapping to update IDs in a single pass.",
    "redundancy_type": "RC"
  },
  "dataset_672": {
    "eliminates_redundant_computation": false,
    "reason": "The commit primarily changes a constant variable value, not eliminating any redundant computations.",
    "redundancy_type": null
  },
  "dataset_673": {
    "eliminates_redundant_computation": false,
    "reason": "The patch modifies how output is formatted and adds a flush, but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_674": {
    "eliminates_redundant_computation": false,
    "reason": "The change modifies a buffer size constant but does not involve eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_675": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a parallel for loop to a serial execution but does not eliminate redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_676": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a copy operation with an assignment, avoiding unnecessary duplication of data.",
    "redundancy_type": "RF"
  },
  "dataset_677": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces repeated database calls with a single retrieval of all addon data, optimizing the checks for available updates.",
    "redundancy_type": "DB"
  },
  "dataset_678": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a sequential loop that checked for duplicate grid items, which was unnecessary and redundant.",
    "redundancy_type": "LI"
  },
  "dataset_679": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents loading identical actors multiple times, reducing unnecessary computations and database queries.",
    "redundancy_type": "RF"
  },
  "dataset_680": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not appear to focus on redundant computations but rather adjusts the threshold for speed adjustment logic.",
    "redundancy_type": null
  },
  "dataset_681": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary JSONRPC data conversion when there are no connections, which prevents redundant computations.",
    "redundancy_type": "RF"
  },
  "dataset_682": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates repeated calls to an external clock function by using a cached value, reducing unnecessary computations.",
    "redundancy_type": "RF"
  },
  "dataset_683": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates the timing method and does not remove redundant calculations.",
    "redundancy_type": null
  },
  "dataset_684": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces the manual calculation of the current timestamp with a more straightforward and potentially less error-prone method using std::chrono.",
    "redundancy_type": "RC"
  },
  "dataset_685": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces the manual timing computation with a more efficient and cleaner std::chrono measurement.",
    "redundancy_type": "RC"
  },
  "dataset_686": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a direct istream read with a std::string approach, preventing potential repetitive parsing calls on the stream.",
    "redundancy_type": "RF"
  },
  "dataset_687": {
    "eliminates_redundant_computation": false,
    "reason": "The change replaces a constructor call with a more modern utility, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_688": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary synchronous loading of EPG tags during startup, which will be handled on demand, thereby avoiding redundant calculations.",
    "redundancy_type": "UE"
  },
  "dataset_689": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids obtaining the EPG tag for non-radio channels, which is an expensive operation that was previously being called regardless of the channel type.",
    "redundancy_type": "UE"
  },
  "dataset_690": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the quality value used for JPEG compression, optimizing storage without losing significant quality.",
    "redundancy_type": "UE"
  },
  "dataset_691": {
    "eliminates_redundant_computation": true,
    "reason": "The patch reduces the number of calls to GetChannelGroupMember by using the cached GetPVRChannelGroupMemberInfoTag method first.",
    "redundancy_type": "RF"
  },
  "dataset_692": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a constant value assignment with a function call that provides the same constant, making it clearer and more maintainable.",
    "redundancy_type": "RC"
  },
  "dataset_693": {
    "eliminates_redundant_computation": true,
    "reason": "The calculation of 'period' has been moved outside the loop to avoid repeated computation with the same inputs.",
    "redundancy_type": "LI"
  },
  "dataset_694": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts the logic for calculating a/v sync rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_695": {
    "eliminates_redundant_computation": true,
    "reason": "The commit allocates a savestate and finalizes it for immediate usage without unnecessary recomputations, improving efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_696": {
    "eliminates_redundant_computation": true,
    "reason": "The patch reduces the calls to GetQueueTime() by storing its result in a variable, avoiding repeated computations.",
    "redundancy_type": "RF"
  },
  "dataset_697": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts the chunk size for reading and writing but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_698": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces redundant calls to the Channel() method within the loop, thus optimizing repeated computations.",
    "redundancy_type": "RF"
  },
  "dataset_699": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the logic for cleaning marked regions by eliminating the manual loop and using `std::remove_if`, which improves efficiency.",
    "redundancy_type": "LI"
  },
  "dataset_700": {
    "eliminates_redundant_computation": false,
    "reason": "The commit addresses a memory management issue rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_701": {
    "eliminates_redundant_computation": true,
    "reason": "The commit improves function logic by combining checks into a single return statement, eliminating unnecessary evaluations.",
    "redundancy_type": "CE"
  },
  "dataset_702": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the usage of 'scanlinebuff' from a dynamically allocated array to a std::vector, eliminating the need for manual memory management and improving safety while keeping the same underlying computation intact.",
    "redundancy_type": "RC"
  },
  "dataset_703": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the conditional check to eliminate unnecessary calls to 'c->toUnicode' when the codec is the same.",
    "redundancy_type": "CE"
  },
  "dataset_704": {
    "eliminates_redundant_computation": true,
    "reason": "The commit skips processing for binary files early, preventing unnecessary computations on such files.",
    "redundancy_type": "RC"
  },
  "dataset_705": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a log block size from 4096 bytes to 512 bytes, but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_706": {
    "eliminates_redundant_computation": true,
    "reason": "The patch simplifies the condition by calculating 'limit' only once and eliminates the need for a min comparison, thus reducing unnecessary computation.",
    "redundancy_type": "RC"
  },
  "dataset_707": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary string literals and computes 'skipBytes' more efficiently, reducing redundant initializations.",
    "redundancy_type": "RC"
  },
  "dataset_708": {
    "eliminates_redundant_computation": true,
    "reason": "The commit includes a transformation of output samples that reduces repeated calculations, consolidating operations to avoid unnecessary recomputation.",
    "redundancy_type": "RC"
  },
  "dataset_709": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a hard-coded value to a named constant for clarity, but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_710": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors the measurement logic to avoid redundant computation of 'totalClocks' in the return statement.",
    "redundancy_type": "RC"
  },
  "dataset_711": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the calculation of `bufSize` by replacing a conditional and removing unnecessary intermediate calculations.",
    "redundancy_type": "RC"
  },
  "dataset_712": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors the power calculation loop to be more compact, thus reducing redundant calculations of powers of the base.",
    "redundancy_type": "LI"
  },
  "dataset_713": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant check for the '+' sign, which is unnecessary since the negative sign is the only one needed.",
    "redundancy_type": "CE"
  },
  "dataset_714": {
    "eliminates_redundant_computation": false,
    "reason": "The commit increases the number of service threads but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_715": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates the maximum frame rate limit but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_716": {
    "eliminates_redundant_computation": true,
    "reason": "Redundant conditional check for the same condition is removed, simplifying the code.",
    "redundancy_type": "CE"
  },
  "dataset_717": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a second call to 'RemoveAllObjectsInRemoveList' to ensure that guardian pets are removed after the grid is unloaded, addressing potential redundancy in the cleanup process.",
    "redundancy_type": "RC"
  },
  "dataset_718": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on code formatting and organization rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_719": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a recursive call with a direct method invocation to avoid unnecessary descent checks.",
    "redundancy_type": "RF"
  },
  "dataset_720": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the number of keys and blocks used in the test, likely minimizing redundant computation and speeding up execution.",
    "redundancy_type": "RC"
  },
  "dataset_721": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the calculation of the right edge of the last cell by performing the computation once outside of a loop instead of repeatedly inside.",
    "redundancy_type": "LI"
  },
  "dataset_722": {
    "eliminates_redundant_computation": true,
    "reason": "The patch avoids unnecessary computation by not calling GetContentType() if there's an error, which is a repeated function call.",
    "redundancy_type": "RF"
  },
  "dataset_723": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces wxArrayPtrVoid with wxVector, streamlining memory management and potentially reducing redundant operations on the container.",
    "redundancy_type": "RC"
  },
  "dataset_724": {
    "eliminates_redundant_computation": true,
    "reason": "The revised code eliminates repeated calls to GetCount() and selectedItems() by storing their results in local variables.",
    "redundancy_type": "RF"
  },
  "dataset_725": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop with a call to memset, which is more efficient for setting memory to a fixed value.",
    "redundancy_type": "RF"
  },
  "dataset_726": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a redundant bitwise operation with a direct assignment, removing unnecessary computation.",
    "redundancy_type": "CE"
  },
  "dataset_727": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant call to UpdateSize() since it's already invoked by SetRows().",
    "redundancy_type": "RF"
  },
  "dataset_728": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents unnecessary updates to cell values when the new value is the same as the existing value, eliminating unnecessary operations.",
    "redundancy_type": "UE"
  },
  "dataset_729": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary addition of padding that was already considered in tool size calculations, avoiding redundant computation.",
    "redundancy_type": "RC"
  },
  "dataset_730": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary additional cast after confirming the result of wxDynamicCast, which is already storing the result in fileProp.",
    "redundancy_type": "RF"
  },
  "dataset_731": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on improving data structure usage, not eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_732": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary calls to GetWidth() for hidden columns, which do not impact rendering and can be computationally expensive.",
    "redundancy_type": "RF"
  },
  "dataset_733": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to prevent unnecessary calls to InvalidateBestSize() when the bitmap's size has not changed.",
    "redundancy_type": "UE"
  },
  "dataset_734": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary updates to the window style when the state of the bitmap/icon has not changed.",
    "redundancy_type": "CE"
  },
  "dataset_735": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes a copy of wxString to a reference, avoiding unnecessary copying of the string.",
    "redundancy_type": "RC"
  },
  "dataset_736": {
    "eliminates_redundant_computation": true,
    "reason": "The commit initializes point size only once based on the logical height, eliminating the need for redundant calculations.",
    "redundancy_type": "RC"
  },
  "dataset_737": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the creation of a temporary solid brush that duplicates the color of the background brush, directly using the background brush instead.",
    "redundancy_type": "RF"
  },
  "dataset_738": {
    "eliminates_redundant_computation": false,
    "reason": "The patch optimizes string iteration but does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_739": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts display logic for double buffering but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_740": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates multiple calls to tzset() in wxGetTimeZone() by calling it only once, which avoids unnecessary repetitive initialization.",
    "redundancy_type": "RF"
  },
  "dataset_741": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids repeated calls to GetFirstLineBreakPosition with the same input, reducing unnecessary computations.",
    "redundancy_type": "RF"
  },
  "dataset_742": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not eliminate redundant computations but rather simplifies the code by using a more appropriate member function.",
    "redundancy_type": null
  },
  "dataset_743": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary call to SetFont() on wxClientDC, which inherits the font from the associated window.",
    "redundancy_type": "UE"
  },
  "dataset_744": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary drawing operations in wxINVERT mode, which were redundant since wxPGProperty is drawn every time on a clear background.",
    "redundancy_type": "RC"
  },
  "dataset_745": {
    "eliminates_redundant_computation": true,
    "reason": "The patch avoids calling GetSelections() when the result is not needed, which eliminates redundant computation.",
    "redundancy_type": "RF"
  },
  "dataset_746": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary Refresh() call because the entire top-level window is already refreshed when the DPI changes.",
    "redundancy_type": "UE"
  },
  "dataset_747": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the precision of calculations instead of removing redundant computations.",
    "redundancy_type": null
  },
  "dataset_748": {
    "eliminates_redundant_computation": true,
    "reason": "The commit disables intermediate repaints to avoid redundant rendering during updates, thus optimizing the drawing process.",
    "redundancy_type": "RC"
  },
  "dataset_749": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on improving clarity and functionality of the wxSize initialization rather than removing redundant computations.",
    "redundancy_type": null
  },
  "dataset_750": {
    "eliminates_redundant_computation": false,
    "reason": "The diff doesn't indicate any changes to computations or optimizations. It appears to involve no functional changes or performance-related improvements.",
    "redundancy_type": null
  },
  "dataset_751": {
    "eliminates_redundant_computation": false,
    "reason": "The provided diff doesn't include any changes since the repository appears to be empty.",
    "redundancy_type": null
  },
  "dataset_752": {
    "eliminates_redundant_computation": false,
    "reason": "The provided diff does not indicate any changes related to eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_753": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not modify any computations; it only shows an empty repository.",
    "redundancy_type": null
  },
  "dataset_754": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not seem to focus on eliminating redundant computations. There is no specific optimization or removal of repeated calculations evident in the provided code.",
    "redundancy_type": null
  },
  "dataset_755": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not appear to modify any computations or improve efficiency of the code.",
    "redundancy_type": null
  },
  "dataset_756": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not contain any changes related to eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_757": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop performing repetitive operations with a single function call that operates in constant time, avoiding unnecessary iterations.",
    "redundancy_type": "LI"
  },
  "dataset_758": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes method calls that repeatedly evaluate the same condition to a structure that prevents unnecessary re-evaluations.",
    "redundancy_type": "RF"
  },
  "dataset_759": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces value-based UID comparisons with hash-based comparisons to improve efficiency and eliminate unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_760": {
    "eliminates_redundant_computation": true,
    "reason": "The patch simplifies lazy expressions by replacing known values with constants, reducing the need for complex simplifications and avoiding unnecessary computations.",
    "redundancy_type": "LI"
  },
  "dataset_761": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes the redundant cloning of path_cache, thus avoiding unnecessary memory operations and potential recomputation.",
    "redundancy_type": "RC"
  },
  "dataset_762": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds evaluation logic but does not eliminate existing redundant computations.",
    "redundancy_type": null
  },
  "dataset_763": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the hash calculation to ensure operands are processed only once, combining hash results efficiently.",
    "redundancy_type": "RF"
  },
  "dataset_764": {
    "eliminates_redundant_computation": true,
    "reason": "The commit stores the result of a function call into a variable to avoid repeated calls, thus enhancing efficiency.",
    "redundancy_type": "RF"
  },
  "dataset_765": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes data structure types without eliminating any redundant computations.",
    "redundancy_type": null
  },
  "dataset_766": {
    "eliminates_redundant_computation": true,
    "reason": "The new method 'superiors_list()' allows direct access to the 'superiors_' pointer, avoiding the unnecessary creation of a new list.",
    "redundancy_type": "RC"
  },
  "dataset_767": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repeated calculation of 'deg_per_rad' with a static constant, eliminating unnecessary recomputation in future calls.",
    "redundancy_type": "RC"
  },
  "dataset_768": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a timing test condition but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_769": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes unnecessary calls to `memcpy` that were duplicated based on visibility conditions, thus optimizing the rectangle calculation.",
    "redundancy_type": "DB"
  },
  "dataset_770": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the redundant redefinition and creation of the `VertInfo` struct and `faceVerts` vector inside a loop, which was unnecessary as they can be defined and cleared once before use.",
    "redundancy_type": "LI"
  },
  "dataset_771": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the hit circle radius and z-height calculations but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_772": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the calculation of 'animLimit' but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_773": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes a call to 'GenerateMesh()' without parameters to 'GenerateMesh(6)', potentially reducing repetitive calculations within the context.",
    "redundancy_type": "RF"
  },
  "dataset_774": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the normalization of the normal vector by calculating the magnitude once and reusing it, rather than repeatedly calling the magnitude function.",
    "redundancy_type": "RF"
  },
  "dataset_775": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant checks for layer existence before adding a new layer, consolidating the logic into a single condition.",
    "redundancy_type": "RF"
  },
  "dataset_776": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the opacity computation to eliminate redundant checks and assignments for opacity values that are effectively the same.",
    "redundancy_type": "RC"
  },
  "dataset_777": {
    "eliminates_redundant_computation": false,
    "reason": "The commit removes conditional compilation for deleting globals but does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_778": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the unnecessary 'doSolving(0)' call that was executed for each assumption added, avoiding redundant computation.",
    "redundancy_type": "RC"
  },
  "dataset_779": {
    "eliminates_redundant_computation": true,
    "reason": "The patch saves memory by deleting already loaded units when parsing fails, which avoids unnecessary retention of data and potential recomputation.",
    "redundancy_type": "RC"
  },
  "dataset_780": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a conditional check to eliminate redundant FOOL operations, which would otherwise be repeated unnecessarily.",
    "redundancy_type": "RF"
  },
  "dataset_781": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a conditional check that prevents unnecessary processing for groups that have no strings, thus optimizing the loop performance.",
    "redundancy_type": "LI"
  },
  "dataset_782": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes a copy of 'signature' to a reference, thus avoiding redundant copies of the array.",
    "redundancy_type": "RC"
  },
  "dataset_783": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary variable assignments by directly returning the result of function calls instead of storing them in a variable.",
    "redundancy_type": "RF"
  },
  "dataset_784": {
    "eliminates_redundant_computation": false,
    "reason": "The commit improves timing measurement and refactors the code, but does not eliminate any specific redundant computations.",
    "redundancy_type": null
  },
  "dataset_785": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces multiple checks and operations with a single comparison using shared identifiers, improving efficiency.",
    "redundancy_type": "RF"
  },
  "dataset_786": {
    "eliminates_redundant_computation": true,
    "reason": "The modification combines two conditional checks into one, reducing unnecessary evaluations.",
    "redundancy_type": "CE"
  },
  "dataset_787": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces pointer usage with direct object instantiation, reducing overhead and potential memory leaks while avoiding unnecessary dynamic memory allocation.",
    "redundancy_type": "UE"
  },
  "dataset_788": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the allocation of watch lists to avoid unnecessary repeated calls to allocate space in `m_watches`, thus optimizing memory usage.",
    "redundancy_type": "RC"
  },
  "dataset_789": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces checks to prevent unnecessary processing of sorts, improving the efficiency of the replace function.",
    "redundancy_type": "RC"
  },
  "dataset_790": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the code by eliminating the double iteration over the formula structure, specifically reducing redundant operations related to variable collection.",
    "redundancy_type": "LI"
  },
  "dataset_791": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a conditional check that was unnecessary, simplifying the logic and ensuring that the same computation is performed consistently without redundancy.",
    "redundancy_type": "CE"
  },
  "dataset_792": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary execution by checking if the bounds are equal before proceeding with further computations.",
    "redundancy_type": "RF"
  },
  "dataset_793": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a leaky integrator but does not eliminate redundant calculations.",
    "redundancy_type": null
  },
  "dataset_794": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids redundant computations of the arguments for acos by introducing ratio variables and conditional checks.",
    "redundancy_type": "RC"
  },
  "dataset_795": {
    "eliminates_redundant_computation": true,
    "reason": "Removed an unnecessary copy of 'instanceExtensions' that duplicated existing values.",
    "redundancy_type": "RC"
  },
  "dataset_796": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces 'push_back' with 'emplace_back', which optimizes the creation of threads but does not modify the logic to eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_797": {
    "eliminates_redundant_computation": false,
    "reason": "The patch changes a threshold for drawing meshes, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_798": {
    "eliminates_redundant_computation": true,
    "reason": "The commit comments out logging statements that are resource heavy, reducing runtime overhead.",
    "redundancy_type": "UE"
  },
  "dataset_799": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a call from 'reserve' to 'resize', which does not eliminate redundancy but rather adjusts memory allocation behavior.",
    "redundancy_type": null
  },
  "dataset_800": {
    "eliminates_redundant_computation": false,
    "reason": "The patch adds a performance test that repeatedly calls a function, but it does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_801": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary iterations by checking if the node has already been processed, eliminating redundant computation.",
    "redundancy_type": "LI"
  },
  "dataset_802": {
    "eliminates_redundant_computation": true,
    "reason": "The commit implements a memory optimization by handling node deletion within a single visit function to avoid repeated operations, thus eliminating unnecessary computations.",
    "redundancy_type": "LI"
  },
  "dataset_803": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the computation by avoiding the unnecessary call to 'instanceStr()' when warnings are disabled, thus eliminating redundant computation.",
    "redundancy_type": "UE"
  },
  "dataset_804": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant assignment to 'skip' when 'i' meets a certain condition, potentially avoiding unnecessary evaluations in subsequent logic.",
    "redundancy_type": "CE"
  },
  "dataset_805": {
    "eliminates_redundant_computation": false,
    "reason": "The commit corrects a memory leak by moving the memory freeing operation, but does not focus on eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_806": {
    "eliminates_redundant_computation": true,
    "reason": "The patch adds checks to ensure memory is only allocated if it has not already been allocated, preventing unnecessary memory allocation and potential repeated allocations.",
    "redundancy_type": "RC"
  },
  "dataset_807": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors the grid initialization by consolidating separate treatments into a single loop, eliminating unnecessary repeated computations for different types.",
    "redundancy_type": "LI"
  },
  "dataset_808": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a check to avoid redundant computations when `itarget > 1` and `itry > 1`, but doesn't remove computations that are already present.",
    "redundancy_type": null
  },
  "dataset_809": {
    "eliminates_redundant_computation": false,
    "reason": "The commit primarily adjusts control flow by modifying conditional checks without removing redundant computations.",
    "redundancy_type": null
  },
  "dataset_810": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to bypass unnecessary re-evaluation of output pins after several iterations, reducing redundant logic in the routing.",
    "redundancy_type": "CE"
  },
  "dataset_811": {
    "eliminates_redundant_computation": true,
    "reason": "The patch moves the call to `keep_budget_in_bounds` outside the loop, preventing redundant calls in each iteration.",
    "redundancy_type": "LI"
  },
  "dataset_812": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the calculation of maximum pins per block to normalize by area, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_813": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a default parameter value and does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_814": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a hardcoded number with an automatic computation to avoid potential redundant calculations in the future.",
    "redundancy_type": "RC"
  },
  "dataset_815": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a validation step for reserved1[], but does not eliminate any existing redundant computations.",
    "redundancy_type": null
  },
  "dataset_816": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the limit for entries but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_817": {
    "eliminates_redundant_computation": true,
    "reason": "The commit combines two sequential calls to 'seek_cur()' into a single call to reduce overhead.",
    "redundancy_type": "RF"
  },
  "dataset_818": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes by avoiding unnecessary unions of child nodes when only the points are needed, reducing computation time.",
    "redundancy_type": "RC"
  },
  "dataset_819": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the computation by storing repeated function results in variables instead of calling the functions multiple times.",
    "redundancy_type": "RF"
  },
  "dataset_820": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates redundant initialization of 'poly' by ensuring it is only allocated if a new edge is found, thus preventing unnecessary object creation.",
    "redundancy_type": "RF"
  },
  "dataset_821": {
    "eliminates_redundant_computation": false,
    "reason": "The patch changes the subdivision method used for processing meshes but does not address any redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_822": {
    "eliminates_redundant_computation": true,
    "reason": "The patch introduces an alternative random number generation method that eliminates the need for repeated calls to the `rand()` function, thereby reducing redundant computations.",
    "redundancy_type": "RF"
  },
  "dataset_823": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the loop to avoid unnecessary transformation of children that are already of type CGALPrimitive, reducing repeated method calls.",
    "redundancy_type": "RF"
  },
  "dataset_824": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces the use of 'left(1)' with 'at(0)', eliminating an unnecessary string operation.",
    "redundancy_type": "RF"
  },
  "dataset_825": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes the deletion of values by using a temporary list to collect values for deletion, avoiding multiple calls to delete within a loop.",
    "redundancy_type": "LI"
  },
  "dataset_826": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds an analysis step for performance improvement but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_827": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the clearing of the 'entries' list but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_828": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes old, unnecessary database queries and optimizes indexing, thereby eliminating repeated operations.",
    "redundancy_type": "UE"
  },
  "dataset_829": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a call to an attached database method with a keys() method, which reduces overhead by eliminating a potential redundant invocation of the same function.",
    "redundancy_type": "RF"
  },
  "dataset_830": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the order of operations to populate entities before creating indexes, removing unnecessary computations of indexes on empty tables.",
    "redundancy_type": "RC"
  },
  "dataset_831": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the database query by eliminating redundant initialization of the SQLite query object within the method.",
    "redundancy_type": "DB"
  },
  "dataset_832": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a duplicate call to 'sqlite3_enable_shared_cache(1)', which was previously called after it has already been set, eliminating unnecessary recomputation.",
    "redundancy_type": "RF"
  },
  "dataset_833": {
    "eliminates_redundant_computation": true,
    "reason": "The usage of 'const auto&' instead of 'auto' avoids unnecessary copies, optimizing computation.",
    "redundancy_type": "RF"
  },
  "dataset_834": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes an unnecessary assignment of 'm_iterator_version' that was likely redundant with respect to the iterator cache being used.",
    "redundancy_type": "RC"
  },
  "dataset_835": {
    "eliminates_redundant_computation": true,
    "reason": "Removed unnecessary static_cast and superfluous addition that did not change the computation's logic.",
    "redundancy_type": "RC"
  },
  "dataset_836": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the arguments passed to the mprotect function, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_837": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the loop iteration count, thereby eliminating unnecessary computations in the loop.",
    "redundancy_type": "LI"
  },
  "dataset_838": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies memory usage checks but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_839": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a mechanism to unset variables that may be holding onto memory, which can prevent unnecessary memory usage and improve performance.",
    "redundancy_type": "RC"
  },
  "dataset_840": {
    "eliminates_redundant_computation": true,
    "reason": "Simplifies the conditional logic by handling cases where redundant checks were previously made.",
    "redundancy_type": "CE"
  },
  "dataset_841": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes the loop to avoid unnecessary multiple calls to the same group.",
    "redundancy_type": "RF"
  },
  "dataset_842": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary memset operation that was incorrectly zeroing the buffer before use.",
    "redundancy_type": "RC"
  },
  "dataset_843": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes a query to avoid using a view, potentially eliminating unnecessary joins and improving efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_844": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a function call to use the standard library version, but does not remove redundant computations.",
    "redundancy_type": null
  },
  "dataset_845": {
    "eliminates_redundant_computation": true,
    "reason": "The commit updates the status immediately instead of waiting for the next tick, which prevents unnecessary delays in processing the fleeing state.",
    "redundancy_type": "UE"
  },
  "dataset_846": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates a loop by calculating the swapped amount in a single operation rather than through repeated calculations.",
    "redundancy_type": "LI"
  },
  "dataset_847": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a parameter in a function call without addressing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_848": {
    "eliminates_redundant_computation": false,
    "reason": "The commit improves memory management and handling of environment strings but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_849": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the redundant file reading by checking the firmBuf directly instead.",
    "redundancy_type": "UE"
  },
  "dataset_850": {
    "eliminates_redundant_computation": true,
    "reason": "Removed an unnecessary seek operation that was already handled by readFromROM.",
    "redundancy_type": "UE"
  },
  "dataset_851": {
    "eliminates_redundant_computation": false,
    "reason": "The commit sets timeout parameters for cURL but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_852": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a conditional check to skip overhead for file types that don't require the SMS/GG header check, thus optimizing the computation by reducing unnecessary reads.",
    "redundancy_type": "UE"
  },
  "dataset_853": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates the need for multiple row-wise `memcpy` operations by allowing a single `memcpy` when the stride is identical, thus reducing redundant computations.",
    "redundancy_type": "RC"
  },
  "dataset_854": {
    "eliminates_redundant_computation": true,
    "reason": "The commit updates a loop to stop iterating once a 0-length directory entry is found, preventing unnecessary checks and computations for subsequent entries.",
    "redundancy_type": "LI"
  },
  "dataset_855": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant checks for width and instead utilizes the pre-computed value of d->multiBadge, streamlining the logic.",
    "redundancy_type": "RC"
  },
  "dataset_856": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the compression level used in PNG writing but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_857": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a hard-coded palette size to use a macro for better maintainability, but it does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_858": {
    "eliminates_redundant_computation": false,
    "reason": "The change modifies the memory reservation size for a string but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_859": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the copying process by eliminating unnecessary iteration for line copying when strides match.",
    "redundancy_type": "LI"
  },
  "dataset_860": {
    "eliminates_redundant_computation": false,
    "reason": "The commit initializes an image with non-zero data for proper testing, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_861": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a multiplication operation within the function with a lookup into a static table, eliminating repeated calculations of the same values.",
    "redundancy_type": "RC"
  },
  "dataset_862": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the loop by returning immediately when the property is found, thus removing unnecessary checks and computations after the loop.",
    "redundancy_type": "LI"
  },
  "dataset_863": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on resource management by ensuring file handles are properly closed upon deletion, not on redundant computation.",
    "redundancy_type": null
  },
  "dataset_864": {
    "eliminates_redundant_computation": false,
    "reason": "The commit removes a comment about potential optimization but does not actually change any computation.",
    "redundancy_type": null
  },
  "dataset_865": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces multiple conditional checks with a static table lookup, reducing unnecessary computation related to string selection.",
    "redundancy_type": "CE"
  },
  "dataset_866": {
    "eliminates_redundant_computation": false,
    "reason": "The commit refactors pointer arithmetic to array indexing without changing logic or eliminating any computations.",
    "redundancy_type": null
  },
  "dataset_867": {
    "eliminates_redundant_computation": true,
    "reason": "The patch uses an iterator instead of accessing elements by index, reducing potential redundant computations when accessing `age_ratings`.",
    "redundancy_type": "RF"
  },
  "dataset_868": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts the reserve size for a string to accommodate potential additional characters; it does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_869": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a vector construction with a more efficient span representation, eliminating the overhead of extra memory allocation and copying.",
    "redundancy_type": "RC"
  },
  "dataset_870": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop that concatenates strings within each iteration with a more efficient approach that minimizes the number of operations and avoids repeated allocations.",
    "redundancy_type": "LI"
  },
  "dataset_871": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop that repeatedly accesses and increments reference counts of items in a list with a single call to PyList_GetSlice, eliminating unnecessary iterations and computations.",
    "redundancy_type": "LI"
  },
  "dataset_872": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a nested function call that computed infixes with a single function call that checks for instances, reducing unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_873": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts the size of a container preparation function based on the cleaned indices but does not eliminate redundancy in computation.",
    "redundancy_type": null
  },
  "dataset_874": {
    "eliminates_redundant_computation": true,
    "reason": "The commit improves the break condition by checking the distance to the origin of both 'momentum' and 'new_momentum', potentially avoiding redundant calculations.",
    "redundancy_type": "RC"
  },
  "dataset_875": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary memory usage by moving and clearing the `strs` vector, which optimizes the handling of the data without incurring additional copies.",
    "redundancy_type": "RC"
  },
  "dataset_876": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces repeated clamping and casting with a single rounding operation, reducing redundant calculations.",
    "redundancy_type": "RC"
  },
  "dataset_877": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the nested loops for better cache performance by changing the order of iteration, potentially reducing redundant access patterns.",
    "redundancy_type": "LI"
  },
  "dataset_878": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a duplicated concatenation and unnecessary clearing of the vector with more efficient string manipulation and memory management.",
    "redundancy_type": "RC"
  },
  "dataset_879": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates redundant computation of 'dt' by calculating it once outside the loop instead of during each iteration.",
    "redundancy_type": "LI"
  },
  "dataset_880": {
    "eliminates_redundant_computation": true,
    "reason": "The patch modifies the initialization of CPU and GPU job counts to cap the maximum number of threads, which reduces unnecessary computations related to thread count.",
    "redundancy_type": "RC"
  },
  "dataset_881": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary assignments to m_frameEnded, which were duplicated within the rendering loop.",
    "redundancy_type": "CE"
  },
  "dataset_882": {
    "eliminates_redundant_computation": false,
    "reason": "The commit reduces the size of an intermediate image without addressing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_883": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the frequency of locking around shared resources, thereby avoiding unnecessary operations that can lead to a performance bottleneck.",
    "redundancy_type": "LI"
  },
  "dataset_884": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the cpp_str method by eliminating the unnecessary call to the c_str() method without specifying size, which could lead to redundant computations of string formatting.",
    "redundancy_type": "RC"
  },
  "dataset_885": {
    "eliminates_redundant_computation": false,
    "reason": "The commit limits the exploration depth of viewscreens but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_886": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes memory allocation for 'm_flags' when the size is invalid, thus preventing unnecessary computation.",
    "redundancy_type": "RC"
  },
  "dataset_887": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a multiplication operation with a division operation to avoid redundant computation of the value used multiple times.",
    "redundancy_type": "RC"
  },
  "dataset_888": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a substring operation that unnecessarily creates a new string with a pop_back operation, reducing redundancy.",
    "redundancy_type": "RC"
  },
  "dataset_889": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the data type of a variable in a calculation but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_890": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces a dynamic C array with a std::vector, which improves memory management but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_891": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a redundant use of 'stat' with 'fs::file_size', eliminating unnecessary filesystem calls while achieving the same result more efficiently.",
    "redundancy_type": "RC"
  },
  "dataset_892": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refines the buffer handling, avoiding unnecessary reallocation and ensuring efficient memory usage.",
    "redundancy_type": "RF"
  },
  "dataset_893": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces std::find_if with std::find, as the condition checks for equality which is directly supported by std::find, thus eliminating unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_894": {
    "eliminates_redundant_computation": true,
    "reason": "Replaced multiple count checks with find calls to avoid unnecessary iterations.",
    "redundancy_type": "CE"
  },
  "dataset_895": {
    "eliminates_redundant_computation": false,
    "reason": "The commit converts a tail-recursive function to an iterative loop, but it does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_896": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a static regex that checks the format of a key, replacing it with simple string operations to avoid performance slowdown from regex processing.",
    "redundancy_type": "RC"
  },
  "dataset_897": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes duplicated calls to the print method for metadata entries, based on a condition that avoids unnecessary evaluations.",
    "redundancy_type": "CE"
  },
  "dataset_898": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes default parameters for a function but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_899": {
    "eliminates_redundant_computation": false,
    "reason": "The patch modifies the compression level used in a command string but does not eliminate any redundant calculations.",
    "redundancy_type": null
  },
  "dataset_900": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant calls to set equalizer modes and optimizes LoadEqualizer instantiation.",
    "redundancy_type": "RF"
  },
  "dataset_901": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces redundant console logging calls by concatenating messages into a buffer before printing.",
    "redundancy_type": "RF"
  },
  "dataset_902": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant call to std::make_pair, simplifying the code without changing its functionality.",
    "redundancy_type": "RF"
  },
  "dataset_903": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates redundant checks by introducing a constexpr for the magic number and moving a comparison outside the file read condition.",
    "redundancy_type": "RC"
  },
  "dataset_904": {
    "eliminates_redundant_computation": false,
    "reason": "The change reduces allocated SHM space but does not address redundant computations in the code.",
    "redundancy_type": null
  },
  "dataset_905": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces an early exit optimization to stop further computations when the node's uses are depleted.",
    "redundancy_type": "LI"
  },
  "dataset_906": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a sorting operation for better branching but does not specifically eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_907": {
    "eliminates_redundant_computation": true,
    "reason": "The change improves efficiency by returning a const reference instead of creating a new string object, reducing unnecessary memory allocations.",
    "redundancy_type": "RC"
  },
  "dataset_908": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a custom character boundary check with a built-in function that is optimized, removing the need for manual iteration and improving speed.",
    "redundancy_type": "RF"
  },
  "dataset_909": {
    "eliminates_redundant_computation": true,
    "reason": "The loop iterates fewer times, reducing unnecessary iterations and computations that do not contribute to the final result.",
    "redundancy_type": "LI"
  },
  "dataset_910": {
    "eliminates_redundant_computation": true,
    "reason": "The commit combines assignment and bitwise AND operations, reducing unnecessary computation in favor of a single expression.",
    "redundancy_type": "RC"
  },
  "dataset_911": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a new method for encoding 2D morton codes but does not address elimination of redundant computations.",
    "redundancy_type": null
  },
  "dataset_912": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces one encoding method with another for performance reasons, but does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_913": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the data type in the function, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_914": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant 'emit' operation that was unnecessary for internal field changes, improving performance.",
    "redundancy_type": "UE"
  },
  "dataset_915": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the delay durations and the number of tries in a while loop without eliminating any redundant computations.",
    "redundancy_type": null
  },
  "dataset_916": {
    "eliminates_redundant_computation": true,
    "reason": "The commit disables a progress output that likely slows down performance by removing repeated, expensive string operations.",
    "redundancy_type": "UE"
  },
  "dataset_917": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts cache sizes but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_918": {
    "eliminates_redundant_computation": false,
    "reason": "The patch adds a call to clear a data structure, which does not directly eliminate redundant computations but rather manages memory usage.",
    "redundancy_type": null
  },
  "dataset_919": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a setting related to memory mapping for raw way data files but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_920": {
    "eliminates_redundant_computation": false,
    "reason": "The patch increases the cache size for indexes but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_921": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the loop by moving the initial point setting outside the loop, reducing repeated conditional checks.",
    "redundancy_type": "LI"
  },
  "dataset_922": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces manual scale calculations with projection methods, reducing unnecessary computations related to scale value.",
    "redundancy_type": "RC"
  },
  "dataset_923": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the access flags for file operations but does not focus on eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_924": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates the unnecessary creation of a new StyleConfig object when a valid one already exists.",
    "redundancy_type": "RC"
  },
  "dataset_925": {
    "eliminates_redundant_computation": false,
    "reason": "The commit enables multithreaded data loading but does not eliminate any specific redundant computation.",
    "redundancy_type": null
  },
  "dataset_926": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the cache size settings for improved memory usage estimates but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_927": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a specific implementation of TileProjection to ApproximateTileProjection, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_928": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces repeated calls to `nodes.size()` within the loop with a single variable `nodeSize`, which eliminates redundant computation.",
    "redundancy_type": "RC"
  },
  "dataset_929": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a calculation of M_PI/4 with a predefined constant M_PI_4, reducing computational overhead.",
    "redundancy_type": "RC"
  },
  "dataset_930": {
    "eliminates_redundant_computation": false,
    "reason": "The patch changes a hardcoded duration check, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_931": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on changing the data structure from list to vector, which does not eliminate any specific redundant computation.",
    "redundancy_type": null
  },
  "dataset_932": {
    "eliminates_redundant_computation": true,
    "reason": "The patch modifies calculations to prevent redundancy, particularly by reorganizing the order of calculations and removing unnecessary computations from within conditional checks.",
    "redundancy_type": "LI"
  },
  "dataset_933": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the algorithm by avoiding repeated checks in the inner loop, allowing a clearer path to fit items and reducing computation within loops.",
    "redundancy_type": "LI"
  },
  "dataset_934": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary calls to methods that are redundant within the context of the same condition.",
    "redundancy_type": "RF"
  },
  "dataset_935": {
    "eliminates_redundant_computation": true,
    "reason": "The code removes the redundant disabling of labels and text controls when the project has less than 150 records by conditionally disabling them only once.",
    "redundancy_type": "RC"
  },
  "dataset_936": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates a repeated function call by replacing 'polygon_edge_vertex' with 'polygon_vertex', avoiding unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_937": {
    "eliminates_redundant_computation": true,
    "reason": "The computation of the 'length' of 'dir' is moved outside the use in dot products to avoid redundant calculations.",
    "redundancy_type": "LI"
  },
  "dataset_938": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes an exception handling mechanism to an assertion, which does not eliminate any computations.",
    "redundancy_type": null
  },
  "dataset_939": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a duplicate assignment for 'seed2', which contains redundant computation.",
    "redundancy_type": "RF"
  },
  "dataset_940": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant area calculations that were not needed for computing the mean center of mass.",
    "redundancy_type": "RC"
  },
  "dataset_941": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the model loading process by removing repeated calls and computations based on invariant conditions.",
    "redundancy_type": "RF"
  },
  "dataset_942": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary allocation of an additional NULL byte in the string, which is redundant given that std::basic_string automatically includes it.",
    "redundancy_type": "RF"
  },
  "dataset_943": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes duplicate logic for updating row and column variables, thus streamlining the computation.",
    "redundancy_type": "LI"
  },
  "dataset_944": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not eliminate redundant computations; it focuses on memory management by using unique_ptr.",
    "redundancy_type": null
  },
  "dataset_945": {
    "eliminates_redundant_computation": true,
    "reason": "The commit improves efficiency by eliminating unnecessary variable assignments and directly modifying size instead.",
    "redundancy_type": "RC"
  },
  "dataset_946": {
    "eliminates_redundant_computation": true,
    "reason": "The patch refactors the resizing logic to eliminate unnecessary temporary calculations for integer multiples, reducing the redundancy in processing the dimensions.",
    "redundancy_type": "RC"
  },
  "dataset_947": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates the static instance variable and replaces it with a static local variable, removing the need for mutex locks and ensuring initialization only occurs once.",
    "redundancy_type": "RF"
  },
  "dataset_948": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a snprintf() call with a static lookup table, reducing unnecessary computations in converting old publisher codes.",
    "redundancy_type": "RC"
  },
  "dataset_949": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a memcpy() call with a manual byteswap, which avoids unnecessary data copying and potential aliasing issues.",
    "redundancy_type": "RF"
  },
  "dataset_950": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the number of shifts applied to certain variables, optimizing the computation for RGB4A3 pixel format.",
    "redundancy_type": "RC"
  },
  "dataset_951": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates the unnecessary copying of the ROM header into a separate variable before reading it directly into the destination structure.",
    "redundancy_type": "RC"
  },
  "dataset_952": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the path variable assignment by resizing it instead of concatenating strings, thus eliminating a redundant computation.",
    "redundancy_type": "RC"
  },
  "dataset_953": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the unnecessary intermediate GBA_RomHeader struct, directly using d->romHeader to avoid redundant data copying.",
    "redundancy_type": "RF"
  },
  "dataset_954": {
    "eliminates_redundant_computation": false,
    "reason": "The commit reduces the size of a buffer but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_955": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a function to free allocated memory, addressing a memory leak rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_956": {
    "eliminates_redundant_computation": false,
    "reason": "The commit defines a new macro for converting wchar_t to rp_char, but does not eliminate redundant computations in existing code.",
    "redundancy_type": null
  },
  "dataset_957": {
    "eliminates_redundant_computation": false,
    "reason": "The commit involves changing a for loop from count-up to countdown for optimization but doesn't remove redundant computations.",
    "redundancy_type": null
  },
  "dataset_958": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on fixing memory allocation issues rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_959": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces unused bytes with an instruction but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_960": {
    "eliminates_redundant_computation": false,
    "reason": "The commit increases the backlog value for the socket server but does not address any redundant computations.",
    "redundancy_type": null
  },
  "dataset_961": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a conditional sleep to avoid continuously polling for events, reducing unnecessary CPU usage.",
    "redundancy_type": "RC"
  },
  "dataset_962": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the number of iterations in a loop, thereby decreasing unnecessary repeated computations.",
    "redundancy_type": "LI"
  },
  "dataset_963": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes the unnecessary initialization of the 'final_string' array on each iteration of the loop, which avoids redundant stack clearing.",
    "redundancy_type": "LI"
  },
  "dataset_964": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces an auto-flush feature for a capture writer rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_965": {
    "eliminates_redundant_computation": false,
    "reason": "The commit rewrites a loop using std::find_if, optimizing the search but not eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_966": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates the repeated use of a vector in favor of a unique pointer array, improving memory management and potentially reducing overhead.",
    "redundancy_type": "RC"
  },
  "dataset_967": {
    "eliminates_redundant_computation": false,
    "reason": "This commit modifies a function to handle different sector sizes but does not eliminate any redundancy.",
    "redundancy_type": null
  },
  "dataset_968": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a potentially redundant command that could slow down execution with a cached version, thereby avoiding unnecessary computations.",
    "redundancy_type": "UE"
  },
  "dataset_969": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces repeated calls to 'get_uuid' with a cached method to reduce redundant UUID retrieval.",
    "redundancy_type": "RC"
  },
  "dataset_970": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a call to close_device_and_disk() that is effectively a no-op due to passing NULL pointers.",
    "redundancy_type": "UE"
  },
  "dataset_971": {
    "eliminates_redundant_computation": true,
    "reason": "Replaced repeated string operations with character overloads, improving efficiency by reducing unnecessary computation.",
    "redundancy_type": "RC"
  },
  "dataset_972": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the process by adding entries to L1, effectively preempting redundant updates during future lookups.",
    "redundancy_type": "RC"
  },
  "dataset_973": {
    "eliminates_redundant_computation": true,
    "reason": "The change replaces a dynamic std::vector with a static constexpr std::array, eliminating heap usage and improving performance.",
    "redundancy_type": "RC"
  },
  "dataset_974": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the data type of an array to use less memory, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_975": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on setting thread priority but does not address any redundant computations.",
    "redundancy_type": null
  },
  "dataset_976": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the loop to take sections by const reference, reducing copy overhead and making the computation more efficient.",
    "redundancy_type": "RC"
  },
  "dataset_977": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a heavyweight filesystem check with a simpler access check, eliminating unnecessary computation.",
    "redundancy_type": "UE"
  },
  "dataset_978": {
    "eliminates_redundant_computation": true,
    "reason": "The commit corrects the calculation of the number of elements to be processed from a vector, eliminating unnecessary out-of-bounds access and incorrect handling of elements.",
    "redundancy_type": "RC"
  },
  "dataset_979": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the number of TCP write operations by combining multiple writes into one, eliminating unnecessary calls.",
    "redundancy_type": "RF"
  },
  "dataset_980": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a method call that generates a formatted string with a direct constructor call, reducing unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_981": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary conversion and memory allocation for the string representation each time the function is called.",
    "redundancy_type": "UE"
  },
  "dataset_982": {
    "eliminates_redundant_computation": false,
    "reason": "The commit is focused on modifying the database access behavior by turning off synchronous operations, rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_983": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a duplicated computation using 'pow' with a bitwise shift operation, which is more efficient and avoids recalculating the value in multiple places.",
    "redundancy_type": "RC"
  },
  "dataset_984": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the condition to spawn a new interpreter, ensuring it only occurs when no parallel activity was already in progress, thus eliminating unnecessary computations of spawning an interpreter when it's already running.",
    "redundancy_type": "UE"
  },
  "dataset_985": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the computation of the 'effect' variable by consolidating calculations that involve constant inputs and repetitive operations.",
    "redundancy_type": "RC"
  },
  "dataset_986": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes drawing by modifying the display surface directly instead of creating a redundant copy, thus eliminating unnecessary operations.",
    "redundancy_type": "RC"
  },
  "dataset_987": {
    "eliminates_redundant_computation": false,
    "reason": "The patch adds a parameter setting but does not eliminate any redundant or unnecessary computation.",
    "redundancy_type": null
  },
  "dataset_988": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors the calculation of 'samples' to avoid recomputing the same value multiple times.",
    "redundancy_type": "RC"
  },
  "dataset_989": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the audio sample rate for FM Midi, which lowers CPU usage by preventing redundant high CPU calculations without impacting sound quality.",
    "redundancy_type": "UE"
  },
  "dataset_990": {
    "eliminates_redundant_computation": true,
    "reason": "Removed a delay call that unnecessarily halted the thread execution, which is redundant.",
    "redundancy_type": "RC"
  },
  "dataset_991": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the computation of state probabilities by ensuring that the most resistive armor is evaluated only once, eliminating the need for redundant checks and calculations for each piece of armor.",
    "redundancy_type": "LI"
  },
  "dataset_992": {
    "eliminates_redundant_computation": true,
    "reason": "The commit alters the condition to prevent unnecessary memory allocations, ensuring computations only happen when necessary.",
    "redundancy_type": "LI"
  },
  "dataset_993": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates repetitive calculations of conditional checks and computes the offset and sine value directly within the loop, removing unnecessary evaluations.",
    "redundancy_type": "LI"
  },
  "dataset_994": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents the reallocation of the Sprite object if it has already been created, reducing unnecessary computations.",
    "redundancy_type": "RF"
  },
  "dataset_995": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the data structure from map to unordered_map to improve performance but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_996": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an expensive check for file readiness in release builds, which is unnecessary and slows down performance.",
    "redundancy_type": "UE"
  },
  "dataset_997": {
    "eliminates_redundant_computation": true,
    "reason": "The commit caches the results of function calls that are repeated within a loop, avoiding multiple calls with the same inputs.",
    "redundancy_type": "RF"
  },
  "dataset_998": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces 'std::lower_bound' with 'std::find_if', which avoids redundant comparisons by directly searching based on the condition.",
    "redundancy_type": "RC"
  },
  "dataset_999": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant call to Cache::System() when a system graphic is already passed as an argument.",
    "redundancy_type": "RF"
  },
  "dataset_1000": {
    "eliminates_redundant_computation": true,
    "reason": "Removed unnecessary memset call since decode already clears the buffer.",
    "redundancy_type": "UE"
  },
  "dataset_1001": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies caching logic to avoid unnecessary unloading of assets, but does not eliminate redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_1002": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents unnecessary updates to the window title by checking if the title has changed before recomputing it.",
    "redundancy_type": "UE"
  },
  "dataset_1003": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on changing how an image is managed (unloading instead of hiding) but does not primarily address redundant computations.",
    "redundancy_type": null
  },
  "dataset_1004": {
    "eliminates_redundant_computation": false,
    "reason": "The commit fixes a memory corruption issue by ensuring that the rectangle cleared is appropriate for the window size, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1005": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the image loading method from Blit to BlitFast, improving performance but not eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_1006": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces repeated sorting of events with a single sorted insertion, which eliminates unnecessary reordering of the same elements.",
    "redundancy_type": "RC"
  },
  "dataset_1007": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary use of 'result', consolidating memory management and improving code clarity.",
    "redundancy_type": "CE"
  },
  "dataset_1008": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the handling of small seek operations, avoiding unnecessary calls to seekg() for small values.",
    "redundancy_type": "UE"
  },
  "dataset_1009": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant conditional check from the loop's condition, simplifying it.",
    "redundancy_type": "CE"
  },
  "dataset_1010": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary buffer copying when the message type is not 'data', reducing redundant computation.",
    "redundancy_type": "RC"
  },
  "dataset_1011": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refines the code by ensuring that the condition for accessing the field array is checked properly, avoiding redundant calls that can arise from accessing the same index multiple times.",
    "redundancy_type": "RC"
  },
  "dataset_1012": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the condition to avoid unnecessary CRC checks when the status is 's_delta', potentially eliminating redundant calls to 'get_crc'.",
    "redundancy_type": "RF"
  },
  "dataset_1013": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates a redundant string copy by directly passing a string view instead of creating a string from the environment variable.",
    "redundancy_type": "RF"
  },
  "dataset_1014": {
    "eliminates_redundant_computation": false,
    "reason": "The commit swaps the parameters um and uc in the bilinear form without eliminating any redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_1015": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces the FILE handler with std::ofstream for file handling, which improves code readability and safety but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1016": {
    "eliminates_redundant_computation": false,
    "reason": "The commit fixes memory cleanup by ensuring correct deletion of arrays rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_1017": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a nested loop that performs repeated computations with a block-wise insertion method, eliminating redundant calculations.",
    "redundancy_type": "LI"
  },
  "dataset_1018": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a matrix-wide operation that could lead to unnecessary computations with a targeted iteration over each matrix entry to set them to zero.",
    "redundancy_type": "RC"
  },
  "dataset_1019": {
    "eliminates_redundant_computation": true,
    "reason": "The change moves the temporary 'global_indices' result directly to a reference, avoiding unnecessary copying, which improves performance.",
    "redundancy_type": "RC"
  },
  "dataset_1020": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a timer for performance measurement but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1021": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes an argument in the BoostGraph constructor but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1022": {
    "eliminates_redundant_computation": true,
    "reason": "The commit improves efficiency by eliminating the need for repeated accesses and copying operations within a loop.",
    "redundancy_type": "LI"
  },
  "dataset_1023": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the redundant creation of the '_value' vector inside the loop, which was creating a new vector for each iteration, thus eliminating unnecessary computation.",
    "redundancy_type": "LI"
  },
  "dataset_1024": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the logic to avoid repeated checks on the visited array, ensuring that the update to `visited[e->index()]` occurs only when it has not been visited yet.",
    "redundancy_type": "CE"
  },
  "dataset_1025": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a call to clear() with swap(), which is a more efficient way to release memory in the vector context.",
    "redundancy_type": "RC"
  },
  "dataset_1026": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates unnecessary variable assignments and combines conditions to simplify the logic in the loop.",
    "redundancy_type": "LI"
  },
  "dataset_1027": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a matrix type to a vector type, optimizing type handling but does not eliminate redundancy.",
    "redundancy_type": null
  },
  "dataset_1028": {
    "eliminates_redundant_computation": true,
    "reason": "The commit moves the vector allocation for x0 outside of the loop to avoid repeated allocations.",
    "redundancy_type": "LI"
  },
  "dataset_1029": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the performance by clearing the tensor only when necessary, reducing unnecessary calls to setZero in another part of the code.",
    "redundancy_type": "UE"
  },
  "dataset_1030": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces unsorted comparison with sorted arrays, ensuring that the results are compared correctly without duplicate evaluations.",
    "redundancy_type": "RF"
  },
  "dataset_1031": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces repeated access to the mesh connectivity with a single variable that stores the result, ensuring that the computation is only performed once.",
    "redundancy_type": "RF"
  },
  "dataset_1032": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates the need for unnecessary memory allocation by pre-counting the occurrences of a value, thus optimizing the allocation of the indices vector.",
    "redundancy_type": "LI"
  },
  "dataset_1033": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds timing functionality without removing any redundant calculations.",
    "redundancy_type": null
  },
  "dataset_1034": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reserves the vector size to avoid reallocations during the loop, thus eliminating potential unnecessary computations related to memory management.",
    "redundancy_type": "LI"
  },
  "dataset_1035": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a redundant computation for topological dimension that derives from the cell type with a more direct method call, eliminating unnecessary processing.",
    "redundancy_type": "RC"
  },
  "dataset_1036": {
    "eliminates_redundant_computation": true,
    "reason": "The commit includes a line that zeroes out the working memory of 'BA', which helps prevent unnecessary re-initialization of the buffer within the function.",
    "redundancy_type": "RC"
  },
  "dataset_1037": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a for loop that copies elements into a vector with a constructor that does the same in one operation, eliminating unnecessary computations.",
    "redundancy_type": "LI"
  },
  "dataset_1038": {
    "eliminates_redundant_computation": false,
    "reason": "The patch changes from `min()` to `lowest()` which is a more appropriate function for setting lower bounds but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1039": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary delete operation that would have been executed on the future object's result, thereby eliminating redundant cleanup code.",
    "redundancy_type": "UE"
  },
  "dataset_1040": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the connection to ensure that the slot handling for deserialization is only executed once, thus eliminating potential repeated executions.",
    "redundancy_type": "RF"
  },
  "dataset_1041": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a deep copy of image data that was unnecessary, thereby eliminating expensive redundant operations.",
    "redundancy_type": "UE"
  },
  "dataset_1042": {
    "eliminates_redundant_computation": false,
    "reason": "The patch adds new functionality without removing any existing computations, hence it does not eliminate redundancy.",
    "redundancy_type": null
  },
  "dataset_1043": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces istringstream with atol, which reduces overhead by avoiding unnecessary object creation for string stream parsing.",
    "redundancy_type": "RC"
  },
  "dataset_1044": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary pre-computation of the total length for reserving the string, allowing it to grow incrementally instead.",
    "redundancy_type": "RC"
  },
  "dataset_1045": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces repeated access to 'entities.receivers_[connection_id]' with a local reference 'receiver', reducing redundant lookups.",
    "redundancy_type": "RF"
  },
  "dataset_1046": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies an array to prevent out-of-bounds reads without addressing redundant computations.",
    "redundancy_type": null
  },
  "dataset_1047": {
    "eliminates_redundant_computation": true,
    "reason": "The patch includes a check to avoid allocating a new ACE_Message_Block when the size is sufficient, thus preventing unnecessary object creation.",
    "redundancy_type": "UE"
  },
  "dataset_1048": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the deserialization process for better readability and safety, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1049": {
    "eliminates_redundant_computation": true,
    "reason": "The commit moves value calculations outside of conditional checks, ensuring they are computed only once rather than repeatedly.",
    "redundancy_type": "LI"
  },
  "dataset_1050": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop that initializes an array with a single call to memset, reducing redundant computations.",
    "redundancy_type": "LI"
  },
  "dataset_1051": {
    "eliminates_redundant_computation": true,
    "reason": "The patch modifies the `is_clean()` method to avoid redundant checks and utilize a more efficient method for determining if topics are clean, particularly by counting non-BIT topics dynamically.",
    "redundancy_type": "RC"
  },
  "dataset_1052": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces repeated calls to generate random characters with a more efficient fixed array lookup, reducing redundant computations.",
    "redundancy_type": "RF"
  },
  "dataset_1053": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a conditional check for pixel-interleaved datasets to use a more efficient BlockBasedRasterIO function, thus preventing redundant processing in certain cases.",
    "redundancy_type": "RF"
  },
  "dataset_1054": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes performance by skipping layers without features to avoid unnecessary processing.",
    "redundancy_type": "RF"
  },
  "dataset_1055": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds an option to create a temporary TIFF file as sparse, but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_1056": {
    "eliminates_redundant_computation": true,
    "reason": "The commit comments out a cleanup operation that can be time-consuming, implying it avoids unnecessary computation during execution.",
    "redundancy_type": "UE"
  },
  "dataset_1057": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds transaction management with BEGIN and COMMIT without eliminating any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1058": {
    "eliminates_redundant_computation": true,
    "reason": "The patch avoids redundant calls to PQntuples by checking if the cursor returned any rows before comparing with nResultOffset.",
    "redundancy_type": "RF"
  },
  "dataset_1059": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not eliminate any redundant computations but rather adds validation for the number of features returned.",
    "redundancy_type": null
  },
  "dataset_1060": {
    "eliminates_redundant_computation": false,
    "reason": "The patch adjusts a buffer size constant, but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_1061": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the calculation of 'nCacheUsed' by eliminating unnecessary conditional logic and directly updating it based on 'nDataFilled'.",
    "redundancy_type": "RC"
  },
  "dataset_1062": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates conditional checks but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1063": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary checks for journal files for URLs starting with '/vsicurl/', which could prevent redundant function calls in certain cases.",
    "redundancy_type": "RF"
  },
  "dataset_1064": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary computation by avoiding the evaluation of costly ORDER BY clauses during layer creation.",
    "redundancy_type": "RC"
  },
  "dataset_1065": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a database setting to improve performance but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1066": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on ensuring specific headers are not written by libjpeg, rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_1067": {
    "eliminates_redundant_computation": false,
    "reason": "The commit primarily focuses on handling the potential overflow in computed dimensions rather than removing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1068": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the GetFeatureCount() method by replacing potentially redundant calls with a single optimized SQL query.",
    "redundancy_type": "RC"
  },
  "dataset_1069": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes the GetFeatureCount() method by avoiding unnecessary calculations when certain SQL statements are detected.",
    "redundancy_type": "UE"
  },
  "dataset_1070": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces a low-level memory operation with a higher-level C++ function, improving readability and potentially safety, but it does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1071": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a complex and redundant hash computation with a simpler atomic counter to generate unique identifiers.",
    "redundancy_type": "RF"
  },
  "dataset_1072": {
    "eliminates_redundant_computation": true,
    "reason": "The commit ensures that the function returns early if there are no children, eliminating unnecessary upper layers of logic that would execute later.",
    "redundancy_type": "LI"
  },
  "dataset_1073": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a new convenience function for combining hashes, but does not eliminate any redundant computations from existing code.",
    "redundancy_type": null
  },
  "dataset_1074": {
    "eliminates_redundant_computation": true,
    "reason": "This commit introduces a caching mechanism for script parsing that prevents repeated parsing of the same stream when conditions are met, thus eliminating unnecessary computation.",
    "redundancy_type": "UE"
  },
  "dataset_1075": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the computation of the screen space error by eliminating unnecessary square root calculation, improving efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_1076": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds optimized estimations for vertex and index counts based on mDualCells size, which avoids repeated calculations in later rendering calls.",
    "redundancy_type": "RC"
  },
  "dataset_1077": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a potentially costly function call with a more efficient string formatting operation.",
    "redundancy_type": "UE"
  },
  "dataset_1078": {
    "eliminates_redundant_computation": true,
    "reason": "Replaced a nested loop that manually sets pixel values with a single call to std::fill, optimizing the code and reducing the overall computational expense.",
    "redundancy_type": "LI"
  },
  "dataset_1079": {
    "eliminates_redundant_computation": true,
    "reason": "The patch modifies the log creation in Emscripten to prevent unnecessary writing to the virtual file system, which enhances performance.",
    "redundancy_type": "RC"
  },
  "dataset_1080": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a sleep mechanism to reduce CPU usage while waiting for user interaction, but it does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_1081": {
    "eliminates_redundant_computation": true,
    "reason": "Changed the icon variable from a copy to a reference to avoid unnecessary copying.",
    "redundancy_type": "RF"
  },
  "dataset_1082": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids recalculating the geometry of the QTreeWidget by temporarily setting its visibility to false.",
    "redundancy_type": "UE"
  },
  "dataset_1083": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors the tree traversal to avoid multiple calls to 'syncCollapsedItem' for child items, reducing unnecessary calls when they are already being handled.",
    "redundancy_type": "RF"
  },
  "dataset_1084": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts logic for skipping frames but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1085": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on clearing cache and memory management rather than addressing redundant computations in the code.",
    "redundancy_type": null
  },
  "dataset_1086": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces the use of scaled dimensions with actual dimensions of the source image, eliminating redundant scaling calculations.",
    "redundancy_type": "RC"
  },
  "dataset_1087": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a temporary vector to store flipped points and directly swaps the Y coordinates, reducing memory overhead and unnecessary computations.",
    "redundancy_type": "LI"
  },
  "dataset_1088": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a manual sorting algorithm with std::sort, which is more efficient and eliminates potential bugs.",
    "redundancy_type": "RC"
  },
  "dataset_1089": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a linear search through 'Points' with a binary search, optimizing the computation for checking point existence.",
    "redundancy_type": "RC"
  },
  "dataset_1090": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary recalculation of values by avoiding repeated calls to GetLong with the same index.",
    "redundancy_type": "UE"
  },
  "dataset_1091": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the calculation of max_frames to eliminate unnecessary computation by constraining it to a maximum of 64 frames, thus optimizing resource usage.",
    "redundancy_type": "RC"
  },
  "dataset_1092": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary cache clearing checks that could lead to performance degradation.",
    "redundancy_type": "UE"
  },
  "dataset_1093": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant checks for the video cache readiness by consolidating them into a single conditional statement.",
    "redundancy_type": "CE"
  },
  "dataset_1094": {
    "eliminates_redundant_computation": false,
    "reason": "The commit reduces the number of pre-roll frames from 24 to 12 but does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_1095": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces unnecessary checks in conditional statements related to video cache readiness, improving efficiency.",
    "redundancy_type": "CE"
  },
  "dataset_1096": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a recalculation of the discount factor with a stored result, avoiding unnecessary computation.",
    "redundancy_type": "UE"
  },
  "dataset_1097": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to avoid unnecessary updates to the evaluation date if it hasn't changed, eliminating redundant assignments.",
    "redundancy_type": "UE"
  },
  "dataset_1098": {
    "eliminates_redundant_computation": false,
    "reason": "The change modifies the lambda parameter type from value to reference, but does not eliminate redundancy.",
    "redundancy_type": null
  },
  "dataset_1099": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces Cholesky decomposition with a different algorithm but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1100": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies an error handling mechanism but does not reduce redundant computations.",
    "redundancy_type": null
  },
  "dataset_1101": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a potentially redundant assignment of a new shared pointer with a direct nullptr assignment, reducing unnecessary object creation.",
    "redundancy_type": "RC"
  },
  "dataset_1102": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents the unnecessary execution of the applyFixings function when the end date has not moved forward, reducing redundant computations.",
    "redundancy_type": "RF"
  },
  "dataset_1103": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a lock type from shared to unique, which does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1104": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes a potentially redundant string comparison to a more efficient check for emptiness.",
    "redundancy_type": "RF"
  },
  "dataset_1105": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes a repeated computation of scenario NPV by utilizing a range-based for loop.",
    "redundancy_type": "RC"
  },
  "dataset_1106": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not appear to eliminate any redundant computation; it modifies the handling of a survival probability in a specific case rather than eliminating repeated calculations.",
    "redundancy_type": null
  },
  "dataset_1107": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the value of 'n' to a smaller constant but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_1108": {
    "eliminates_redundant_computation": false,
    "reason": "The changes modify parameter values but do not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1109": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the loop by iterating over fewer keys, thus reducing unnecessary computations within the loop.",
    "redundancy_type": "LI"
  },
  "dataset_1110": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to return the variable directly if conditions indicate no need for further computation, thus avoiding redundant calculations.",
    "redundancy_type": "RC"
  },
  "dataset_1111": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies a conditional statement, reducing the need to call 'cashflow->date()' multiple times with the same input.",
    "redundancy_type": "LI"
  },
  "dataset_1112": {
    "eliminates_redundant_computation": false,
    "reason": "The commit increases the buffer size but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1113": {
    "eliminates_redundant_computation": true,
    "reason": "The patch avoids repeated hashmap access by storing the result of get(key) in a variable and reusing it instead of calling get(key) multiple times.",
    "redundancy_type": "RF"
  },
  "dataset_1114": {
    "eliminates_redundant_computation": false,
    "reason": "The commit increases the default tile provider cache size but does not address redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_1115": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not eliminate any redundant computation; it modifies the logic for handling geometry conversion errors.",
    "redundancy_type": null
  },
  "dataset_1116": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the calculation for block size to use a consistent formula, removing unnecessary operations in the original computation.",
    "redundancy_type": "RC"
  },
  "dataset_1117": {
    "eliminates_redundant_computation": true,
    "reason": "Optimizes the addition of XML child nodes by eliminating redundant checks and simplifying the linking process.",
    "redundancy_type": "CE"
  },
  "dataset_1118": {
    "eliminates_redundant_computation": true,
    "reason": "The commit consolidates the copying of elements into a single function call, reducing repeated memory operations.",
    "redundancy_type": "RF"
  },
  "dataset_1119": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the conditionals to ensure operations are only performed when necessary, reducing unnecessary computations on block sizes.",
    "redundancy_type": "LI"
  },
  "dataset_1120": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a conditional that prevents redundant execution of 'PRAGMA synchronous = OFF' for new files.",
    "redundancy_type": "RC"
  },
  "dataset_1121": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces optimized Huffman coding but does not eliminate any unnecessary computations.",
    "redundancy_type": null
  },
  "dataset_1122": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the default value of max_memory_to_use for JPEG compression but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1123": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the order of mutex usage without eliminating any redundant calculations.",
    "redundancy_type": null
  },
  "dataset_1124": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a conditional check but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1125": {
    "eliminates_redundant_computation": true,
    "reason": "The patch improves efficiency by eliminating redundant attempts to acquire a mutex and handling specific cases more directly, thus avoiding unnecessary checks.",
    "redundancy_type": "RC"
  },
  "dataset_1126": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not eliminate any redundant computations; it only modifies whitespace.",
    "redundancy_type": null
  },
  "dataset_1127": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant creation of the mutex by checking if it already exists before acquiring it.",
    "redundancy_type": "RF"
  },
  "dataset_1128": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary return statement in the default case of a switch statement, allowing for better cleanup without early exit.",
    "redundancy_type": "CE"
  },
  "dataset_1129": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a memory allocation and copying with string handling, reducing unnecessary memory management complexity.",
    "redundancy_type": "RC"
  },
  "dataset_1130": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the export of 2D linestrings by avoiding unnecessary computations based on invariant conditions.",
    "redundancy_type": "LI"
  },
  "dataset_1131": {
    "eliminates_redundant_computation": true,
    "reason": "The commit fixes a redundant conditional check on the block size, ensuring that the block is reused only when the sizes are equal, rather than when the block size is greater than or equal to the requested size.",
    "redundancy_type": "CE"
  },
  "dataset_1132": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a check to prevent integer overflow rather than eliminating any redundant calculations.",
    "redundancy_type": null
  },
  "dataset_1133": {
    "eliminates_redundant_computation": false,
    "reason": "The change modifies a conditional check to avoid negative memory allocation, but does not eliminate redundant computation.",
    "redundancy_type": null
  },
  "dataset_1134": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the computation of nRecords to avoid an unnecessary recalculation step, thus improving efficiency.",
    "redundancy_type": "UE"
  },
  "dataset_1135": {
    "eliminates_redundant_computation": false,
    "reason": "The commit addresses a potential integer overflow issue but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1136": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the type of a variable from int16 to uint16 for better data representation, not for eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_1137": {
    "eliminates_redundant_computation": false,
    "reason": "The commit improves the calculation of color table values but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1138": {
    "eliminates_redundant_computation": false,
    "reason": "The commit increases the default cache size but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1139": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the computation of min/max from approximate to exact rather than eliminating redundancy.",
    "redundancy_type": null
  },
  "dataset_1140": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a resource recovery call on failure, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1141": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the loop condition to prevent unnecessary calls to TIFFReadDirectory() when there is only one directory, avoiding redundant computations.",
    "redundancy_type": "RF"
  },
  "dataset_1142": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors the IReadBlock method to remove tail recursion, which can lead to stack overflows and eliminates repeated function calls within recursive depth.",
    "redundancy_type": "RF"
  },
  "dataset_1143": {
    "eliminates_redundant_computation": true,
    "reason": "The commit uses addSubLineString() to replace a manual loop process, minimizing repetitive computations and improving performance.",
    "redundancy_type": "RC"
  },
  "dataset_1144": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids an unnecessary extra copy of data when loading into the cache block, thereby eliminating redundant data operations.",
    "redundancy_type": "RC"
  },
  "dataset_1145": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a condition that allows for blocked I/O based on buffer size, which eliminates unnecessary computations when dealing with small request buffers.",
    "redundancy_type": "RC"
  },
  "dataset_1146": {
    "eliminates_redundant_computation": false,
    "reason": "The patch improves rounding in calculations, but it does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1147": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a duplicate call to CSLDestroy(papszArgv), enhancing memory cleanup.",
    "redundancy_type": "CE"
  },
  "dataset_1148": {
    "eliminates_redundant_computation": true,
    "reason": "The commit updates the way rows are added to a serialized XML structure to avoid unnecessary linked list traversals.",
    "redundancy_type": "RF"
  },
  "dataset_1149": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the string format used in GetFieldAsString(), but it does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1150": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the default block size used in processing without eliminating any redundant calculations.",
    "redundancy_type": null
  },
  "dataset_1151": {
    "eliminates_redundant_computation": false,
    "reason": "The commit primarily addresses a memory leak issue without removing redundant computations.",
    "redundancy_type": null
  },
  "dataset_1152": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts the default cache size and modifies the threshold for interpreting cache size values. It does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1153": {
    "eliminates_redundant_computation": false,
    "reason": "The commit increases the value of CURSOR_PAGE for performance tuning but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1154": {
    "eliminates_redundant_computation": false,
    "reason": "This commit replaces the use of M_PI with a local constant GWK_PI, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1155": {
    "eliminates_redundant_computation": true,
    "reason": "The patch modifies DecompressMask() to prevent repeated decompression when pabyCMask is NULL, thus eliminating unnecessary computation.",
    "redundancy_type": "RC"
  },
  "dataset_1156": {
    "eliminates_redundant_computation": true,
    "reason": "The commit improves performance by loading all bands in a single operation instead of potentially repeating operations for each band.",
    "redundancy_type": "RC"
  },
  "dataset_1157": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a hard-coded increment with a variable, enhancing the flexibility of the code.",
    "redundancy_type": "RC"
  },
  "dataset_1158": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces unnecessary calculations by updating the object count only when needed, avoiding redundant memory operations.",
    "redundancy_type": "LI"
  },
  "dataset_1159": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the initialization of ffmpeg to occur only once, preventing repeated calls to `av_register_all()` and `av_register_input_format()`, which are unnecessary if already initialized.",
    "redundancy_type": "RF"
  },
  "dataset_1160": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts the analyze duration for mpeg-ts but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1161": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates a repeated call to GetRequestHandle() by storing the result in hWaitEvents for reuse.",
    "redundancy_type": "RF"
  },
  "dataset_1162": {
    "eliminates_redundant_computation": false,
    "reason": "The commit removes a configuration setting without addressing redundant computations.",
    "redundancy_type": null
  },
  "dataset_1163": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a check to avoid processing when filtering is unnecessary, thereby optimizing performance.",
    "redundancy_type": "RC"
  },
  "dataset_1164": {
    "eliminates_redundant_computation": true,
    "reason": "The patch avoids a redundant call to Append on the output buffer when it is empty, optimizing memory handling.",
    "redundancy_type": "RF"
  },
  "dataset_1165": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a computation of max_analyze_duration but does not eliminate redundancy.",
    "redundancy_type": null
  },
  "dataset_1166": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a method to synchronize decoders with the process thread but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1167": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts buffer size for network streams but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_1168": {
    "eliminates_redundant_computation": true,
    "reason": "The patch modifies the seek operation to account for an additional 4-byte header, avoiding extra computation in seeking performance.",
    "redundancy_type": "RC"
  },
  "dataset_1169": {
    "eliminates_redundant_computation": true,
    "reason": "The patch changes the logic from reading all data at once to reading in fixed-size chunks, thereby optimizing the read operation used in loops.",
    "redundancy_type": "LI"
  },
  "dataset_1170": {
    "eliminates_redundant_computation": false,
    "reason": "The commit fixes a calculation error in buffer size but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1171": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors a manual loop removal to leverage std::remove_if, eliminating redundant iterations over the collection.",
    "redundancy_type": "RC"
  },
  "dataset_1172": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors the comparison of timestamps to avoid unnecessary computations when the timestamps are not set.",
    "redundancy_type": "LI"
  },
  "dataset_1173": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not eliminate redundant computations; it modifies the existing logic for calculating 'rtAvgTime' without removing any repetition.",
    "redundancy_type": null
  },
  "dataset_1174": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents unnecessary iterations by adjusting the loop condition, avoiding processing beyond the valid buffer size.",
    "redundancy_type": "LI"
  },
  "dataset_1175": {
    "eliminates_redundant_computation": false,
    "reason": "The commit is more about setting a minimum value rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_1176": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adjusts the thread count calculation to the actual number of CPU threads, eliminating the redundant multiplication.",
    "redundancy_type": "RC"
  },
  "dataset_1177": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repeated computation of CRC64 with a streamlined method, eliminating unnecessary intermediate steps.",
    "redundancy_type": "RF"
  },
  "dataset_1178": {
    "eliminates_redundant_computation": true,
    "reason": "The commit consolidates repeated calculations of rectangle dimensions and properties by storing them in a variable, avoiding redundant calls to the 'rect()' method.",
    "redundancy_type": "RC"
  },
  "dataset_1179": {
    "eliminates_redundant_computation": true,
    "reason": "The commit moves the computation of 'itemY' outside of the loop by using 'textPosition', reducing repeated calculations within each iteration.",
    "redundancy_type": "LI"
  },
  "dataset_1180": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies parameters for drawing methods but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1181": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates redundant multiplication within a loop by calculating the text position outside the loop, improving performance.",
    "redundancy_type": "LI"
  },
  "dataset_1182": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors text rendering calls to use packed parameter methods, reducing redundancy in argument passing.",
    "redundancy_type": "RF"
  },
  "dataset_1183": {
    "eliminates_redundant_computation": true,
    "reason": "The patch changes repeated calls to positionX() and positionY() to a single call to position() by utilizing a packed parameter, reducing redundant function calls.",
    "redundancy_type": "RF"
  },
  "dataset_1184": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the drawing calls by using pre-defined rectangles and positions, eliminating unnecessary parameter calculations.",
    "redundancy_type": "LI"
  },
  "dataset_1185": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies calls by eliminating repeated calculations of positions for drawing, using pre-defined constants for rectangles instead.",
    "redundancy_type": "LI"
  },
  "dataset_1186": {
    "eliminates_redundant_computation": true,
    "reason": "Replaced repetitive computations using `rect().x()` and `rect().y()` with a single call to `position()`, reducing redundant calculations.",
    "redundancy_type": "RC"
  },
  "dataset_1187": {
    "eliminates_redundant_computation": true,
    "reason": "Eliminates unnecessary type conversion from int to float and back to int, simplifying the computation.",
    "redundancy_type": "UE"
  },
  "dataset_1188": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces static_cast with std::floor to precisely handle division results, avoiding potential casting overhead.",
    "redundancy_type": "RC"
  },
  "dataset_1189": {
    "eliminates_redundant_computation": true,
    "reason": "The commit caches the result of a computation that was being repeated multiple times, thus avoiding redundant calculations.",
    "redundancy_type": "RC"
  },
  "dataset_1190": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant variable assignments for rasterX and rasterY that were unnecessary due to the packed parameter call in renderer.drawSubImageRotated.",
    "redundancy_type": "RF"
  },
  "dataset_1191": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces local random number generation code within a function which does not eliminate any redundancy, but instead encapsulates it.",
    "redundancy_type": null
  },
  "dataset_1192": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the way map position is calculated to eliminate unnecessary static_cast usage, streamlining the computation.",
    "redundancy_type": "UE"
  },
  "dataset_1193": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a nested for-loop with a single loop that utilizes a predefined set of offsets, eliminating repeated calculations of positions.",
    "redundancy_type": "LI"
  },
  "dataset_1194": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces duplicate calls to the method 'getTile' with the same parameters, thereby eliminating redundant calculations.",
    "redundancy_type": "RC"
  },
  "dataset_1195": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes duplicated calculations by replacing repeated calls for x and y coordinates with a single position variable.",
    "redundancy_type": "RF"
  },
  "dataset_1196": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces redundancy by consolidating multiple calculations into a single computation for the position variable.",
    "redundancy_type": "RC"
  },
  "dataset_1197": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces repeated distance calculations with squared distance comparisons, which eliminates unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_1198": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes a redundant calculation of `currentTile->position()` by storing the value in a variable and reusing it, thus eliminating repeated computation.",
    "redundancy_type": "RF"
  },
  "dataset_1199": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces redundant type casting of the same value by using std::floor, thereby simplifying the computation.",
    "redundancy_type": "RF"
  },
  "dataset_1200": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a comparison function to prioritize the cost of routes over their length, but it does not address redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_1201": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces a while loop with a more efficient standard library function but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1202": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a condition that checks if `setSkins()` has already been called, which is unnecessary since it is called only once from the constructor.",
    "redundancy_type": "UE"
  },
  "dataset_1203": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a traditional for loop with a range-for loop, which simplifies the code and removes the need for explicit indexing.",
    "redundancy_type": "LI"
  },
  "dataset_1204": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary computation related to fetching command center resources, consolidating it due to caching of mPlayerResources.",
    "redundancy_type": "UE"
  },
  "dataset_1205": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates the direct modification of mPlayerResources by computing the cost only once and reusing it instead of recalculating.",
    "redundancy_type": "RC"
  },
  "dataset_1206": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a calculation that modifies the player's total resources with a direct update to the command center's storage, eliminating unnecessary intermediate state updates.",
    "redundancy_type": "RC"
  },
  "dataset_1207": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a recalculation with a stored value, preventing unnecessary recomputation of the line height.",
    "redundancy_type": "UE"
  },
  "dataset_1208": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a check for raster width, returning early if it's less than or equal to 64, thereby avoiding redundant calculations.",
    "redundancy_type": "LI"
  },
  "dataset_1209": {
    "eliminates_redundant_computation": true,
    "reason": "Changed from copying each fragment status to referencing it, reducing object copy overhead in the loop.",
    "redundancy_type": "LI"
  },
  "dataset_1210": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes a computation by explicitly casting 'nPointCount' to 'size_t', potentially eliminating implicit conversions in future computations.",
    "redundancy_type": "RC"
  },
  "dataset_1211": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces the assignment of a potentially large string with a move operation, reducing unnecessary copy operations.",
    "redundancy_type": "RF"
  },
  "dataset_1212": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the lambda function to take a reference, avoiding unnecessary copies when parsing DMS strings.",
    "redundancy_type": "RF"
  },
  "dataset_1213": {
    "eliminates_redundant_computation": false,
    "reason": "The patch addresses potential integer overflow issues, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1214": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds checks to prevent integer overflow when adding geometries to a collection, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1215": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes the code for the case when nCount == 1 by avoiding unnecessary computations associated with handling a vector for success when a single transformation is requested.",
    "redundancy_type": "RC"
  },
  "dataset_1216": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes the loop that calls addGeometry, replacing it with a direct assignment and cloning of geometries, reducing unnecessary function calls.",
    "redundancy_type": "RF"
  },
  "dataset_1217": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the handler removal process by calling a dedicated function instead of iterating through interfaces, thereby reducing unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_1218": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a variable assignment with a direct call, eliminating unnecessary intermediate storage and preserving the calculation of Q.",
    "redundancy_type": "UE"
  },
  "dataset_1219": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates computations related to unmeasured parameters by explicitly zeroing them, preventing unnecessary calculations elsewhere in the code.",
    "redundancy_type": "RF"
  },
  "dataset_1220": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies how effective cost is calculated but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1221": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the asynchronous log queue size but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_1222": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a setting from 1 to 0 but does not address any redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_1223": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes push_back to emplace_back for efficiency, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1224": {
    "eliminates_redundant_computation": true,
    "reason": "The commit skips iterations for hash types that are not found, preventing unnecessary computations within the loop.",
    "redundancy_type": "LI"
  },
  "dataset_1225": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the computation of stride by adjusting the calculation based on aligned values, which reduces unnecessary recalculation.",
    "redundancy_type": "RC"
  },
  "dataset_1226": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the number of jitter detection samples but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1227": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the way memory is allocated for AC3HeaderInfo but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1228": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces repeated random function calls with a single call, reducing unnecessary computation within the loop.",
    "redundancy_type": "RF"
  },
  "dataset_1229": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces repeated calls to getKingdom() with a set that collects unique values, which reduces the number of duplicate checks and calculations.",
    "redundancy_type": "RF"
  },
  "dataset_1230": {
    "eliminates_redundant_computation": true,
    "reason": "Introduces a check to avoid unnecessary computations of distance for pixels outside the radius, enhancing efficiency.",
    "redundancy_type": "LI"
  },
  "dataset_1231": {
    "eliminates_redundant_computation": false,
    "reason": "The commit addresses a memory leak by deleting allocated memory but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1232": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces object copies with constant references to avoid unnecessary object creation.",
    "redundancy_type": "RF"
  },
  "dataset_1233": {
    "eliminates_redundant_computation": false,
    "reason": "The commit optimizes control flow with a do-while loop but does not address any redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_1234": {
    "eliminates_redundant_computation": false,
    "reason": "The commit is focused on freeing memory by calling deleteLater() on an object which does not directly relate to eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_1235": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a duplicated iteration over the cards with a direct iteration, improving efficiency.",
    "redundancy_type": "RF"
  },
  "dataset_1236": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces the repeated creation of new mesh objects with a call to a method that retrieves an existing mesh, thereby avoiding unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_1237": {
    "eliminates_redundant_computation": true,
    "reason": "The commit improves array copying by initializing a vector directly from the array, reducing redundant assignments.",
    "redundancy_type": "RF"
  },
  "dataset_1238": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes data types for index subscripting but does not eliminate any computations.",
    "redundancy_type": null
  },
  "dataset_1239": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds an optimization but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1240": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces an early return if the data is already sorted, preventing unnecessary computations during sorting.",
    "redundancy_type": "RC"
  },
  "dataset_1241": {
    "eliminates_redundant_computation": false,
    "reason": "The changes update parameters for the inplace_radix_sort function but do not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1242": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant call to 'rotate' by using its return value instead.",
    "redundancy_type": "UE"
  },
  "dataset_1243": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the order of conditions in a loop to prevent redundant evaluations.",
    "redundancy_type": "CE"
  },
  "dataset_1244": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces std::distance with a direct subtraction to compute the size, eliminating unnecessary computation.",
    "redundancy_type": "RC"
  },
  "dataset_1245": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the calculation by combining the decrement of 'i' and the conditional check into one statement, which reduces unnecessary evaluations.",
    "redundancy_type": "LI"
  },
  "dataset_1246": {
    "eliminates_redundant_computation": true,
    "reason": "The condition was simplified to eliminate unnecessary checks when both nodes are not of certain types.",
    "redundancy_type": "CE"
  },
  "dataset_1247": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces std::vector with std::list for efficiency in erasing elements, optimizing repeated erase operations.",
    "redundancy_type": "RF"
  },
  "dataset_1248": {
    "eliminates_redundant_computation": false,
    "reason": "The changes focus on modifying the type casting of double values to integers and adding handling for boolean values, rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_1249": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces direct access to floating-point coordinates with rounded values using ceil() and floor(), preventing unnecessary floating-point operations during rendering.",
    "redundancy_type": "UE"
  },
  "dataset_1250": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the calculation of ideal parallel renders based on available RAM by conditionally adjusting the multiplier based on whether the instance is a viewer.",
    "redundancy_type": "RC"
  },
  "dataset_1251": {
    "eliminates_redundant_computation": true,
    "reason": "Switching to BoundingRectViewportUpdate improves efficiency by reducing unnecessary redraws.",
    "redundancy_type": "RC"
  },
  "dataset_1252": {
    "eliminates_redundant_computation": true,
    "reason": "The commit suggests adjustments to avoid unnecessary computations related to ticking based on the data type, thereby optimizing the paintEvent function.",
    "redundancy_type": "UE"
  },
  "dataset_1253": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes performance by limiting the call to 'forceComputeInputDependentDataOnAllTrees' only when pasting more than one node.",
    "redundancy_type": "RF"
  },
  "dataset_1254": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces 'erase(begin())' with 'pop_front()', effectively optimizing the removal of the first element in a queue without redundant operations.",
    "redundancy_type": "RC"
  },
  "dataset_1255": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces unnecessary calls to 'erase(begin())' with 'pop_front()', which is more efficient and eliminates redundant computation.",
    "redundancy_type": "RC"
  },
  "dataset_1256": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the default value for a setting but does not address any redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_1257": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a call to std::fill_n() with direct initialization of the array, which is more efficient.",
    "redundancy_type": "RC"
  },
  "dataset_1258": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary call to 'MakeWritable()', which adds overhead without benefit for a newly allocated buffer.",
    "redundancy_type": "UE"
  },
  "dataset_1259": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces an explicit memory initialization with an initializer for a boolean array, eliminating the redundant memset call.",
    "redundancy_type": "RC"
  },
  "dataset_1260": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes the GetName() method by avoiding redundant calls to GetBase() when the parent directory is root, thereby reducing unnecessary computations in high-frequency method calls.",
    "redundancy_type": "RF"
  },
  "dataset_1261": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a string comparison that involved a potentially unnecessary method call ('value.Equals()') with a more efficient 'strncmp()' function, thereby avoiding redundancy in the computation.",
    "redundancy_type": "RF"
  },
  "dataset_1262": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on changing the return type to avoid integer overflows rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_1263": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates redundant key lookups by using `emplace()` to insert and retrieve the item in a single operation.",
    "redundancy_type": "RF"
  },
  "dataset_1264": {
    "eliminates_redundant_computation": true,
    "reason": "The check for 'skip == 0' eliminates unnecessary reads when 'skip' is not zero, thus optimizing function execution.",
    "redundancy_type": "CE"
  },
  "dataset_1265": {
    "eliminates_redundant_computation": true,
    "reason": "The use of std::swap avoids unnecessary manipulation of the tag pool lock by swapping the items instead of individually removing and moving them.",
    "redundancy_type": "UE"
  },
  "dataset_1266": {
    "eliminates_redundant_computation": false,
    "reason": "The commit reduces the size of the ring buffer allocation but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1267": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the computation by eliminating the redundant call to MoveId() in favor of MoveRange(), and the queue length is calculated only once.",
    "redundancy_type": "RC"
  },
  "dataset_1268": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the array size from a larger constant to a smaller one, but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1269": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces an unnecessary use of a set to accumulate mounts and eliminates duplicate hashing logic inside a loop.",
    "redundancy_type": "LI"
  },
  "dataset_1270": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the unnecessary call to memset() to initialize the tags array, which is now directly initialized.",
    "redundancy_type": "RC"
  },
  "dataset_1271": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant sanitization function for database strings that are already sanitized, avoiding unnecessary CPU usage.",
    "redundancy_type": "UE"
  },
  "dataset_1272": {
    "eliminates_redundant_computation": false,
    "reason": "The commit increases the buffer size for the CURL option, but it does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1273": {
    "eliminates_redundant_computation": false,
    "reason": "The patch replaces std::memchr() with std::string_view::find() but does not eliminate redundancy.",
    "redundancy_type": null
  },
  "dataset_1274": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes notify_all() to notify_one() for efficiency, but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_1275": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary reading of a frame that is known to be too short, thus preventing redundant computations.",
    "redundancy_type": "RC"
  },
  "dataset_1276": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant calls to g_strdup() and reuses already duplicated pointers instead.",
    "redundancy_type": "RF"
  },
  "dataset_1277": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces multiple manual calls to g_free() with a single call to as_song_cleanup(), streamlining memory management.",
    "redundancy_type": "RF"
  },
  "dataset_1278": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates a redundant call to g_get_user_name() by comparing only the UID when the user is not null.",
    "redundancy_type": "RF"
  },
  "dataset_1279": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces the creation of a new RecordingInfo object with a reference to the existing curRecording, eliminating unnecessary object creation.",
    "redundancy_type": "RF"
  },
  "dataset_1280": {
    "eliminates_redundant_computation": true,
    "reason": "The commits modify SQL queries to prevent the selection of programs with past end times, reducing compute time for the scheduler.",
    "redundancy_type": "RC"
  },
  "dataset_1281": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the height variable for rendering previews but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1282": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the invocation of 'ClearAfterSeek()' to 'ClearAfterSeek(false)', which appears to modify behavior rather than eliminate redundancy.",
    "redundancy_type": null
  },
  "dataset_1283": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant calls to GetFirstImage() when coverimage is empty, which improves efficiency by avoiding unnecessary calculations.",
    "redundancy_type": "RF"
  },
  "dataset_1284": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies computations by storing 'real_frames' and using it in multiple calculations instead of recomputing it repeatedly.",
    "redundancy_type": "RC"
  },
  "dataset_1285": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates memory management by using std::unique_ptr, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1286": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the loop's upper limit, which does not eliminate redundant computations but alters the search depth.",
    "redundancy_type": null
  },
  "dataset_1287": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes repeated calls to the pvs function with the same inputs, improving efficiency.",
    "redundancy_type": "RF"
  },
  "dataset_1288": {
    "eliminates_redundant_computation": false,
    "reason": "The commit only increases the depth limit in a loop without addressing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1289": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a constant value but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1290": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes conditional branching to avoid redundant function invocations when not using a thread-safe signal.",
    "redundancy_type": "RF"
  },
  "dataset_1291": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not remove redundant computations but rather imposes a limit on a parameter.",
    "redundancy_type": null
  },
  "dataset_1292": {
    "eliminates_redundant_computation": false,
    "reason": "The commit alters the multiplier value in a computation but does not eliminate redundancy.",
    "redundancy_type": null
  },
  "dataset_1293": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces creating a new thread for each packet with a direct function call, reducing unnecessary thread creation overhead.",
    "redundancy_type": "RF"
  },
  "dataset_1294": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary checks in the condition for unlocking an achievement, thus avoiding redundant evaluations.",
    "redundancy_type": "CE"
  },
  "dataset_1295": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a duplicated conditional check, ensuring the condition is evaluated only once instead of twice.",
    "redundancy_type": "CE"
  },
  "dataset_1296": {
    "eliminates_redundant_computation": true,
    "reason": "The commit skips processing functions that are smaller than the specified window size, thereby avoiding unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_1297": {
    "eliminates_redundant_computation": true,
    "reason": "The commit uses std::move to eliminate a redundant copy of the vector, reducing unnecessary memory allocation.",
    "redundancy_type": "RC"
  },
  "dataset_1298": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repeated expression with a function call to ensure the value is only computed once.",
    "redundancy_type": "RC"
  },
  "dataset_1299": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant call to the bgr->rgb color conversion function, which was being executed twice unnecessarily.",
    "redundancy_type": "RF"
  },
  "dataset_1300": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates data structure types but does not change any computation patterns.",
    "redundancy_type": null
  },
  "dataset_1301": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a repeated call to `_unlockPromise.getFuture()` by replacing it with a single instance, reducing redundant computation.",
    "redundancy_type": "RF"
  },
  "dataset_1302": {
    "eliminates_redundant_computation": true,
    "reason": "The commit merges two conditional checks, reducing redundant execution of applying modifiers when reading HDF5 files.",
    "redundancy_type": "CE"
  },
  "dataset_1303": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes multiple checks and reuses the call to get the attribute, thereby reducing redundant evaluations.",
    "redundancy_type": "CE"
  },
  "dataset_1304": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the way an element is added to the vector, but it does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1305": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the refresh interval from 15 seconds to 1 second, but does not eliminate any existing redundant computations.",
    "redundancy_type": null
  },
  "dataset_1306": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a flag in a method call, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1307": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates redundant calculations of the MIDI message by moving the computation of 'msg' into the parameter of 'midi_write' without storing it in an intermediate variable.",
    "redundancy_type": "UE"
  },
  "dataset_1308": {
    "eliminates_redundant_computation": false,
    "reason": "This commit changes the output format of a time duration from milliseconds to microseconds without eliminating any computations.",
    "redundancy_type": null
  },
  "dataset_1309": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces multiple calls to `eigen_solver.eigenvalues()` with a single computation stored in a variable, eliminating potential redundant calculations.",
    "redundancy_type": "RC"
  },
  "dataset_1310": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the checking for transparency by reducing the number of pixel evaluations required.",
    "redundancy_type": "LI"
  },
  "dataset_1311": {
    "eliminates_redundant_computation": true,
    "reason": "Removed unnecessary repetitive computations by eliminating a loop that redundantly multiplied forward momenta by grid masses.",
    "redundancy_type": "LI"
  },
  "dataset_1312": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the output format for a performance test without eliminating any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1313": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces the vector for collecting args with a set to avoid duplication, ensuring that only unique arguments are processed.",
    "redundancy_type": "RC"
  },
  "dataset_1314": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors the code to eliminate redundant construction of the 'newPath' vector inside the loop and reduces the resizing operations by working directly with 'path'.",
    "redundancy_type": "LI"
  },
  "dataset_1315": {
    "eliminates_redundant_computation": true,
    "reason": "The commit consolidates the computation of the sum of arguments and includes it in the hash calculation, reducing repeated additions.",
    "redundancy_type": "RC"
  },
  "dataset_1316": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds conditions but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1317": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces multiple database operations with a single SQL query, eliminating redundant database calls.",
    "redundancy_type": "DB"
  },
  "dataset_1318": {
    "eliminates_redundant_computation": true,
    "reason": "The commit stores the old value of the flag to avoid unnecessary sending of updates when the flag has not changed, reducing bandwidth usage.",
    "redundancy_type": "UE"
  },
  "dataset_1319": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the comparison method from strncmp to memcmp, which may improve performance but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1320": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a less efficient method with a more efficient one that removes unnecessary computation steps.",
    "redundancy_type": "RF"
  },
  "dataset_1321": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds conditional checks to avoid unnecessary comparisons when comparing labels against a specific 'CHUNK_LABEL'.",
    "redundancy_type": "CE"
  },
  "dataset_1322": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a direct call to rand() with a calculated value that uses rand() once, eliminating the need for multiple calls with the same result.",
    "redundancy_type": "RF"
  },
  "dataset_1323": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the initialization of 'recordAttempts' to zero, suggesting that it is not needed and eliminates unnecessary computation.",
    "redundancy_type": "RC"
  },
  "dataset_1324": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a sorting operation that is unnecessary for the functionality.",
    "redundancy_type": "RC"
  },
  "dataset_1325": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary repeated calls to `fluid_settings_setint` with the same parameters, reducing redundant computation.",
    "redundancy_type": "RF"
  },
  "dataset_1326": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary buffer zeroing within a loop, which does not serve a purpose.",
    "redundancy_type": "LI"
  },
  "dataset_1327": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the way the file content is read to avoid unnecessary computation of the string directly from the stream and instead uses a buffer for more efficient reading.",
    "redundancy_type": "RC"
  },
  "dataset_1328": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an expensive read operation and associated logging that were executed on every call, which is unnecessary if those values don't change.",
    "redundancy_type": "UE"
  },
  "dataset_1329": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a test duration from 100 seconds to 5 seconds, which does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_1330": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on freeing memory resources once they are no longer needed, rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_1331": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a repeated call to priv->index(row), which eliminates redundant computation when creating the index.",
    "redundancy_type": "RF"
  },
  "dataset_1332": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a conditional check to only perform buffer copying when the buffer is not null, eliminating unnecessary operations.",
    "redundancy_type": "UE"
  },
  "dataset_1333": {
    "eliminates_redundant_computation": false,
    "reason": "The changes focus on resetting the FPS counter every hundred frames for improved benchmarking, but do not address redundant computation.",
    "redundancy_type": null
  },
  "dataset_1334": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a debug flag to improve unit test performance but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1335": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces memory allocation by utilizing a smaller size based on subfft_size instead of fft_size, preventing overallocation.",
    "redundancy_type": "RC"
  },
  "dataset_1336": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes duplicated calls to 'expect_equal', which simplifies the test and eliminates redundant checks.",
    "redundancy_type": "RF"
  },
  "dataset_1337": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to skip redundant initialization if 'sspi' is already set, preventing unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_1338": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a hard-coded loop limit with the array length, preventing unnecessary iteration over a fixed number of times.",
    "redundancy_type": "LI"
  },
  "dataset_1339": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents unnecessary negation of a value when the type is unsigned, avoiding redundant computations.",
    "redundancy_type": "UE"
  },
  "dataset_1340": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a sort operation with an insertion method that avoids unnecessary sorting for each insertion.",
    "redundancy_type": "RF"
  },
  "dataset_1341": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not appear to eliminate any redundant calculations but rather addresses memory management by ensuring proper cleanup of resources.",
    "redundancy_type": null
  },
  "dataset_1342": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates redundant calculations by directly assigning a constant value instead of performing a calculation that yields the same result.",
    "redundancy_type": "RC"
  },
  "dataset_1343": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the input parameter for the CalculateReward function to use a consistent height instead of the current height, which likely eliminates unnecessary recalculations of the reward based on changing block heights.",
    "redundancy_type": "UE"
  },
  "dataset_1344": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces logic to avoid excessive pruning during initial block download, which prevents unnecessary repeated pruning calculations.",
    "redundancy_type": "LI"
  },
  "dataset_1345": {
    "eliminates_redundant_computation": true,
    "reason": "The commit zeros out 'Z' before performing a contraction, eliminating unnecessary calculations if 'Z' was already populated.",
    "redundancy_type": "RC"
  },
  "dataset_1346": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the match-checking process by replacing multiple evaluations with a single call to std::memcmp, thus reducing unnecessary computations.",
    "redundancy_type": "LI"
  },
  "dataset_1347": {
    "eliminates_redundant_computation": true,
    "reason": "The commit skips unnecessary iterations (indices 1-127) in the palette selection, reducing repeated color comparisons.",
    "redundancy_type": "LI"
  },
  "dataset_1348": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a sleep call that likely introduces unnecessary delays in execution without providing functional benefit.",
    "redundancy_type": "UE"
  },
  "dataset_1349": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a check to skip unnecessary computations for circumspheres that are too deep inside the block.",
    "redundancy_type": "RC"
  },
  "dataset_1350": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a costly repeated eigenvalue computation with a single instance, which avoids redundant calculations during conditional checks.",
    "redundancy_type": "RF"
  },
  "dataset_1351": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates the redundant computation of 'strcspn' by storing its result in variable 's' for later use, avoiding recalculation.",
    "redundancy_type": "RC"
  },
  "dataset_1352": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a parameter in the function call but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1353": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant null check for the string pointer, optimizing the function call.",
    "redundancy_type": "CE"
  },
  "dataset_1354": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a call to 'increase()' with direct manipulation of the stack size, eliminating unnecessary computation related to function calls.",
    "redundancy_type": "RF"
  },
  "dataset_1355": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the drawing process by skipping unnecessary word draws that do not intersect with the drawing area, thus preventing redundant computations.",
    "redundancy_type": "RC"
  },
  "dataset_1356": {
    "eliminates_redundant_computation": false,
    "reason": "The patch modifies CSS selectors for better compatibility, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1357": {
    "eliminates_redundant_computation": true,
    "reason": "The patch defers the allocation of 'linebuf' to avoid potential memory leaks by ensuring it's allocated only when necessary.",
    "redundancy_type": "RC"
  },
  "dataset_1358": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the address family selection to avoid unnecessary IPv4 address resolution when IPv6 is disabled, thus improving efficiency in DNS requests.",
    "redundancy_type": "RC"
  },
  "dataset_1359": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a linear search through paragraphs with a binary search result, optimizing the computation by eliminating unnecessary checks.",
    "redundancy_type": "RC"
  },
  "dataset_1360": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces unnecessary redraws by checking if the highlight indices have changed before calling the redraw method.",
    "redundancy_type": "UE"
  },
  "dataset_1361": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces unnecessary calls to queueDrawRange by checking whether the relevant indices have changed before calling it.",
    "redundancy_type": "RC"
  },
  "dataset_1362": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an incorrect optimization check that would have led to bypassing necessary computations when the size of the previous float changes.",
    "redundancy_type": "CE"
  },
  "dataset_1363": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces repeated calculations with a maximum function to avoid unnecessary computations, specifically addressing CPU usage.",
    "redundancy_type": "RC"
  },
  "dataset_1364": {
    "eliminates_redundant_computation": false,
    "reason": "The commit limits the size when copying strings but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1365": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes a duplicated conditional check, ensuring that queueResize is called only if necessary, thus improving efficiency.",
    "redundancy_type": "CE"
  },
  "dataset_1366": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a conditional check to avoid unnecessary calls to queueResize when the size of 'words' is greater than 0.",
    "redundancy_type": "RF"
  },
  "dataset_1367": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the handling of market.getKlines() calls to avoid unnecessary repeated calls on failure by introducing a retry loop.",
    "redundancy_type": "UE"
  },
  "dataset_1368": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the zlib compression level for performance but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1369": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces malloc with calloc for better memory initialization but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1370": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the computation of wires by eliminating unnecessary gate creation and redundant output assignment.",
    "redundancy_type": "RF"
  },
  "dataset_1371": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a redundant call to getNumCPUs() with a computation that uses its result only once, avoiding unnecessary re-evaluation.",
    "redundancy_type": "RF"
  },
  "dataset_1372": {
    "eliminates_redundant_computation": false,
    "reason": "The commit removes a specific string handling case which does not inherently eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1373": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a check for 'localhost' to substitute with '127.0.0.1', but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1374": {
    "eliminates_redundant_computation": true,
    "reason": "The code avoids repetitive checks and selections by using the 'ri' vector to track previously found columns, thus reducing unnecessary computation within the loops.",
    "redundancy_type": "LI"
  },
  "dataset_1375": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the data structure from vector to deque for performance, but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_1376": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts the time limit based on run time but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1377": {
    "eliminates_redundant_computation": true,
    "reason": "Eliminates the use of a temporary string variable for a constant placeholder and directly uses the placeholder's size in the function call.",
    "redundancy_type": "RC"
  },
  "dataset_1378": {
    "eliminates_redundant_computation": true,
    "reason": "Moved the calculation of 'delta' outside the conditional checks to avoid repeated calculations for 'previousCentroid'.",
    "redundancy_type": "RF"
  },
  "dataset_1379": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces memory allocation from double the needed size to the required size, eliminating unnecessary computations in memory management.",
    "redundancy_type": "RC"
  },
  "dataset_1380": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a redundant range extraction with a direct iteration up to the upper bound, reducing unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_1381": {
    "eliminates_redundant_computation": true,
    "reason": "The commit unlocks a mutex before making an asynchronous call, reducing the critical section size and avoiding unnecessary locking.",
    "redundancy_type": "UE"
  },
  "dataset_1382": {
    "eliminates_redundant_computation": false,
    "reason": "The commit refactors a loop to use std::for_each with a lambda, but it does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1383": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant loop computations in favor of a single function call that achieves the same result.",
    "redundancy_type": "LI"
  },
  "dataset_1384": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes a conditional check that prevents unnecessary iterations, thus eliminating redundant evaluations.",
    "redundancy_type": "CE"
  },
  "dataset_1385": {
    "eliminates_redundant_computation": false,
    "reason": "The commit initializes a variable but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1386": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant initialization of the same vectors within a loop, allowing them to be initialized only once outside the loop.",
    "redundancy_type": "LI"
  },
  "dataset_1387": {
    "eliminates_redundant_computation": true,
    "reason": "Removed unnecessary calls to backtrace_symbols, which were costly and not used.",
    "redundancy_type": "UE"
  },
  "dataset_1388": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a constant in the loop but does not eliminate unnecessary computations.",
    "redundancy_type": null
  },
  "dataset_1389": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the factor by which the buffer size is increased but does not eliminate redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_1390": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant conditional check for deleting 'old_exchange', preventing unnecessary memory deallocation.",
    "redundancy_type": "CE"
  },
  "dataset_1391": {
    "eliminates_redundant_computation": true,
    "reason": "The commit updates the chunk size computation for `GenerateMatrix` to be based on the number of OpenMP threads, which avoids repeated calls with the same input when using OpenMP.",
    "redundancy_type": "RF"
  },
  "dataset_1392": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the index increment, ensuring that the index is only incremented once per iteration, which avoids redundant updates.",
    "redundancy_type": "RF"
  },
  "dataset_1393": {
    "eliminates_redundant_computation": false,
    "reason": "The patch primarily changes the calculation of `MAX_QUEUED_EVENTS` and modifies the condition checking for the semaphore, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1394": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces multiple individual property set calls with a single function call to 'put', reducing repetition and potential overhead.",
    "redundancy_type": "RF"
  },
  "dataset_1395": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary calls to push on 'maid()', thus eliminating redundant object management in memory.",
    "redundancy_type": "RF"
  },
  "dataset_1396": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repeated call to 'driver()->seq_size()' with a fixed value, reducing unnecessary calculations.",
    "redundancy_type": "RF"
  },
  "dataset_1397": {
    "eliminates_redundant_computation": false,
    "reason": "The commit addresses a memory leak by ensuring that memory is freed, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1398": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refines a conditional check to avoid further unnecessary evaluations based on the depth, thus optimizing the performance of the function.",
    "redundancy_type": "CE"
  },
  "dataset_1399": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the computation by reusing the previously calculated z value, avoiding unnecessary repeated computations.",
    "redundancy_type": "UE"
  },
  "dataset_1400": {
    "eliminates_redundant_computation": false,
    "reason": "The commit only changes the default value of wl_cutoff and does not address any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1401": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes 'iterations_per_update' from a constant to a variable based on 'sw.N', allowing for a more efficient computation and reducing the need for constant updates in a loop.",
    "redundancy_type": "LI"
  },
  "dataset_1402": {
    "eliminates_redundant_computation": false,
    "reason": "The change sets the default value of 'efficient' to true but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1403": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces redundant computation of the covariance matrix using transpose, which is a more efficient operation.",
    "redundancy_type": "RC"
  },
  "dataset_1404": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the method of parsing the URL from using `strtol` to using `istringstream`, but it does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1405": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces duplicate calls to the `requestFrameFilter` function by combining frame requests into a single call when appropriate.",
    "redundancy_type": "RF"
  },
  "dataset_1406": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the shape drawn from a circle to a square but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1407": {
    "eliminates_redundant_computation": true,
    "reason": "The change replaces a potentially redundant temporary string allocation with direct appending to the existing string.",
    "redundancy_type": "RC"
  },
  "dataset_1408": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the comparison operator to reverse the sorting order, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1409": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the initialization of n0->sortval from a potentially complex calculation (n0->d) to a constant value (1), simplifying the code and eliminating unnecessary computation.",
    "redundancy_type": "RC"
  },
  "dataset_1410": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates the tie-breaking logic in the comparison function, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1411": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces dynamic regex compilation with a static regex, reducing unnecessary repeated computations.",
    "redundancy_type": "RF"
  },
  "dataset_1412": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces `std::advance` with the increment operator `++`, simplifying the code and reducing unnecessary computation overhead.",
    "redundancy_type": "RC"
  },
  "dataset_1413": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces new benchmark tests without indicating the elimination of redundant computations.",
    "redundancy_type": null
  },
  "dataset_1414": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reserves space for the counters vector based on the size of elements, preventing repeated reallocations.",
    "redundancy_type": "RC"
  },
  "dataset_1415": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces an exception-handling mechanism with a method check which avoids unnecessary computation during key existence checks.",
    "redundancy_type": "RF"
  },
  "dataset_1416": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces an assignment with an emplace operation, optimizing the handling of std::optional.",
    "redundancy_type": "RF"
  },
  "dataset_1417": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the instantiation of 'JobProfiler' at the beginning of the method, reducing unnecessary profiling costs before expensive operations.",
    "redundancy_type": "UE"
  },
  "dataset_1418": {
    "eliminates_redundant_computation": true,
    "reason": "The patch avoids a potential crash by adding a check to ensure the line is valid before calling line.cursorToX(), preventing unnecessary computation in the case of an empty line.",
    "redundancy_type": "LI"
  },
  "dataset_1419": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the check to avoid unnecessary computation when 'node_' is null, improving efficiency.",
    "redundancy_type": "RF"
  },
  "dataset_1420": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a conditional check but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1421": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to minimize unnecessary invocations of subsequent code if the server reply condition is not met.",
    "redundancy_type": "LI"
  },
  "dataset_1422": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the implementation of the is_returnable_in_group_cmd method to eliminate the unnecessary check for the OK state, thus reducing redundant computation in group command processing.",
    "redundancy_type": "CE"
  },
  "dataset_1423": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes duplicate conditional checks by streamlining the parsing logic around the 'endfamily' and 'endtask' tokens, which can lead to more efficient code execution.",
    "redundancy_type": "CE"
  },
  "dataset_1424": {
    "eliminates_redundant_computation": false,
    "reason": "The commit rearranges conditional checks but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1425": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to return early if cached request statistics are available, avoiding unnecessary calculations.",
    "redundancy_type": "UE"
  },
  "dataset_1426": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the copy of the expression parts to a reference, avoiding unnecessary copying.",
    "redundancy_type": "RC"
  },
  "dataset_1427": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces a raw pointer with a managed pointer and does not focus on eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_1428": {
    "eliminates_redundant_computation": true,
    "reason": "The commit caches the result of htc->get(hashes[start]) to avoid calling it multiple times with the same input.",
    "redundancy_type": "RF"
  },
  "dataset_1429": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the constructor initialization of UnitTests but does not eliminate any specific redundant computations.",
    "redundancy_type": null
  },
  "dataset_1430": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes loop execution by avoiding unnecessary repetitive checks and conditions within the loop based on predetermined invariant values.",
    "redundancy_type": "LI"
  },
  "dataset_1431": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary operations when the memory area is already identified as P, thereby improving efficiency.",
    "redundancy_type": "RF"
  },
  "dataset_1432": {
    "eliminates_redundant_computation": true,
    "reason": "The commit skips unnecessary computations in the loop when 'opA' is not present, thereby improving performance.",
    "redundancy_type": "LI"
  },
  "dataset_1433": {
    "eliminates_redundant_computation": false,
    "reason": "The commit optimizes the data structure used for lookups, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1434": {
    "eliminates_redundant_computation": true,
    "reason": "The commit copies previously calculated values instead of recalculating them when the source is also a modulo register, reducing unnecessary computations.",
    "redundancy_type": "UE"
  },
  "dataset_1435": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes slow NTFS permission checks that are unnecessary and reduce performance.",
    "redundancy_type": "UE"
  },
  "dataset_1436": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes how vectors are populated with data and adds sorting, but it does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1437": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the time complexity by eliminating unnecessary GCD calculations for all pairs, focusing only on relevant multiples.",
    "redundancy_type": "LI"
  },
  "dataset_1438": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces strcmp with memcmp to handle null characters, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1439": {
    "eliminates_redundant_computation": false,
    "reason": "The commit introduces a comparison between two allocation strategies but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1440": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the number of iterations, which decreases unnecessary computations during the performance test.",
    "redundancy_type": "RC"
  },
  "dataset_1441": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the iteration count for allocations to avoid unnecessary new/delete calls for small objects by using a factor, thus reducing overhead.",
    "redundancy_type": "UE"
  },
  "dataset_1442": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reserves initial capacity of the vector instead of initializing it with size, preventing unnecessary allocations.",
    "redundancy_type": "RC"
  },
  "dataset_1443": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the unnecessary retrieval of event data outside of the loop, which was repeatedly executed for each completed work item.",
    "redundancy_type": "LI"
  },
  "dataset_1444": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a wait time for a thread, but does not address any redundant computations in the code.",
    "redundancy_type": null
  },
  "dataset_1445": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents unnecessary marking of skinning as dirty if there are no bones, eliminating redundant state changes.",
    "redundancy_type": "RC"
  },
  "dataset_1446": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces an existing loop that repeatedly calls 'do_pop' with a new implementation that avoids redundant calls by processing batches based on the structure of the heap.",
    "redundancy_type": "RF"
  },
  "dataset_1447": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the logic to avoid repeated execution of `execute_add_persistent0` by handling persistent predicates more efficiently within the conditional.",
    "redundancy_type": "CE"
  },
  "dataset_1448": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the interpolation method from nearest neighbor to linear interpolation, which improves quality but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1449": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates the codec format for lower CPU load but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1450": {
    "eliminates_redundant_computation": true,
    "reason": "The patch adds a condition to check if the filter should be applied, preventing unnecessary computation when the filter is disabled.",
    "redundancy_type": "LI"
  },
  "dataset_1451": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates the repeated instantiation of Json::FastWriter by declaring it as static, preventing unnecessary overhead in each function call.",
    "redundancy_type": "RF"
  },
  "dataset_1452": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a redundant computation of global transformation with a direct method call that achieves the same result, improving efficiency.",
    "redundancy_type": "RF"
  },
  "dataset_1453": {
    "eliminates_redundant_computation": true,
    "reason": "The patch introduces a multiplication by 2 for l_error outside the inner loop, reducing repetitive calculations.",
    "redundancy_type": "LI"
  },
  "dataset_1454": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a loop that manually copies data with a single call to memcpy, eliminating redundant computation.",
    "redundancy_type": "RC"
  },
  "dataset_1455": {
    "eliminates_redundant_computation": false,
    "reason": "The commit removes unnecessary data but does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_1456": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repeated increment operation with a direct assignment from a method call that reduces unnecessary computations.",
    "redundancy_type": "RF"
  },
  "dataset_1457": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies conditions for handling buffer flush recommendations, but does not eliminate redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_1458": {
    "eliminates_redundant_computation": true,
    "reason": "Removing the call to ut_time_us while holding the buffer pool mutex avoids unnecessary computation that was repeatedly executed in a critical section.",
    "redundancy_type": "UE"
  },
  "dataset_1459": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents unnecessary decompression of pages when only checking their presence in the buffer pool, avoiding redundant computation on pages that do not contribute to the adaptive hash index.",
    "redundancy_type": "RC"
  },
  "dataset_1460": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary incrementation and conditional checks that were previously executed unconditionally within the loop.",
    "redundancy_type": "LI"
  },
  "dataset_1461": {
    "eliminates_redundant_computation": true,
    "reason": "The commit pre-allocates memory for the buffer to avoid repeated dynamic memory allocations, thereby enhancing performance.",
    "redundancy_type": "RF"
  },
  "dataset_1462": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces `degree` with `out_degree`, likely reducing unnecessary calculations for the same values multiple times.",
    "redundancy_type": "RC"
  },
  "dataset_1463": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a for loop that repeatedly assigns a value with a single call to std::fill, which eliminates redundant assignments.",
    "redundancy_type": "RC"
  },
  "dataset_1464": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids a redundant '- 1' operation by assigning rule index only once.",
    "redundancy_type": "RC"
  },
  "dataset_1465": {
    "eliminates_redundant_computation": true,
    "reason": "The patch simplifies a computation by removing repeated division for values that do not change, leading to more efficient code.",
    "redundancy_type": "RC"
  },
  "dataset_1466": {
    "eliminates_redundant_computation": false,
    "reason": "The patch adds a new overload for the l2norm function specifically for std::array without removing or optimizing any existing computations.",
    "redundancy_type": null
  },
  "dataset_1467": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts a multiplier value but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1468": {
    "eliminates_redundant_computation": true,
    "reason": "The change prevents the unnecessary creation of a temporary object that was previously passed to appendCell, improving efficiency.",
    "redundancy_type": "RF"
  },
  "dataset_1469": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the buffer size for an array but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1470": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates the need for repeated calls to beginRemoveRows and endRemoveRows when all tracks are being removed.",
    "redundancy_type": "RF"
  },
  "dataset_1471": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes redundant allocations and initializations by properly initializing 'iactive' only once with the necessary state.",
    "redundancy_type": "RC"
  },
  "dataset_1472": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the redundant declaration of 'msg_list' inside the loop, ensuring it is only accessed once per iteration.",
    "redundancy_type": "LI"
  },
  "dataset_1473": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a redundant call to `cube_shape.squeeze(this->dim)` with a more efficient single call to `g3.squeeze(this->dim)`.",
    "redundancy_type": "RF"
  },
  "dataset_1474": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the index calculation to ensure it stays within bounds and avoids unnecessary computations when querying the attributes.",
    "redundancy_type": "RF"
  },
  "dataset_1475": {
    "eliminates_redundant_computation": false,
    "reason": "The patch changes a constant in a calculation, not eliminating any redundant work.",
    "redundancy_type": null
  },
  "dataset_1476": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes default block sizes but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1477": {
    "eliminates_redundant_computation": false,
    "reason": "The commit fixes memory management by removing one pointer and handling memory deletion for two arrays, but does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_1478": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies calculations by reusing computed values instead of recalculating them multiple times.",
    "redundancy_type": "RC"
  },
  "dataset_1479": {
    "eliminates_redundant_computation": true,
    "reason": "Removed an unused timer which avoids unnecessary computation resources for timing the build Hessian step.",
    "redundancy_type": "UE"
  },
  "dataset_1480": {
    "eliminates_redundant_computation": false,
    "reason": "The commit updates threshold values used in function calls but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1481": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes a repeated call to getLatestUpdateTime with a call to a method that retrieves a previously stored value, thus reducing redundant calculation.",
    "redundancy_type": "RC"
  },
  "dataset_1482": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant multiplication by 4 from the computation of 'cds', which did not affect the logic of the program and improves efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_1483": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a double increment on the event number, eliminating unnecessary computation before sending the event.",
    "redundancy_type": "RF"
  },
  "dataset_1484": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary checksum verification, which reduces overhead for large snapshots.",
    "redundancy_type": "UE"
  },
  "dataset_1485": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the checksum verification, which eliminates unnecessary computation overhead when processing large snapshots.",
    "redundancy_type": "UE"
  },
  "dataset_1486": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a sleep between repeated calls to GetAsyncKeyState, reducing CPU load.",
    "redundancy_type": "RF"
  },
  "dataset_1487": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a potentially costly repeated call to time() with clock() for better performance.",
    "redundancy_type": "UE"
  },
  "dataset_1488": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a repetitive call to set the scroll position, which previously occurred multiple times in the same context.",
    "redundancy_type": "LI"
  },
  "dataset_1489": {
    "eliminates_redundant_computation": true,
    "reason": "Redundant calls to 'verify()' after every allocation were removed, since they are unnecessary after each allocate or free operation.",
    "redundancy_type": "RC"
  },
  "dataset_1490": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a repeated function call with the same input, thus avoiding unnecessary calculations.",
    "redundancy_type": "RF"
  },
  "dataset_1491": {
    "eliminates_redundant_computation": true,
    "reason": "The commit improves efficiency by reducing redundant calculations within the loop, enabling the precomputation of invariant expressions.",
    "redundancy_type": "LI"
  },
  "dataset_1492": {
    "eliminates_redundant_computation": true,
    "reason": "The commit rewrites a computation to avoid redundant calculations based on invariant variables.",
    "redundancy_type": "LI"
  },
  "dataset_1493": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the computation of values 'a' and 'b', but does not remove any clearly redundant calculations.",
    "redundancy_type": null
  },
  "dataset_1494": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a check to simplify the function only when the size of 'rvarsize' is 2, preventing unnecessary function calls if the condition isn't met.",
    "redundancy_type": "RF"
  },
  "dataset_1495": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a check to avoid unnecessary evaluations by comparing types, which can eliminate redundant comparisons for complex numbers.",
    "redundancy_type": "CE"
  },
  "dataset_1496": {
    "eliminates_redundant_computation": true,
    "reason": "The added check for the size of 'w' prevents unnecessary further computations when there is only one solution.",
    "redundancy_type": "RF"
  },
  "dataset_1497": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces an early return using the 'fastsign' function, thus avoiding redundant calls to 'evalf_double' when possible.",
    "redundancy_type": "RF"
  },
  "dataset_1498": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes the conditional checks to eliminate unnecessary calls to 'divremmod' by ensuring that the sizes of 'pD' are compared before evaluating the function.",
    "redundancy_type": "CE"
  },
  "dataset_1499": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies an expression before passing it to the solve function, which can reduce redundant calculations.",
    "redundancy_type": "RC"
  },
  "dataset_1500": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes computations by handling a specific case for 2x2 matrices to avoid unnecessary calls to 'mrref' when possible.",
    "redundancy_type": "RC"
  },
  "dataset_1501": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates repeated evaluations of the same input variable 'args._VECTptr->front()' by storing its value in a new variable 'a'.",
    "redundancy_type": "RF"
  },
  "dataset_1502": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to avoid unnecessary computations related to large exponents that could lead to time-consuming operations.",
    "redundancy_type": "LI"
  },
  "dataset_1503": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a hardcoded value to a variable input but does not eliminate redundancies.",
    "redundancy_type": null
  },
  "dataset_1504": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces repetitive calls to 'pow' with a simpler 'pow_2', which reduces redundant computation of squaring values.",
    "redundancy_type": "RC"
  },
  "dataset_1505": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a function call from 'pow' to 'pow_2', but does not remove redundant computations.",
    "redundancy_type": null
  },
  "dataset_1506": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the select() call by calculating the maximum file descriptor only once, instead of recalculating it for each loop iteration.",
    "redundancy_type": "LI"
  },
  "dataset_1507": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a direct assignment with a resize operation, eliminating unnecessary memory allocation and copy throughout the assignment process.",
    "redundancy_type": "RC"
  },
  "dataset_1508": {
    "eliminates_redundant_computation": true,
    "reason": "The updated implementation of 'is_in' avoids unnecessary evaluations by checking index boundaries before performing bit operations.",
    "redundancy_type": "CE"
  },
  "dataset_1509": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors a calculation by simplifying an expression that was redundantly computing values multiple times, thus eliminating unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_1510": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary computation of expanding the bounding box which previously had a performance penalty.",
    "redundancy_type": "RC"
  },
  "dataset_1511": {
    "eliminates_redundant_computation": true,
    "reason": "The patch stores the column of the matrix M before entering the loop, avoiding repeated access to M for each iteration.",
    "redundancy_type": "RF"
  },
  "dataset_1512": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes a multiplication operation to an assignment, eliminating an unnecessary multiplication when the value can be directly assigned.",
    "redundancy_type": "RC"
  },
  "dataset_1513": {
    "eliminates_redundant_computation": true,
    "reason": "The code refactors the calculation of 'particles_add_remove' to avoid potential unnecessary recomputation depending on the value of 'particles_per_ele'.",
    "redundancy_type": "RC"
  },
  "dataset_1514": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the cache size but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1515": {
    "eliminates_redundant_computation": true,
    "reason": "Introduces magnitudeSquared() to avoid unnecessary sqrt() calls when only squared magnitude is needed.",
    "redundancy_type": "UE"
  },
  "dataset_1516": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant checks and simplifies conditionals related to the coordinate system's state, thus reducing unnecessary evaluations.",
    "redundancy_type": "CE"
  },
  "dataset_1517": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the format of the string representation of the simulation duration to ensure consistent handling, potentially improving performance and reducing redundancy in formatting calls.",
    "redundancy_type": "RC"
  },
  "dataset_1518": {
    "eliminates_redundant_computation": false,
    "reason": "The patch adds a property for uniform row heights, which improves performance but does not eliminate existing redundant computations.",
    "redundancy_type": null
  },
  "dataset_1519": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds conditional checks to adjust the translation speed based on key inputs, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1520": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the calculation to use original parameters instead of repeatedly recalculating values, thereby eliminating unnecessary recomputation.",
    "redundancy_type": "RC"
  },
  "dataset_1521": {
    "eliminates_redundant_computation": true,
    "reason": "The commit releases memory for base grid after it is used, preventing unnecessary memory duplication.",
    "redundancy_type": "RC"
  },
  "dataset_1522": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces multiple calls to Filter2D with a more efficient approach, possibly eliminating repeated calculations of filtered data using the same kernel.",
    "redundancy_type": "RF"
  },
  "dataset_1523": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop that checks for the presence of an element with a more efficient method, reducing computational overhead.",
    "redundancy_type": "RC"
  },
  "dataset_1524": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates redundant computations by replacing the LOCKSTEP macro with a zip_range function, optimizing how values are accessed and avoiding repeated calls.",
    "redundancy_type": "RF"
  },
  "dataset_1525": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes unnecessary allocation and deallocation of memory for values that can be retrieved directly without creating a temporary pointer.",
    "redundancy_type": "RF"
  },
  "dataset_1526": {
    "eliminates_redundant_computation": true,
    "reason": "The removal of unnecessary fetching of parameters from multiple plugins eliminates redundant calls and centralizes parameter information retrieval.",
    "redundancy_type": "UE"
  },
  "dataset_1527": {
    "eliminates_redundant_computation": false,
    "reason": "The patch focuses on removing a plugin and streamlining parameter fetching, but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1528": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the need to re-fetch parameter information from multiple plugins, centralizing the access to relevant data, thereby reducing unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_1529": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary copying of memory by ensuring single grid information is stored in 'localInfo', preventing potential redundant calculations later.",
    "redundancy_type": "LI"
  },
  "dataset_1530": {
    "eliminates_redundant_computation": false,
    "reason": "The commit randomizes the order of data fetching, which does not reduce redundant computations but rather changes the data access pattern.",
    "redundancy_type": null
  },
  "dataset_1531": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces the calculation of 'kappa_part' outside the conditional block to avoid redundant computation of 'fast_log(shared.kappa)'.",
    "redundancy_type": "RF"
  },
  "dataset_1532": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes unnecessary computations for time elapsed between frame encodings, which simplified the code without affecting functionality.",
    "redundancy_type": "LI"
  },
  "dataset_1533": {
    "eliminates_redundant_computation": false,
    "reason": "The commit increases the frame rate but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1534": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids calling 'tryGetBalances' when its result is not used, thus eliminating unnecessary computation.",
    "redundancy_type": "UE"
  },
  "dataset_1535": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a calculation to include a power operation but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1536": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the conditional check to ensure computations are only performed for active objects.",
    "redundancy_type": "CE"
  },
  "dataset_1537": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary scaling computations that are not used later, thus preventing redundant calculations.",
    "redundancy_type": "RC"
  },
  "dataset_1538": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts the reservation size for a string without removing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1539": {
    "eliminates_redundant_computation": false,
    "reason": "The commit reduces the size of an array, which doesn't eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1540": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the background property of a tab control; it does not eliminate any computations.",
    "redundancy_type": null
  },
  "dataset_1541": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a unique_ptr with a vector, which simplifies memory management and avoids redundant allocation and deallocation operations.",
    "redundancy_type": "RC"
  },
  "dataset_1542": {
    "eliminates_redundant_computation": false,
    "reason": "The changes made a function call mistake correction and improved type safety without eliminating any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1543": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary conditional checks and actions that would only execute if a forced change failed, simplifying the logic.",
    "redundancy_type": "CE"
  },
  "dataset_1544": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a repetitive approach to find the last element in a multimap with a more efficient method, eliminating the need for advancing the iterator multiple times.",
    "redundancy_type": "RC"
  },
  "dataset_1545": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a duplicate definition of the gem_power function, which eliminates repeated function calls with the same inputs.",
    "redundancy_type": "RF"
  },
  "dataset_1546": {
    "eliminates_redundant_computation": false,
    "reason": "The change replaces unordered sets with ordered sets for deterministic ordering, but it does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1547": {
    "eliminates_redundant_computation": true,
    "reason": "The commit addresses the issue of not resetting the `region_.end` coordinate, which can lead to excessive memory usage by retaining unnecessary data.",
    "redundancy_type": "RC"
  },
  "dataset_1548": {
    "eliminates_redundant_computation": true,
    "reason": "The commit resets the end coordinate in the region tracking, which helps to prevent excessive memory usage by clearing out unnecessary data.",
    "redundancy_type": "RC"
  },
  "dataset_1549": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the wrapping computation by replacing a modulus operation with conditional checks that reduce unnecessary calculations.",
    "redundancy_type": "RC"
  },
  "dataset_1550": {
    "eliminates_redundant_computation": true,
    "reason": "The commit improves performance by inlining the wrap function and avoiding unnecessary calculations for cases where x is within bounds.",
    "redundancy_type": "RF"
  },
  "dataset_1551": {
    "eliminates_redundant_computation": true,
    "reason": "The code now checks the image size only if the image successfully loads, eliminating unnecessary computations for pixel access when the image is not of expected size.",
    "redundancy_type": "LI"
  },
  "dataset_1552": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors the code to avoid recalculating the `width` variable in each iteration of the loop.",
    "redundancy_type": "LI"
  },
  "dataset_1553": {
    "eliminates_redundant_computation": false,
    "reason": "The patch enables an additional performance test without removing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1554": {
    "eliminates_redundant_computation": true,
    "reason": "The patch introduces a check for an empty set that avoids unnecessary computations when there are no elements to insert.",
    "redundancy_type": "UE"
  },
  "dataset_1555": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary computation of 'newLimits' when 'deleteSet' is empty, reducing unnecessary logic processing.",
    "redundancy_type": "LI"
  },
  "dataset_1556": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies the loop boundaries and indices but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1557": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates a redundant call to the initializer by copying grid data instead of calling the initializer twice with potentially the same data.",
    "redundancy_type": "RF"
  },
  "dataset_1558": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the variable used for storing bounding boxes but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1559": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces the pointers in a more optimal way, avoiding redundant assignments.",
    "redundancy_type": "RF"
  },
  "dataset_1560": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes a conditional check by combining two conditions, potentially eliminating redundancy in logic execution.",
    "redundancy_type": "CE"
  },
  "dataset_1561": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces unnecessary function calls and computations by using conditionals to check for zero values before adding to the result vector, which prevents redundant entries.",
    "redundancy_type": "RC"
  },
  "dataset_1562": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes repeated computations of the same conditions, specifically handling cases where the input 's' does not change.",
    "redundancy_type": "CE"
  },
  "dataset_1563": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the size check by storing the result in 's1' to avoid recalculating it multiple times.",
    "redundancy_type": "RC"
  },
  "dataset_1564": {
    "eliminates_redundant_computation": true,
    "reason": "The patch extracts common calculations of GCD degrees for polynomials, avoiding redundant computation of the same values when they're used multiple times.",
    "redundancy_type": "RC"
  },
  "dataset_1565": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts a threshold value without removing any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1566": {
    "eliminates_redundant_computation": true,
    "reason": "The patch prevents unnecessary checks for shift values that do not contribute to the computation by substituting them with 0, thus avoiding redundant calculations.",
    "redundancy_type": "UE"
  },
  "dataset_1567": {
    "eliminates_redundant_computation": true,
    "reason": "Removed duplicated checks for the image validity and animation, centralizing the logic to avoid unnecessary computations.",
    "redundancy_type": "CE"
  },
  "dataset_1568": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes an unnecessary check that previously combined two conditions, streamlining the logic.",
    "redundancy_type": "CE"
  },
  "dataset_1569": {
    "eliminates_redundant_computation": true,
    "reason": "The patch prevents unnecessary checks and data fetches when the pointctrl data is not used.",
    "redundancy_type": "UE"
  },
  "dataset_1570": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant computation by changing the character from double quotes to single quotes, improving readability without affecting performance.",
    "redundancy_type": "RC"
  },
  "dataset_1571": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the data structure from map to unordered_map for performance optimization, but does not eliminate any specific redundant computations.",
    "redundancy_type": null
  },
  "dataset_1572": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces floating-point arithmetic with integer arithmetic to optimize calculations, reducing unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_1573": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the calculation of halfHealth from division to multiplication, which is more efficient and removes potential redundancy.",
    "redundancy_type": "RC"
  },
  "dataset_1574": {
    "eliminates_redundant_computation": true,
    "reason": "The change moves the call to GetHighestEntityIndex() outside the loop, preventing repeated calls and thereby optimizing the computation.",
    "redundancy_type": "LI"
  },
  "dataset_1575": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces unnecessary copying of values by storing results directly in target variables, streamlining computations.",
    "redundancy_type": "RC"
  },
  "dataset_1576": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary function calls within a loop, replacing them with invariant checks outside of the loop, thus reducing redundant computations.",
    "redundancy_type": "LI"
  },
  "dataset_1577": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the drawing process by moving the rectangle clearing operation outside of the conditional checks, reducing unnecessary calls.",
    "redundancy_type": "RF"
  },
  "dataset_1578": {
    "eliminates_redundant_computation": true,
    "reason": "The patch prevents the initialization of RenderFrameData when there's no live frame, which avoids unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_1579": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a delay duration but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1580": {
    "eliminates_redundant_computation": true,
    "reason": "The commit updates URLs to use a faster loading page, potentially reducing unnecessary loading times.",
    "redundancy_type": "RC"
  },
  "dataset_1581": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the way the random index is generated to avoid using a redundant modulo operation on the size of unsent_entries_.",
    "redundancy_type": "RC"
  },
  "dataset_1582": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant timeout feature from WaitableEvent::TimedWait(), which was unnecessary since OnConnectionChanged(), Shutdown(), and ResetSyncInternal() already handle the timeout scenarios.",
    "redundancy_type": "RC"
  },
  "dataset_1583": {
    "eliminates_redundant_computation": false,
    "reason": "The patch introduces a new conditional check but does not significantly reduce redundant computations.",
    "redundancy_type": null
  },
  "dataset_1584": {
    "eliminates_redundant_computation": true,
    "reason": "Replaced the loop condition to avoid unnecessary computation of nn, optimizing control flow.",
    "redundancy_type": "LI"
  },
  "dataset_1585": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary initialization of report fields that were not needed in certain conditions, thus avoiding redundant computations.",
    "redundancy_type": "RC"
  },
  "dataset_1586": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the scrolling logic to handle multiple lines in one operation, reducing the number of necessary calculations.",
    "redundancy_type": "LI"
  },
  "dataset_1587": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the allocated memory for the kernel stack from 16KiB to 4KiB, eliminating unnecessary computation related to memory management.",
    "redundancy_type": "RC"
  },
  "dataset_1588": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the computation by avoiding the repeated calculation of the same exponential term, thus enhancing efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_1589": {
    "eliminates_redundant_computation": true,
    "reason": "Removed an unnecessary +1 from the computation of required space, as it was adding redundancy to the calculation of string lengths.",
    "redundancy_type": "RC"
  },
  "dataset_1590": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the calculation of 't' to use a constant multiplier, potentially eliminating redundant recalculation of 'seconds' in subsequent expressions.",
    "redundancy_type": "UE"
  },
  "dataset_1591": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a division operation to multiplication, improving numerical stability, but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1592": {
    "eliminates_redundant_computation": false,
    "reason": "The commit reduces threshold values but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1593": {
    "eliminates_redundant_computation": true,
    "reason": "Removed duplicate checks for the running state of 'future' and the cursor setting logic, improving efficiency.",
    "redundancy_type": "CE"
  },
  "dataset_1594": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant calls to prepend and remove on 'newFileName', which would not change the overall logic of the function.",
    "redundancy_type": "RF"
  },
  "dataset_1595": {
    "eliminates_redundant_computation": false,
    "reason": "The commit handles memory cleanup upon a failed search, without eliminating any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1596": {
    "eliminates_redundant_computation": true,
    "reason": "The commit processes multiple packets in a loop instead of handling each packet individually, avoiding repeated function calls within the event loop.",
    "redundancy_type": "RF"
  },
  "dataset_1597": {
    "eliminates_redundant_computation": true,
    "reason": "Replaced a potentially redundant function call with a direct computation, thus avoiding repeated calculations.",
    "redundancy_type": "RF"
  },
  "dataset_1598": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a method call with a more efficient iterator that reduces redundant computation during the bitmap conversion process.",
    "redundancy_type": "RF"
  },
  "dataset_1599": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates redundant computation by precalculating the value of 'u' to simplify the conditional check, avoiding repeated expressions.",
    "redundancy_type": "RC"
  },
  "dataset_1600": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates redundant calls to 'skip_to' by consolidating logic that handles the iterator positions efficiently.",
    "redundancy_type": "RF"
  },
  "dataset_1601": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a call to 'shrink()' after a conditional set operation, which helps manage memory consumption by eliminating potential unnecessary memory usage from not calling it after each insert.",
    "redundancy_type": "RC"
  },
  "dataset_1602": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes unnecessary calls to ImGui::DragFloat without a step size, which could lead to redundant updates on each frame.",
    "redundancy_type": "RC"
  },
  "dataset_1603": {
    "eliminates_redundant_computation": true,
    "reason": "Removed multiple unnecessary calls to processEvents() that had the same effect, reducing redundant execution.",
    "redundancy_type": "RF"
  },
  "dataset_1604": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces one method of sleeping with another, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1605": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes profiling code which likely caused unnecessary overhead during execution, thus eliminating redundant computations associated with profiling.",
    "redundancy_type": "UE"
  },
  "dataset_1606": {
    "eliminates_redundant_computation": true,
    "reason": "The commit updates the computation of 'cfactor' to use the running average of all previous 'current_cfactor' values instead of only the last two, reducing repeated calculations.",
    "redundancy_type": "RC"
  },
  "dataset_1607": {
    "eliminates_redundant_computation": true,
    "reason": "The code removes the redundant initialization and calls of 'rt' by moving it before the loop, ensuring it is only created and initialized once.",
    "redundancy_type": "RF"
  },
  "dataset_1608": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a recursive call to std::max with a single call that handles multiple arguments, reducing redundancy.",
    "redundancy_type": "RF"
  },
  "dataset_1609": {
    "eliminates_redundant_computation": false,
    "reason": "The patch modifies the existing computation of height using std::floor but does not eliminate redundancy.",
    "redundancy_type": null
  },
  "dataset_1610": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the use of `std::ceil` to `std::floor` for certain parameters, but does not eliminate any computations that are unnecessary or redundant.",
    "redundancy_type": null
  },
  "dataset_1611": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the container type from std::list to std::vector, which does not eliminate any computations.",
    "redundancy_type": null
  },
  "dataset_1612": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a check for the size of the row string but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1613": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary conditional checks leading to potential redundant evaluations in the plotting logic.",
    "redundancy_type": "CE"
  },
  "dataset_1614": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes unnecessary variable initializations and computations by directly calculating a value used for further processing.",
    "redundancy_type": "RC"
  },
  "dataset_1615": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the MCAP calculation to use the minimum of two function calls, eliminating unnecessary computation when either value could be larger.",
    "redundancy_type": "RF"
  },
  "dataset_1616": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents the execution of the 'objcopy' command when there are no parameters, avoiding unnecessary computation and potential system calls.",
    "redundancy_type": "UE"
  },
  "dataset_1617": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies a configuration option to use a low memory algorithm by default, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1618": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces the capacity of a vector after its size has been reduced, avoiding unnecessary memory allocation and potential reallocations.",
    "redundancy_type": "RC"
  },
  "dataset_1619": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces two separate function calls that remove optimization data with a single function that consolidates this operation, reducing redundant function calls.",
    "redundancy_type": "RF"
  },
  "dataset_1620": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a memory check for tensor construction but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1621": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adjusts the sleep time in the server loop, but this change does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1622": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on improving event delivery for accessibility updates rather than eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_1623": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on improving the hash function but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1624": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary calls to sizeHint() when the scrollbars are not displayed, reducing redundant computations.",
    "redundancy_type": "RF"
  },
  "dataset_1625": {
    "eliminates_redundant_computation": true,
    "reason": "The commit consolidates the functionality of two similar methods, reducing duplication of the hash calculation and bucket traversal logic.",
    "redundancy_type": "RF"
  },
  "dataset_1626": {
    "eliminates_redundant_computation": false,
    "reason": "The commit replaces heap allocation with stack allocation for improved performance but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1627": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary clearing of the QIcon cache, which avoids repeated invalidation that is no longer needed.",
    "redundancy_type": "UE"
  },
  "dataset_1628": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a memory allocation method from unique_ptr to optional, but it does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1629": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces the QByteArray constructor with the assign method to optimize memory usage and avoid unnecessary allocations.",
    "redundancy_type": "RF"
  },
  "dataset_1630": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a dynamically-sized QList with a statically-sized array, avoiding the overhead of dynamic memory allocation in a loop.",
    "redundancy_type": "LI"
  },
  "dataset_1631": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a dynamically-sized QList with a const array, eliminating the unnecessary overhead of using a dynamic container for statically-sized data.",
    "redundancy_type": "RC"
  },
  "dataset_1632": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a dynamically-sized QList with a constexpr array, which eliminates the need for dynamic memory allocation and improves performance.",
    "redundancy_type": "RC"
  },
  "dataset_1633": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant conditional check that is already evaluated earlier in the function, thus streamlining the logic.",
    "redundancy_type": "CE"
  },
  "dataset_1634": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces the computation using acos() with atan2(), allowing for the reuse of already computed values and eliminating the need to normalize the quaternion, thereby reducing unnecessary calculations.",
    "redundancy_type": "UE"
  },
  "dataset_1635": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes memory allocation by avoiding temporary object creation with QBA.",
    "redundancy_type": "RC"
  },
  "dataset_1636": {
    "eliminates_redundant_computation": true,
    "reason": "Consolidates the retrieval and modification of the 'Connection' header to avoid recomputation and unnecessary evaluations.",
    "redundancy_type": "RC"
  },
  "dataset_1637": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces QString with QLatin1StringView to reduce memory allocation overhead.",
    "redundancy_type": "RC"
  },
  "dataset_1638": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the calculation of the response by eliminating temporary allocations, thereby reducing unnecessary memory usage.",
    "redundancy_type": "UE"
  },
  "dataset_1639": {
    "eliminates_redundant_computation": true,
    "reason": "This patch replaces raw QByteArray creations with predefined literals, reducing unnecessary memory allocations.",
    "redundancy_type": "RC"
  },
  "dataset_1640": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary allocation by optimizing the extraction of method names using QByteArrayView, reducing overhead.",
    "redundancy_type": "RC"
  },
  "dataset_1641": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces multiple calls to `toLower()` with a case-insensitive comparison, reducing unnecessary computations and allocations.",
    "redundancy_type": "RC"
  },
  "dataset_1642": {
    "eliminates_redundant_computation": true,
    "reason": "Changes from 'split' to 'tokenize' avoid creating an unnecessary temporary list.",
    "redundancy_type": "RC"
  },
  "dataset_1643": {
    "eliminates_redundant_computation": true,
    "reason": "Changes the allocation of QString to QAnyStringView to avoid needless allocations.",
    "redundancy_type": "RC"
  },
  "dataset_1644": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces an unconditional loop that replaces characters within the QByteArray with a more efficient algorithm, avoiding unnecessary iterations and computations when 'before' and 'after' characters are the same.",
    "redundancy_type": "LI"
  },
  "dataset_1645": {
    "eliminates_redundant_computation": false,
    "reason": "The patch optimizes the notification of a conditional variable to avoid mutex contention but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1646": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a direct QByteArray allocation with a QByteArrayView, reducing unnecessary memory allocations.",
    "redundancy_type": "RC"
  },
  "dataset_1647": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the `toHtmlEscaped` function to avoid an unconditional copy by checking for replaceable characters before performing operations, eliminating unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_1648": {
    "eliminates_redundant_computation": true,
    "reason": "Replaces a split operation with a tokenize method to avoid creating an unnecessary temporary list.",
    "redundancy_type": "RC"
  },
  "dataset_1649": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary call to isSymlink() by directly using symLinkTarget() which suffices for the logic, thus eliminating redundant checks.",
    "redundancy_type": "CE"
  },
  "dataset_1650": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids the redundant call to FcCharSetHasChar() when the writing system is already known to be supported, preventing unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_1651": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant check for file existence before creating it, as the open call will handle this.",
    "redundancy_type": "RC"
  },
  "dataset_1652": {
    "eliminates_redundant_computation": false,
    "reason": "The commit increases the size of the DNS cache but does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_1653": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary calls to `pcre16_fullinfo` using `studyData`, which were redundant since they are not required for obtaining pattern info.",
    "redundancy_type": "RF"
  },
  "dataset_1654": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to avoid unnecessary state changes when the cursor is not set, preventing redundant computation in the unsetCursor function.",
    "redundancy_type": "UE"
  },
  "dataset_1655": {
    "eliminates_redundant_computation": true,
    "reason": "The commit improves the efficiency by checking the ItemNeverHasChildren flag before evaluating if the model has children, thus avoiding unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_1656": {
    "eliminates_redundant_computation": true,
    "reason": "The patch prevents an unnecessary attempt to load a library (libresolv.so) when it is not available, saving computation time.",
    "redundancy_type": "UE"
  },
  "dataset_1657": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids recalculating surrogate characters by reusing previously known values.",
    "redundancy_type": "RC"
  },
  "dataset_1658": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary calls to findText() when the current item matches the entered text.",
    "redundancy_type": "RF"
  },
  "dataset_1659": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the code by removing unnecessary conditional checks before performing string manipulations, which are now always executed.",
    "redundancy_type": "CE"
  },
  "dataset_1660": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates the need to check for symlinks at every app start on QNX, as they are always present.",
    "redundancy_type": "RC"
  },
  "dataset_1661": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates an unnecessary initial resizing and conditional check for creating a QBitArray, improving efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_1662": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary waiting and checks that were based on waiting for a response that was not supposed to come.",
    "redundancy_type": "RC"
  },
  "dataset_1663": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a sorting operation with nth_element, reducing unnecessary computational complexity when finding the median.",
    "redundancy_type": "RC"
  },
  "dataset_1664": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the calculation of the median by replacing a full sort with the more efficient nth_element algorithm, reducing unnecessary computational complexity.",
    "redundancy_type": "RC"
  },
  "dataset_1665": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary memory allocations by making a QLocale constant, thus preventing a redundant detach call.",
    "redundancy_type": "RC"
  },
  "dataset_1666": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the allocation for the dashPattern by reserving space based on the pattern type, reducing unnecessary resizing.",
    "redundancy_type": "RC"
  },
  "dataset_1667": {
    "eliminates_redundant_computation": true,
    "reason": "The commit ensures that the previously allocated `scEngine` memory is properly deallocated if it is not being used, thereby removing the potential for memory leaks.",
    "redundancy_type": "RC"
  },
  "dataset_1668": {
    "eliminates_redundant_computation": false,
    "reason": null,
    "redundancy_type": null
  },
  "dataset_1669": {
    "eliminates_redundant_computation": false,
    "reason": "The commit avoids integer overflow by changing an addition to a subtraction, but it does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1670": {
    "eliminates_redundant_computation": false,
    "reason": "The commit fixes a bug related to capability handling without eliminating any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1671": {
    "eliminates_redundant_computation": false,
    "reason": "The commit raises the stack size for threads but does not address redundancy in computations.",
    "redundancy_type": null
  },
  "dataset_1672": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary waiting by checking if the file system has sub-second resolution, avoiding a sleep in cases where it's not needed.",
    "redundancy_type": "LI"
  },
  "dataset_1673": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the internalPut method by avoiding unnecessary checks for standard objects, thereby reducing redundant computations related to property insertion.",
    "redundancy_type": "RF"
  },
  "dataset_1674": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refines the condition for preloading items, ensuring that it only occurs when rebuilding the entire table, thus avoiding unnecessary preloading in partial updates.",
    "redundancy_type": "RC"
  },
  "dataset_1675": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the storage and checking of state names by replacing QSet with QVarLengthArray to avoid unnecessary computations related to duplicate checks.",
    "redundancy_type": "RC"
  },
  "dataset_1676": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a check to prevent unnecessary creation of QPixmap objects with the same dimensions.",
    "redundancy_type": "RC"
  },
  "dataset_1677": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary loop iterations by breaking out of the loop when an invalid gradient stop is found.",
    "redundancy_type": "LI"
  },
  "dataset_1678": {
    "eliminates_redundant_computation": true,
    "reason": "The commit updates the page size for a document to a fixed value instead of recalculating it during multiple calls, thus avoiding redundant computations.",
    "redundancy_type": "UE"
  },
  "dataset_1679": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a second evaluation of 'name', which is unnecessary since it was already evaluated earlier in the function.",
    "redundancy_type": "RF"
  },
  "dataset_1680": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes the `forceLayout()` function by eliminating unnecessary calls to `polish()` when the layout is ongoing, thus preventing redundant layout updates.",
    "redundancy_type": "UE"
  },
  "dataset_1681": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary computation by short-circuiting the stringToNumber function for strings that are too long to be valid numbers.",
    "redundancy_type": "RC"
  },
  "dataset_1682": {
    "eliminates_redundant_computation": true,
    "reason": "This commit replaces a copy of input data with a direct reference, eliminating unnecessary memory allocation.",
    "redundancy_type": "RC"
  },
  "dataset_1683": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates a repeated call to QImageReader::size() by storing its result in a variable.",
    "redundancy_type": "RF"
  },
  "dataset_1684": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces redundant handling of the incubationTask and its associated scriptRef, thereby preventing unnecessary operations.",
    "redundancy_type": "UE"
  },
  "dataset_1685": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates a redundant retrieval of the same value, metaObjectOffset(), by using a previously computed value, offset.",
    "redundancy_type": "RF"
  },
  "dataset_1686": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes duplicated declarations of the 'realm' member, optimizing memory usage.",
    "redundancy_type": "CE"
  },
  "dataset_1687": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant memory leak checks and simplifies clearing the ValueStack and Locals2, eliminating unnecessary computation on each iteration.",
    "redundancy_type": "LI"
  },
  "dataset_1688": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes memory allocation by reserving space for the string before entering the loop rather than allowing the string to grow dynamically within the loop.",
    "redundancy_type": "LI"
  },
  "dataset_1689": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces repeated access to a suffix vector with direct access to a pairs vector, improving efficiency by eliminating redundant operations.",
    "redundancy_type": "RF"
  },
  "dataset_1690": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adjusts the condition to check for a smaller threshold in entries, which helps in reducing redundant memory allocation and operations when processing large sizes.",
    "redundancy_type": "RC"
  },
  "dataset_1691": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes matrix assembly by avoiding duplicated operations on stiffness and tmp_mat.",
    "redundancy_type": "LI"
  },
  "dataset_1692": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the computation of the 'scene' variable to use a dynamic value instead of a hardcoded string, which may improve efficiency and adaptability.",
    "redundancy_type": "RC"
  },
  "dataset_1693": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary configuration parameters in the test, reducing redundancy without impacting functionality.",
    "redundancy_type": "CE"
  },
  "dataset_1694": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies a calculation to prevent unnecessary evaluations by using a more efficient expression.",
    "redundancy_type": "RC"
  },
  "dataset_1695": {
    "eliminates_redundant_computation": true,
    "reason": "The patch moves the update call for variables_to_simulation_ outside the redundant condition, preventing repeated calls during each iteration.",
    "redundancy_type": "RF"
  },
  "dataset_1696": {
    "eliminates_redundant_computation": true,
    "reason": "The computation of half angles for z_theta, y_theta, and x_theta has been optimized to avoid repeated calculations.",
    "redundancy_type": "RF"
  },
  "dataset_1697": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop with repeated I/O and parsing operations with a single read operation followed by processing, thus removing unnecessary I/O computations and improving performance.",
    "redundancy_type": "LI"
  },
  "dataset_1698": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes repeated checks of the same condition, preventing redundant execution paths.",
    "redundancy_type": "CE"
  },
  "dataset_1699": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates repeated calls to getGenome with the same arguments by storing its result in a variable.",
    "redundancy_type": "RF"
  },
  "dataset_1700": {
    "eliminates_redundant_computation": false,
    "reason": "The commit integrates nogoods into the solver but does not remove redundant computations.",
    "redundancy_type": null
  },
  "dataset_1701": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the code to extract and copy the payload of a message, avoiding holding upstream resources without redundant extraction.",
    "redundancy_type": "UE"
  },
  "dataset_1702": {
    "eliminates_redundant_computation": true,
    "reason": "The update mode change improves performance by reducing unnecessary rendering calculations during scrolling.",
    "redundancy_type": "RC"
  },
  "dataset_1703": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a condition to avoid unnecessary calls to usleep when sleepDuration is zero, reducing redundant sleep overhead.",
    "redundancy_type": "UE"
  },
  "dataset_1704": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids unnecessary sorting by checking if sorting is needed based on the position of the object being inserted.",
    "redundancy_type": "RC"
  },
  "dataset_1705": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary function call when MIDI playback is active, avoiding redundant computation of the scroll position.",
    "redundancy_type": "RC"
  },
  "dataset_1706": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes memory allocation by reserving space for the 'list' based on the size of 'dataList', which avoids repeated memory reallocations during the loop.",
    "redundancy_type": "LI"
  },
  "dataset_1707": {
    "eliminates_redundant_computation": false,
    "reason": "The patch optimizes container usage by switching from QList to QVector, but it does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1708": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies a conditional check by avoiding unnecessary string comparison when the stretch values are zero.",
    "redundancy_type": "CE"
  },
  "dataset_1709": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reorders the if statement to prevent unnecessary function calls if decoration_size is already set, thus avoiding redundant computation.",
    "redundancy_type": "RF"
  },
  "dataset_1710": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a foreach loop with a single line operation that collects values into a list, which is more efficient as it eliminates the need for iteration.",
    "redundancy_type": "RC"
  },
  "dataset_1711": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates unnecessary assignments by initializing QIcon objects directly in the constructor's initializer list instead of reassigning them in the constructor body.",
    "redundancy_type": "RF"
  },
  "dataset_1712": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop-based erase method with a more efficient std::remove_if and erase combination, reducing complexity.",
    "redundancy_type": "LI"
  },
  "dataset_1713": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies conditional checks, eliminating unnecessary evaluations when the 'sequential' flag is false and 'written' is greater than zero.",
    "redundancy_type": "CE"
  },
  "dataset_1714": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the check from isEmpty() to checking d for shared_null, ensuring that reserved capacity is retained and unnecessary computation in operator+= is avoided.",
    "redundancy_type": "RF"
  },
  "dataset_1715": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces redundant evaluations and copies, optimizing the vector operations and avoiding unnecessary recomputations.",
    "redundancy_type": "RC"
  },
  "dataset_1716": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes string splitting by replacing the creation of multiple substrings with a reference-based split, reducing unnecessary memory allocations.",
    "redundancy_type": "RC"
  },
  "dataset_1717": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a Q_FOREACH loop with a more efficient list append operation, thereby streamlining the addition to `pluginList` and eliminating unnecessary iteration.",
    "redundancy_type": "LI"
  },
  "dataset_1718": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a potentially expensive list conversion with a direct iterator access, reducing unnecessary temporary memory allocation.",
    "redundancy_type": "RF"
  },
  "dataset_1719": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes string building by eliminating multiple lookups and unnecessary temporary lists, thus reducing redundant computations.",
    "redundancy_type": "RF"
  },
  "dataset_1720": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary cache clear operation before resizing, avoiding redundant allocation.",
    "redundancy_type": "RC"
  },
  "dataset_1721": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a QList copy and pop_front() combination with a mid() function call, improving efficiency by reducing unnecessary data copying.",
    "redundancy_type": "RC"
  },
  "dataset_1722": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a quadratic complexity operation with a linear one, thus eliminating unnecessary computations while processing selected indexes.",
    "redundancy_type": "RC"
  },
  "dataset_1723": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a call to QScreen::virtualSiblings() when QT_NO_CURSOR is enabled, indicating it is unnecessary.",
    "redundancy_type": "UE"
  },
  "dataset_1724": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary calls to a data function that executed redundant code, improving the efficiency of the test.",
    "redundancy_type": "RF"
  },
  "dataset_1725": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces an iteration over a temporary QList with a direct iteration over the original container, eliminating unnecessary list creation.",
    "redundancy_type": "LI"
  },
  "dataset_1726": {
    "eliminates_redundant_computation": true,
    "reason": "The patch optimizes string handling by replacing QString splitting with QStringRef to avoid unnecessary allocations, thus eliminating redundant memory operations.",
    "redundancy_type": "RC"
  },
  "dataset_1727": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a potentially redundant call to 'region.rects().at(0)' with 'region.boundingRect()', optimizing the operation by avoiding unnecessary calculations on the rectangle list.",
    "redundancy_type": "RF"
  },
  "dataset_1728": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a redundant recalculation of the 'rowCount' by reusing previously computed 'parentRowCount' and 'delta' values.",
    "redundancy_type": "RC"
  },
  "dataset_1729": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces unnecessary checks of the HTTP signature in a loop by modifying the length condition.",
    "redundancy_type": "LI"
  },
  "dataset_1730": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the way keys of the QMap are accessed, eliminating an intermediate QList that would have required redundant computation of keys.",
    "redundancy_type": "RC"
  },
  "dataset_1731": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents unnecessary computation by avoiding the cost of converting the Latin1 data when the needle string is longer than the haystack.",
    "redundancy_type": "RC"
  },
  "dataset_1732": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids allocating storage for reading the same line twice by moving the early exit check above the reading of the lines.",
    "redundancy_type": "LI"
  },
  "dataset_1733": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adds a call to 'reserve()' for the hash to preallocate memory, reducing future memory allocations and improving efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_1734": {
    "eliminates_redundant_computation": true,
    "reason": "The change iterates over the container directly instead of creating a temporary list, reducing unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_1735": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the method of building the 'interface' string by avoiding repeated calls to 'prepend()' in a loop, thereby reducing computational complexity.",
    "redundancy_type": "LI"
  },
  "dataset_1736": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a loop-based item removal with a more efficient method using std::remove_if, reducing computational complexity.",
    "redundancy_type": "LI"
  },
  "dataset_1737": {
    "eliminates_redundant_computation": true,
    "reason": "The patch avoids unnecessary data copying by returning a pointer to the Cord's data when it is already flat.",
    "redundancy_type": "UE"
  },
  "dataset_1738": {
    "eliminates_redundant_computation": true,
    "reason": "The commit moves an expensive variable to its last use, avoiding unnecessary copies.",
    "redundancy_type": "UE"
  },
  "dataset_1739": {
    "eliminates_redundant_computation": true,
    "reason": "The code optimizes the extraction process by moving elements instead of copying them, reducing unnecessary computations related to element copying.",
    "redundancy_type": "RF"
  },
  "dataset_1740": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a debug check to prevent unsafe operations on a default string, but does not remove any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1741": {
    "eliminates_redundant_computation": true,
    "reason": "Reserving space in the ngrams vector avoids repeated memory allocations, improving performance.",
    "redundancy_type": "RC"
  },
  "dataset_1742": {
    "eliminates_redundant_computation": true,
    "reason": "The removal of the st_current_init() call eliminates an unnecessary function that has no effect on the Einsy board.",
    "redundancy_type": "UE"
  },
  "dataset_1743": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary incrementation of the consecutiveCommentLines variable, which was causing redundant updates.",
    "redundancy_type": "RF"
  },
  "dataset_1744": {
    "eliminates_redundant_computation": true,
    "reason": "The commit improves the checking of the existence of already deployed imports by using a more efficient directory filter, preventing unnecessary recursive operations.",
    "redundancy_type": "RC"
  },
  "dataset_1745": {
    "eliminates_redundant_computation": true,
    "reason": "The commit initializes a member variable to enable caching, which prevents unnecessary recomputation of values that should be cached.",
    "redundancy_type": "RC"
  },
  "dataset_1746": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the clearing of the imports cache, which is unnecessary and slows down the build without affecting functionality.",
    "redundancy_type": "RC"
  },
  "dataset_1747": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes an unnecessary duplicate cloning of a value that is already obtained from a cloned prototype.",
    "redundancy_type": "RF"
  },
  "dataset_1748": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes redundant checks for handled items, preventing repeated processing of the same items within the handling function.",
    "redundancy_type": "RF"
  },
  "dataset_1749": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary cloning of the module prototype, focusing on only setting required properties which streamlines the process.",
    "redundancy_type": "RF"
  },
  "dataset_1750": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the infinite loop requiring a file's timestamp to change, thereby eliminating unnecessary waiting computations.",
    "redundancy_type": "RC"
  },
  "dataset_1751": {
    "eliminates_redundant_computation": false,
    "reason": "The commit improves the formatting of error messages without eliminating any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1752": {
    "eliminates_redundant_computation": true,
    "reason": "The commit changes the method used to insert dependencies into the set, eliminating redundant insertions.",
    "redundancy_type": "RF"
  },
  "dataset_1753": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces unnecessary traversal of the entire project rule nodes by directly filtering relevant nodes from the artifact's parents.",
    "redundancy_type": "RF"
  },
  "dataset_1754": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces QHash with std::unordered_map, reducing unnecessary lookup computations by using more efficient data structures.",
    "redundancy_type": "RC"
  },
  "dataset_1755": {
    "eliminates_redundant_computation": true,
    "reason": "The patch moves the calculation of maxJobCount() outside the loop, avoiding repeated calls.",
    "redundancy_type": "RF"
  },
  "dataset_1756": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids a double lookup by using the iterator's value directly instead of redundantly accessing it from the map.",
    "redundancy_type": "RF"
  },
  "dataset_1757": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the `propertyDeclaration` method by reducing unnecessary allocations related to property declarations and using iterators instead.",
    "redundancy_type": "RC"
  },
  "dataset_1758": {
    "eliminates_redundant_computation": true,
    "reason": "The patch avoids unnecessary string allocation when retrieving a value from the cache, promoting efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_1759": {
    "eliminates_redundant_computation": true,
    "reason": "The patch avoids redundant calls to the end() function by storing its result in a variable.",
    "redundancy_type": "RF"
  },
  "dataset_1760": {
    "eliminates_redundant_computation": true,
    "reason": "The updated algorithm avoids repeated calls to the unreliable QPainterPath::contains method by directly computing whether the point is inside the polygon.",
    "redundancy_type": "RF"
  },
  "dataset_1761": {
    "eliminates_redundant_computation": true,
    "reason": "The patch eliminates the unnecessary repeated computation of icon dimensions and rendering, optimizing memory usage.",
    "redundancy_type": "RC"
  },
  "dataset_1762": {
    "eliminates_redundant_computation": true,
    "reason": "The patch removes redundant computations of the RVector 'z' and associated pen settings, which were unnecessary for the drawing operations.",
    "redundancy_type": "RF"
  },
  "dataset_1763": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refines the mouse movement check to avoid repeated calculations when mouse interrupts are not allowed, reducing unnecessary evaluations.",
    "redundancy_type": "CE"
  },
  "dataset_1764": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the logic by removing an unnecessary unused variable declaration, thus avoiding redundant checks.",
    "redundancy_type": "CE"
  },
  "dataset_1765": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds a condition to handle specific cases more efficiently, but it does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1766": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids repeated calls to the same method for arc properties by storing the result in a variable.",
    "redundancy_type": "RF"
  },
  "dataset_1767": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes unnecessary calculations by setting 'dirty' to false, which prevents redundant bounding box recalculation.",
    "redundancy_type": "UE"
  },
  "dataset_1768": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the condition for 'isUniform' to include an additional case, which reduces the need for further checks elsewhere in the code.",
    "redundancy_type": "CE"
  },
  "dataset_1769": {
    "eliminates_redundant_computation": true,
    "reason": "The commit eliminates an unnecessary distance calculation for entities inside viewports by returning a pre-computed value instead.",
    "redundancy_type": "UE"
  },
  "dataset_1770": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces a faster algorithm that computes the ellipse circumference by reusing values for major and minor radii, eliminating redundant or repeated calculations.",
    "redundancy_type": "RC"
  },
  "dataset_1771": {
    "eliminates_redundant_computation": true,
    "reason": "The commit adjusts the conditions for setting pixelSizeHint to prevent unnecessary recalculations under certain conditions, improving performance.",
    "redundancy_type": "RC"
  },
  "dataset_1772": {
    "eliminates_redundant_computation": false,
    "reason": "The changes focus on optimizing SQLite database configurations, not eliminating redundant computations.",
    "redundancy_type": null
  },
  "dataset_1773": {
    "eliminates_redundant_computation": true,
    "reason": "The commit combines multiple updates to conductors into a single loop, avoiding multiple checks and calls for each conductor separately.",
    "redundancy_type": "LI"
  },
  "dataset_1774": {
    "eliminates_redundant_computation": false,
    "reason": "The commit does not eliminate redundant computations; it offloads the file writing operation to a separate thread for performance improvement.",
    "redundancy_type": null
  },
  "dataset_1775": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents the search method from executing when the text is less than three letters, thus reducing unnecessary computations.",
    "redundancy_type": "RC"
  },
  "dataset_1776": {
    "eliminates_redundant_computation": true,
    "reason": "The commit avoids repeated instantiation of QSettings by caching the result of the first call, thus improving performance.",
    "redundancy_type": "RF"
  },
  "dataset_1777": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies conditional compilation related to High DPI scaling, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1778": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces multiple calls to the uuid() method by storing its result in a variable, preventing unnecessary recalculation.",
    "redundancy_type": "RF"
  },
  "dataset_1779": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes a method from rfind to find, which does not eliminate any redundant computation.",
    "redundancy_type": null
  },
  "dataset_1780": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the default buffer size from 1024 to 512 but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1781": {
    "eliminates_redundant_computation": true,
    "reason": "The commit reduces unnecessary copy-construction of callback objects in a loop by using a reference instead.",
    "redundancy_type": "RF"
  },
  "dataset_1782": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the calling of the Strategy constructor by adding a flag that eliminates the need for repeated evaluations of the modifier condition during each invocation.",
    "redundancy_type": "UE"
  },
  "dataset_1783": {
    "eliminates_redundant_computation": false,
    "reason": "The patch alters the condition used to set the variable 'only_get_distinct_pre' but does not eliminate redundant computations.",
    "redundancy_type": null
  },
  "dataset_1784": {
    "eliminates_redundant_computation": true,
    "reason": "The commit introduces early termination in boolean evaluations to avoid unnecessary further computations when the result can be determined early.",
    "redundancy_type": "UE"
  },
  "dataset_1785": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a redundant call to 'InitialTable' with a conditional expression that depends on the size of 'query_plan->join_order_', preventing unnecessary computation when the join order has a size of 1.",
    "redundancy_type": "RF"
  },
  "dataset_1786": {
    "eliminates_redundant_computation": true,
    "reason": "The commit refactors memory allocation for trigger overlaps to avoid per-frame allocations, reusing static storage instead.",
    "redundancy_type": "RF"
  },
  "dataset_1787": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes the condition checks in the thread completion logic, combining multiple checks into one, thus preventing unnecessary evaluations.",
    "redundancy_type": "CE"
  },
  "dataset_1788": {
    "eliminates_redundant_computation": false,
    "reason": "The commit focuses on deleting unused widgets to prevent memory leaks, but does not address redundant computations.",
    "redundancy_type": null
  },
  "dataset_1789": {
    "eliminates_redundant_computation": true,
    "reason": "The patch replaces a potentially expensive function call with a simple comparison to an invariant value, reducing unnecessary computation.",
    "redundancy_type": "RF"
  },
  "dataset_1790": {
    "eliminates_redundant_computation": true,
    "reason": "Caches the path of 'xcrun' to avoid repeatedly searching for it in the PATH directories whenever 'runSimCtlCommand' is called.",
    "redundancy_type": "RF"
  },
  "dataset_1791": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes expensive internal calls to QFileSystemEngine::fillMetaData by using FilePath::fromString and dirEntries, reducing unnecessary computations related to file system metadata retrieval.",
    "redundancy_type": "UE"
  },
  "dataset_1792": {
    "eliminates_redundant_computation": true,
    "reason": "The commit modifies the command arguments passed to a method to conditionally include tags, which reduces unnecessary evaluations and potential redundant processing of tags that might not be needed.",
    "redundancy_type": "CE"
  },
  "dataset_1793": {
    "eliminates_redundant_computation": false,
    "reason": "The commit changes the scheduling of a function call, but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1794": {
    "eliminates_redundant_computation": true,
    "reason": "The commit simplifies the width computation by using a constant average character width, eliminating repeated calls to a potentially expensive function.",
    "redundancy_type": "RF"
  },
  "dataset_1795": {
    "eliminates_redundant_computation": false,
    "reason": "The commit modifies an async run invocation but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1796": {
    "eliminates_redundant_computation": true,
    "reason": "This commit replaces a slow cloning operation with a more efficient creation of a new QTextDocument from existing plain text.",
    "redundancy_type": "RF"
  },
  "dataset_1797": {
    "eliminates_redundant_computation": true,
    "reason": "The commit optimizes a string comparison by changing a method call to a direct length and character check, reducing overhead.",
    "redundancy_type": "RF"
  },
  "dataset_1798": {
    "eliminates_redundant_computation": true,
    "reason": "The commit prevents scheduling duplicate requests for the same URI, which avoids redundant processing.",
    "redundancy_type": "DB"
  },
  "dataset_1799": {
    "eliminates_redundant_computation": false,
    "reason": "The commit adds checks to the processing of kits but does not eliminate any redundant computations.",
    "redundancy_type": null
  },
  "dataset_1800": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes the unnecessary iteration over child keys, improving efficiency.",
    "redundancy_type": "RC"
  },
  "dataset_1801": {
    "eliminates_redundant_computation": true,
    "reason": "The commit replaces a raw pointer allocation with a shared pointer, reducing potential memory overhead and redundancy in resource management.",
    "redundancy_type": "RC"
  },
  "dataset_1802": {
    "eliminates_redundant_computation": true,
    "reason": "The commit removes a costly call to fetch visual indent depth when unnecessary, improving performance.",
    "redundancy_type": "UE"
  }
}
