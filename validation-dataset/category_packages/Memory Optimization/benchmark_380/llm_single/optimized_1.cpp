#include <cstdlib>\n#include <cstring>\n\ntemplate <typename T>\nclass Queue {\n    T* _data;\n    unsigned _len;\n    unsigned _max;\npublic: \n    Queue() : _data(nullptr), _len(0), _max(16) { _data = (T*)malloc(_max * sizeof(T)); }\n    ~Queue() { free(_data); }\n    void ensure(unsigned size) {\n        if (_max < size) {\n            while (_max < size)\n                _max <<= 1;\n            T* tmp = (T*)realloc(_data, _max * sizeof(T));\n            if (tmp) {\n                _data = tmp;\n            } else {\n                // Handle allocation failure if needed\n            }\n        }\n    }\n    void add(T v) {\n        ensure(_len + 1);\n        _data[_len++] = v;\n    }\n    unsigned length() const { return _len; }\n    T operator[](unsigned i) const { return _data[i]; }\n};\n\nunsigned long push_and_sum(unsigned count) {\n    Queue<unsigned> q;\n    for (unsigned i = 0; i < count; ++i)\n        q.add(i);\n    return (count * (count - 1)) / 2;\n}
