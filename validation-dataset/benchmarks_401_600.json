{
  "benchmarks": [
    {
      "name": "benchmark_401",
      "inefficiency": "openmp parallelization of LinkedCells::getNumberOfParticles()",
      "optimization": "openmp parallelization of LinkedCells::getNumberOfParticles()"
    },
    {
      "name": "benchmark_402",
      "inefficiency": "whoops, placement new was leaking memory.  i guess default",
      "optimization": "whoops, placement new was leaking memory.  i guess default"
    },
    {
      "name": "benchmark_403",
      "inefficiency": "Use __GNUC__ for POWER8 AES availability test",
      "optimization": "Use __GNUC__ for POWER8 AES availability test"
    },
    {
      "name": "benchmark_404",
      "inefficiency": "8148328: aarch64: redundant lsr instructions in stub code.",
      "optimization": "8148328: aarch64: redundant lsr instructions in stub code."
    },
    {
      "name": "benchmark_405",
      "inefficiency": "Replace a call to maxabs with an equivalent reduce_vector_op",
      "optimization": "Replace a call to maxabs with an equivalent reduce_vector_op"
    },
    {
      "name": "benchmark_406",
      "inefficiency": "[ConstantRange] Replace getMaxValue+zext with getLowBitsSet.",
      "optimization": "[ConstantRange] Replace getMaxValue+zext with getLowBitsSet."
    },
    {
      "name": "benchmark_407",
      "inefficiency": "Core: Ldap: LdapDirectory: use std::sort instead of",
      "optimization": "Core: Ldap: LdapDirectory: use std::sort instead of"
    },
    {
      "name": "benchmark_408",
      "inefficiency": "DocumentUrlDB: Use custom lmdb env flags",
      "optimization": "DocumentUrlDB: Use custom lmdb env flags"
    },
    {
      "name": "benchmark_409",
      "inefficiency": "Port commit 95321 (stoklund) from llvm-gcc: Increase inliner",
      "optimization": "Port commit 95321 (stoklund) from llvm-gcc: Increase inliner"
    },
    {
      "name": "benchmark_410",
      "inefficiency": "QErrorMessage: add some strategic qMove()s",
      "optimization": "QErrorMessage: add some strategic qMove()s"
    },
    {
      "name": "benchmark_411",
      "inefficiency": "Enable CopyForwardMarkCompactHybrid mode",
      "optimization": "Enable CopyForwardMarkCompactHybrid mode"
    },
    {
      "name": "benchmark_412",
      "inefficiency": "in trilinos builder and solver : changing to auto& to avoid",
      "optimization": "in trilinos builder and solver : changing to auto& to avoid"
    },
    {
      "name": "benchmark_413",
      "inefficiency": "qstring-uneeded-heap-allocations: indexOf() is also bad with",
      "optimization": "qstring-uneeded-heap-allocations: indexOf() is also bad with"
    },
    {
      "name": "benchmark_414",
      "inefficiency": "remove usages of eval() since Stan does not use Eigen's",
      "optimization": "remove usages of eval() since Stan does not use Eigen's"
    },
    {
      "name": "benchmark_415",
      "inefficiency": "[expression] Use a insn_store directly in case of var = value",
      "optimization": "[expression] Use a insn_store directly in case of var = value"
    },
    {
      "name": "benchmark_416",
      "inefficiency": "disable all omp nesting",
      "optimization": "disable all omp nesting"
    },
    {
      "name": "benchmark_417",
      "inefficiency": "Spatialite: make creation of database much faster with",
      "optimization": "Spatialite: make creation of database much faster with"
    },
    {
      "name": "benchmark_418",
      "inefficiency": "Use pdqsort and not pdq_sort in split_sort",
      "optimization": "Use pdqsort and not pdq_sort in split_sort"
    },
    {
      "name": "benchmark_419",
      "inefficiency": "screen: Compile dingu regexes with MULTILINE option",
      "optimization": "screen: Compile dingu regexes with MULTILINE option"
    },
    {
      "name": "benchmark_420",
      "inefficiency": "made cast to Complex via int explicit for VC++ 64 bit",
      "optimization": "made cast to Complex via int explicit for VC++ 64 bit"
    },
    {
      "name": "benchmark_421",
      "inefficiency": "xrRenderPC_GL/rgl_shaders.cpp: removed redundant static cast",
      "optimization": "xrRenderPC_GL/rgl_shaders.cpp: removed redundant static cast"
    },
    {
      "name": "benchmark_422",
      "inefficiency": "refactor(zscript): optimize 'SETV reg,X - TRACER reg' to",
      "optimization": "refactor(zscript): optimize 'SETV reg,X - TRACER reg' to"
    },
    {
      "name": "benchmark_423",
      "inefficiency": "Improve the implementation of the 'isnan' shim",
      "optimization": "Improve the implementation of the 'isnan' shim"
    },
    {
      "name": "benchmark_424",
      "inefficiency": "perform division in type T",
      "optimization": "perform division in type T"
    },
    {
      "name": "benchmark_425",
      "inefficiency": "compositor: Minimize time we hold renderer resources",
      "optimization": "compositor: Minimize time we hold renderer resources"
    },
    {
      "name": "benchmark_426",
      "inefficiency": "PPU: minor improvement for LWARX/LDARX",
      "optimization": "PPU: minor improvement for LWARX/LDARX"
    },
    {
      "name": "benchmark_427",
      "inefficiency": "Kernel: reduce virtual memory allocation when kmalloc needs",
      "optimization": "Kernel: reduce virtual memory allocation when kmalloc needs"
    },
    {
      "name": "benchmark_428",
      "inefficiency": "[X86] Use AND32ri8 instead of AND64ri8 in Asan code in",
      "optimization": "[X86] Use AND32ri8 instead of AND64ri8 in Asan code in"
    },
    {
      "name": "benchmark_429",
      "inefficiency": "Instead of IntVect{0,0,0} use IntVect{AMREX_DECL(0,0,0)}",
      "optimization": "Instead of IntVect{0,0,0} use IntVect{AMREX_DECL(0,0,0)}"
    },
    {
      "name": "benchmark_430",
      "inefficiency": "Allow default inliner policy to be overridden",
      "optimization": "Allow default inliner policy to be overridden"
    },
    {
      "name": "benchmark_431",
      "inefficiency": "As pointed out by Duncan, I accidentally dropped the first",
      "optimization": "As pointed out by Duncan, I accidentally dropped the first"
    },
    {
      "name": "benchmark_432",
      "inefficiency": "use static_cast<> instead of reinterpret_cast<>.",
      "optimization": "use static_cast<> instead of reinterpret_cast<>."
    },
    {
      "name": "benchmark_433",
      "inefficiency": "USDScene : Improve `writeSet()` performance",
      "optimization": "USDScene : Improve `writeSet()` performance"
    },
    {
      "name": "benchmark_434",
      "inefficiency": "Because variable flags are now used for compilation, it is no",
      "optimization": "Because variable flags are now used for compilation, it is no"
    },
    {
      "name": "benchmark_435",
      "inefficiency": "PERF: SmapsFileParser unnecessary dynamic_cast",
      "optimization": "PERF: SmapsFileParser unnecessary dynamic_cast"
    },
    {
      "name": "benchmark_436",
      "inefficiency": "replace quotientE by intDivide",
      "optimization": "replace quotientE by intDivide"
    },
    {
      "name": "benchmark_437",
      "inefficiency": "Explicitly unpoison FDs for MSan.",
      "optimization": "Explicitly unpoison FDs for MSan."
    },
    {
      "name": "benchmark_438",
      "inefficiency": "use dynamic-1 in for_each_node_parallel",
      "optimization": "use dynamic-1 in for_each_node_parallel"
    },
    {
      "name": "benchmark_439",
      "inefficiency": "Use lsolve instead of full solve",
      "optimization": "Use lsolve instead of full solve"
    },
    {
      "name": "benchmark_440",
      "inefficiency": "PERF: cppcheck copy constructor",
      "optimization": "PERF: cppcheck copy constructor"
    },
    {
      "name": "benchmark_441",
      "inefficiency": "Initialise variable to shut up compiler warning",
      "optimization": "Initialise variable to shut up compiler warning"
    },
    {
      "name": "benchmark_442",
      "inefficiency": "Disable (very slow) lock assertions of NDEBUG.",
      "optimization": "Disable (very slow) lock assertions of NDEBUG."
    },
    {
      "name": "benchmark_443",
      "inefficiency": "[X86] Teach fastisel to use VLX VMOVNTDQA for v4f64 and",
      "optimization": "[X86] Teach fastisel to use VLX VMOVNTDQA for v4f64 and"
    },
    {
      "name": "benchmark_444",
      "inefficiency": "CompilePass: Moved call to MIPdomains to before optimize call",
      "optimization": "CompilePass: Moved call to MIPdomains to before optimize call"
    },
    {
      "name": "benchmark_445",
      "inefficiency": "Change from map to unordered_map.",
      "optimization": "Change from map to unordered_map."
    },
    {
      "name": "benchmark_446",
      "inefficiency": "[set] Use compiler methods to build a set",
      "optimization": "[set] Use compiler methods to build a set"
    },
    {
      "name": "benchmark_447",
      "inefficiency": "Updating the VoiceConnection class.",
      "optimization": "Updating the VoiceConnection class."
    },
    {
      "name": "benchmark_448",
      "inefficiency": "[ConstantRange] Use ternary operator instead of 'if' to avoid",
      "optimization": "[ConstantRange] Use ternary operator instead of 'if' to avoid"
    },
    {
      "name": "benchmark_449",
      "inefficiency": "Removes explicit thread number",
      "optimization": "Removes explicit thread number"
    },
    {
      "name": "benchmark_450",
      "inefficiency": "[kutil] Calculate block-size order with clz",
      "optimization": "[kutil] Calculate block-size order with clz"
    },
    {
      "name": "benchmark_451",
      "inefficiency": "Reduce malloc thrashing.",
      "optimization": "Reduce malloc thrashing."
    },
    {
      "name": "benchmark_452",
      "inefficiency": "Vector3 Tools::setLength(Vector3&& v, len) : return std::move",
      "optimization": "Vector3 Tools::setLength(Vector3&& v, len) : return std::move"
    },
    {
      "name": "benchmark_453",
      "inefficiency": "Replace pow() with powf() during watermark generation",
      "optimization": "Replace pow() with powf() during watermark generation"
    },
    {
      "name": "benchmark_454",
      "inefficiency": "Fixed sliceParam to free memory",
      "optimization": "Fixed sliceParam to free memory"
    },
    {
      "name": "benchmark_455",
      "inefficiency": "use c++11 for instead of boost for mnconf count",
      "optimization": "use c++11 for instead of boost for mnconf count"
    },
    {
      "name": "benchmark_456",
      "inefficiency": "Make use of atomic memory model in SingletonPtr.",
      "optimization": "Make use of atomic memory model in SingletonPtr."
    },
    {
      "name": "benchmark_457",
      "inefficiency": "Coverity finding CID 147829 Bad bit shift operation",
      "optimization": "Coverity finding CID 147829 Bad bit shift operation"
    },
    {
      "name": "benchmark_458",
      "inefficiency": "Add transpiler flag for new optimizations #309",
      "optimization": "Add transpiler flag for new optimizations #309"
    },
    {
      "name": "benchmark_459",
      "inefficiency": "Defer compilation of mzn_reverse_map_var predicates.",
      "optimization": "Defer compilation of mzn_reverse_map_var predicates."
    },
    {
      "name": "benchmark_460",
      "inefficiency": "We need to use double-checked locking for lazy initialization",
      "optimization": "We need to use double-checked locking for lazy initialization"
    },
    {
      "name": "benchmark_461",
      "inefficiency": "Use std::fill_n for LRU initialization",
      "optimization": "Use std::fill_n for LRU initialization"
    },
    {
      "name": "benchmark_462",
      "inefficiency": "jsapi-util: Debug values without a toString()",
      "optimization": "jsapi-util: Debug values without a toString()"
    },
    {
      "name": "benchmark_463",
      "inefficiency": "don't crash in wxGetEmptyString(): it's now a #define for",
      "optimization": "don't crash in wxGetEmptyString(): it's now a #define for"
    },
    {
      "name": "benchmark_464",
      "inefficiency": "Add CachedHashStringRef::data().",
      "optimization": "Add CachedHashStringRef::data()."
    },
    {
      "name": "benchmark_465",
      "inefficiency": "LMR for captures not cracking alpha",
      "optimization": "LMR for captures not cracking alpha"
    },
    {
      "name": "benchmark_466",
      "inefficiency": "Disable recomp in MimicInterpreterFrameShape",
      "optimization": "Disable recomp in MimicInterpreterFrameShape"
    },
    {
      "name": "benchmark_467",
      "inefficiency": "avcodec: Enable DNxHD frame threading",
      "optimization": "avcodec: Enable DNxHD frame threading"
    },
    {
      "name": "benchmark_468",
      "inefficiency": "Stop using operator[] on iterators in for_each[_n]",
      "optimization": "Stop using operator[] on iterators in for_each[_n]"
    },
    {
      "name": "benchmark_469",
      "inefficiency": "Avoid reusing mem ref in fbits2i evaluator in Z codegen",
      "optimization": "Avoid reusing mem ref in fbits2i evaluator in Z codegen"
    },
    {
      "name": "benchmark_470",
      "inefficiency": "[Driver] Do a PATH lookup if needed when using",
      "optimization": "[Driver] Do a PATH lookup if needed when using"
    },
    {
      "name": "benchmark_471",
      "inefficiency": "strings, number theory, implementation, O(n)",
      "optimization": "strings, number theory, implementation, O(n)"
    },
    {
      "name": "benchmark_472",
      "inefficiency": "Align Rijdael SIMD data to natural alignment This should",
      "optimization": "Align Rijdael SIMD data to natural alignment This should"
    },
    {
      "name": "benchmark_473",
      "inefficiency": "Use logical comparison in minEvaluator",
      "optimization": "Use logical comparison in minEvaluator"
    },
    {
      "name": "benchmark_474",
      "inefficiency": "Fixed critical bug causing tasks to leak when serially",
      "optimization": "Fixed critical bug causing tasks to leak when serially"
    },
    {
      "name": "benchmark_475",
      "inefficiency": "AlembicScene : Set Ogawa stream count to 4",
      "optimization": "AlembicScene : Set Ogawa stream count to 4"
    },
    {
      "name": "benchmark_476",
      "inefficiency": "Attempt to elide Hexagon offload passes if they are not",
      "optimization": "Attempt to elide Hexagon offload passes if they are not"
    },
    {
      "name": "benchmark_477",
      "inefficiency": "Set nodeCountThreshold to 16k for >= hot compilations",
      "optimization": "Set nodeCountThreshold to 16k for >= hot compilations"
    },
    {
      "name": "benchmark_478",
      "inefficiency": "Run inliner pass before lower ray tracing pass for all RT",
      "optimization": "Run inliner pass before lower ray tracing pass for all RT"
    },
    {
      "name": "benchmark_479",
      "inefficiency": "Remove duplicate successors from indirectbr instructions",
      "optimization": "Remove duplicate successors from indirectbr instructions"
    },
    {
      "name": "benchmark_480",
      "inefficiency": "Use Bionic's __pthread_cond_timedwait_relative",
      "optimization": "Use Bionic's __pthread_cond_timedwait_relative"
    },
    {
      "name": "benchmark_481",
      "inefficiency": "use Caster instead of static_cast",
      "optimization": "use Caster instead of static_cast"
    },
    {
      "name": "benchmark_482",
      "inefficiency": "Bug 539876 - nanojit: optimize away 'y = mul x, 1'.",
      "optimization": "Bug 539876 - nanojit: optimize away 'y = mul x, 1'."
    },
    {
      "name": "benchmark_483",
      "inefficiency": "Improved handling of OPENMP loop.",
      "optimization": "Improved handling of OPENMP loop."
    },
    {
      "name": "benchmark_484",
      "inefficiency": "replace the auto w = width() etc. with std::size_t rather",
      "optimization": "replace the auto w = width() etc. with std::size_t rather"
    },
    {
      "name": "benchmark_485",
      "inefficiency": "copyable-polymorphic: minor performance optimization",
      "optimization": "copyable-polymorphic: minor performance optimization"
    },
    {
      "name": "benchmark_486",
      "inefficiency": "Now that PR633 is implemented, the CBE can know to emit",
      "optimization": "Now that PR633 is implemented, the CBE can know to emit"
    },
    {
      "name": "benchmark_487",
      "inefficiency": "Setting Cplex parallel mode to opportunistic in LSTOA.",
      "optimization": "Setting Cplex parallel mode to opportunistic in LSTOA."
    },
    {
      "name": "benchmark_488",
      "inefficiency": "[DAGCombiner] Dropped explicit (sra 0, x) -> 0 and (sra -1,",
      "optimization": "[DAGCombiner] Dropped explicit (sra 0, x) -> 0 and (sra -1,"
    },
    {
      "name": "benchmark_489",
      "inefficiency": "reduce cpu usage during compilation",
      "optimization": "reduce cpu usage during compilation"
    },
    {
      "name": "benchmark_490",
      "inefficiency": "Improved MPS sum routine to do less copying.",
      "optimization": "Improved MPS sum routine to do less copying."
    },
    {
      "name": "benchmark_491",
      "inefficiency": "performance for crown and xyz_dragon now on par with 2.0",
      "optimization": "performance for crown and xyz_dragon now on par with 2.0"
    },
    {
      "name": "benchmark_492",
      "inefficiency": "Use __builtin_clz to compute log2 when available",
      "optimization": "Use __builtin_clz to compute log2 when available"
    },
    {
      "name": "benchmark_493",
      "inefficiency": "branches/5.1:",
      "optimization": "branches/5.1:"
    },
    {
      "name": "benchmark_494",
      "inefficiency": "Always optimize binary nullary CompactTagTests (e.g., if e",
      "optimization": "Always optimize binary nullary CompactTagTests (e.g., if e"
    },
    {
      "name": "benchmark_495",
      "inefficiency": "COFF: Parallelize Writer::writeSections().",
      "optimization": "COFF: Parallelize Writer::writeSections()."
    },
    {
      "name": "benchmark_496",
      "inefficiency": "Small update/fix to optimization check in `fill()`",
      "optimization": "Small update/fix to optimization check in `fill()`"
    },
    {
      "name": "benchmark_497",
      "inefficiency": "Change OptimizeLevelStyleCompaction from 256ull << 20 to",
      "optimization": "Change OptimizeLevelStyleCompaction from 256ull << 20 to"
    },
    {
      "name": "benchmark_498",
      "inefficiency": "inline asm version of CLZ() in intel syntax",
      "optimization": "inline asm version of CLZ() in intel syntax"
    },
    {
      "name": "benchmark_499",
      "inefficiency": "Use the fast operator+ (in the form of operator%)",
      "optimization": "Use the fast operator+ (in the form of operator%)"
    },
    {
      "name": "benchmark_500",
      "inefficiency": "Instead of merging all heap DSNodes, simply make them all",
      "optimization": "Instead of merging all heap DSNodes, simply make them all"
    },
    {
      "name": "benchmark_501",
      "inefficiency": "specialize insert for other sets.  MUCH FASTER",
      "optimization": "specialize insert for other sets.  MUCH FASTER"
    },
    {
      "name": "benchmark_502",
      "inefficiency": "Only use QList::reserve() when QT > 4.6.x",
      "optimization": "Only use QList::reserve() when QT > 4.6.x"
    },
    {
      "name": "benchmark_503",
      "inefficiency": "Get rid of if/else by loop transformation",
      "optimization": "Get rid of if/else by loop transformation"
    },
    {
      "name": "benchmark_504",
      "inefficiency": "* Rewrite loop to be slightly more efficient (arguably) * Fix",
      "optimization": "* Rewrite loop to be slightly more efficient (arguably) * Fix"
    },
    {
      "name": "benchmark_505",
      "inefficiency": "Skip the red-zone before allocating on the stack.",
      "optimization": "Skip the red-zone before allocating on the stack."
    },
    {
      "name": "benchmark_506",
      "inefficiency": "Reapply 95979, a compile-time speedup, now that the bug it",
      "optimization": "Reapply 95979, a compile-time speedup, now that the bug it"
    },
    {
      "name": "benchmark_507",
      "inefficiency": "Remove needless bitwise-AND.",
      "optimization": "Remove needless bitwise-AND."
    },
    {
      "name": "benchmark_508",
      "inefficiency": "Abort compilation of a regular expression if we run out of",
      "optimization": "Abort compilation of a regular expression if we run out of"
    },
    {
      "name": "benchmark_509",
      "inefficiency": "Remove a cast again, after it was shown to worsen Windows",
      "optimization": "Remove a cast again, after it was shown to worsen Windows"
    },
    {
      "name": "benchmark_510",
      "inefficiency": "port: Return const reference from conf() accessor",
      "optimization": "port: Return const reference from conf() accessor"
    },
    {
      "name": "benchmark_511",
      "inefficiency": "guile: enable the recursive use of the evaluator.",
      "optimization": "guile: enable the recursive use of the evaluator."
    },
    {
      "name": "benchmark_512",
      "inefficiency": "Fixed algorithm in",
      "optimization": "Fixed algorithm in"
    },
    {
      "name": "benchmark_513",
      "inefficiency": "Emit operands of mathops before emitting mathops themselves",
      "optimization": "Emit operands of mathops before emitting mathops themselves"
    },
    {
      "name": "benchmark_514",
      "inefficiency": "Capture `population` result by const reference",
      "optimization": "Capture `population` result by const reference"
    },
    {
      "name": "benchmark_515",
      "inefficiency": "Move to vtkNew to avoid manual memory management",
      "optimization": "Move to vtkNew to avoid manual memory management"
    },
    {
      "name": "benchmark_516",
      "inefficiency": "krdb: Call xrdb with -nocpp",
      "optimization": "krdb: Call xrdb with -nocpp"
    },
    {
      "name": "benchmark_517",
      "inefficiency": "fixed SSE-optimized cmp_8u (ticket #1530)",
      "optimization": "fixed SSE-optimized cmp_8u (ticket #1530)"
    },
    {
      "name": "benchmark_518",
      "inefficiency": "Fix SSE2 version of convolve()",
      "optimization": "Fix SSE2 version of convolve()"
    },
    {
      "name": "benchmark_519",
      "inefficiency": "Use a universal reference to avoid extra std::string copies",
      "optimization": "Use a universal reference to avoid extra std::string copies"
    },
    {
      "name": "benchmark_520",
      "inefficiency": "Map constants to the global variable realizing them using a",
      "optimization": "Map constants to the global variable realizing them using a"
    },
    {
      "name": "benchmark_521",
      "inefficiency": "enabling bvh8 only on AVX2 machines",
      "optimization": "enabling bvh8 only on AVX2 machines"
    },
    {
      "name": "benchmark_522",
      "inefficiency": "[librpbase] RpFile_win32.cpp: Cast all DWORDs to int64_t",
      "optimization": "[librpbase] RpFile_win32.cpp: Cast all DWORDs to int64_t"
    },
    {
      "name": "benchmark_523",
      "inefficiency": "replaced bit shift with vcl_pow(2,octave-1) b/c octave-1 may",
      "optimization": "replaced bit shift with vcl_pow(2,octave-1) b/c octave-1 may"
    },
    {
      "name": "benchmark_524",
      "inefficiency": "ENH: On unix compile faster, since make will make sure that",
      "optimization": "ENH: On unix compile faster, since make will make sure that"
    },
    {
      "name": "benchmark_525",
      "inefficiency": "#5031 Summary Data : Only use openMP on open of summary file",
      "optimization": "#5031 Summary Data : Only use openMP on open of summary file"
    },
    {
      "name": "benchmark_526",
      "inefficiency": "[WebAssembly] Improve WasmSignatureDenseMapInfo.",
      "optimization": "[WebAssembly] Improve WasmSignatureDenseMapInfo."
    },
    {
      "name": "benchmark_527",
      "inefficiency": "use movsxd instead of shr/shl",
      "optimization": "use movsxd instead of shr/shl"
    },
    {
      "name": "benchmark_528",
      "inefficiency": "branches/zip: page_zip_compress(): Do not call",
      "optimization": "branches/zip: page_zip_compress(): Do not call"
    },
    {
      "name": "benchmark_529",
      "inefficiency": "optimize do_end to not query the SS register twice",
      "optimization": "optimize do_end to not query the SS register twice"
    },
    {
      "name": "benchmark_530",
      "inefficiency": "Don't sync with C library I/O buffers",
      "optimization": "Don't sync with C library I/O buffers"
    },
    {
      "name": "benchmark_531",
      "inefficiency": "Optimise Glass::Inverter::has_positions()",
      "optimization": "Optimise Glass::Inverter::has_positions()"
    },
    {
      "name": "benchmark_532",
      "inefficiency": "Minor speed tweak.",
      "optimization": "Minor speed tweak."
    },
    {
      "name": "benchmark_533",
      "inefficiency": "Fix use of Log2 ready for upstream llvm change (#1962)",
      "optimization": "Fix use of Log2 ready for upstream llvm change (#1962)"
    },
    {
      "name": "benchmark_534",
      "inefficiency": "ipa: rkisp1: goc: Mark default gamma table as static",
      "optimization": "ipa: rkisp1: goc: Mark default gamma table as static"
    },
    {
      "name": "benchmark_535",
      "inefficiency": "Tweak best thread selection logic",
      "optimization": "Tweak best thread selection logic"
    },
    {
      "name": "benchmark_536",
      "inefficiency": "Variant: Converted from strtol/substr to",
      "optimization": "Variant: Converted from strtol/substr to"
    },
    {
      "name": "benchmark_537",
      "inefficiency": "Add an option to mesh.calc_tessface() to get rid of polygons",
      "optimization": "Add an option to mesh.calc_tessface() to get rid of polygons"
    },
    {
      "name": "benchmark_538",
      "inefficiency": "vpr: Change --place_delay_model default to 'delta'",
      "optimization": "vpr: Change --place_delay_model default to 'delta'"
    },
    {
      "name": "benchmark_539",
      "inefficiency": "Drop divs before adding array-out-of-bounds assumptions",
      "optimization": "Drop divs before adding array-out-of-bounds assumptions"
    },
    {
      "name": "benchmark_540",
      "inefficiency": "[X86] Properly account for the immediate being multiplied by",
      "optimization": "[X86] Properly account for the immediate being multiplied by"
    },
    {
      "name": "benchmark_541",
      "inefficiency": "Use the SizeOfEncodedValue function instead of magic",
      "optimization": "Use the SizeOfEncodedValue function instead of magic"
    },
    {
      "name": "benchmark_542",
      "inefficiency": "[Model Optimize Tool] change gflags: int8_mode ->",
      "optimization": "[Model Optimize Tool] change gflags: int8_mode ->"
    },
    {
      "name": "benchmark_543",
      "inefficiency": "Improve reg pressure sim for small 64-bit consts",
      "optimization": "Improve reg pressure sim for small 64-bit consts"
    },
    {
      "name": "benchmark_544",
      "inefficiency": "Fix small memory issue in psdpad(...) in psd_utils.cpp",
      "optimization": "Fix small memory issue in psdpad(...) in psd_utils.cpp"
    },
    {
      "name": "benchmark_545",
      "inefficiency": "The heap-allocated trampoline functions were cut off on some",
      "optimization": "The heap-allocated trampoline functions were cut off on some"
    },
    {
      "name": "benchmark_546",
      "inefficiency": "remove inlining of VCP1CLJRMM::_calculatePairs",
      "optimization": "remove inlining of VCP1CLJRMM::_calculatePairs"
    },
    {
      "name": "benchmark_547",
      "inefficiency": "ASYLUM: Pipes puzzle: replace log(x)/log(2) with",
      "optimization": "ASYLUM: Pipes puzzle: replace log(x)/log(2) with"
    },
    {
      "name": "benchmark_548",
      "inefficiency": "Allocate the Cord element in the arena, instead of allocating",
      "optimization": "Allocate the Cord element in the arena, instead of allocating"
    },
    {
      "name": "benchmark_549",
      "inefficiency": "Optimize #define analysis for the common case of a single",
      "optimization": "Optimize #define analysis for the common case of a single"
    },
    {
      "name": "benchmark_550",
      "inefficiency": "Do not allocate args space for leaf methods on X86",
      "optimization": "Do not allocate args space for leaf methods on X86"
    },
    {
      "name": "benchmark_551",
      "inefficiency": "vpr: Change default packer high fanout thresholds",
      "optimization": "vpr: Change default packer high fanout thresholds"
    },
    {
      "name": "benchmark_552",
      "inefficiency": "Don't call metaObject() several times",
      "optimization": "Don't call metaObject() several times"
    },
    {
      "name": "benchmark_553",
      "inefficiency": "Pass `-m 16M` by default to perf record",
      "optimization": "Pass `-m 16M` by default to perf record"
    },
    {
      "name": "benchmark_554",
      "inefficiency": "Simplify overflowing_cast",
      "optimization": "Simplify overflowing_cast"
    },
    {
      "name": "benchmark_555",
      "inefficiency": "fix: optimization: PVS-Studio warning V830",
      "optimization": "fix: optimization: PVS-Studio warning V830"
    },
    {
      "name": "benchmark_556",
      "inefficiency": "[CRYPTO] Make heavy hash work at cross-compiling for MINGW",
      "optimization": "[CRYPTO] Make heavy hash work at cross-compiling for MINGW"
    },
    {
      "name": "benchmark_557",
      "inefficiency": "Slightly faster number check, now only a single cycle.",
      "optimization": "Slightly faster number check, now only a single cycle."
    },
    {
      "name": "benchmark_558",
      "inefficiency": "8222079: Don't use memset to initialize fields decode_env",
      "optimization": "8222079: Don't use memset to initialize fields decode_env"
    },
    {
      "name": "benchmark_559",
      "inefficiency": "literal_number: Use static_cast instead of dynamic_cast",
      "optimization": "literal_number: Use static_cast instead of dynamic_cast"
    },
    {
      "name": "benchmark_560",
      "inefficiency": "Use correct OpenMP directive for INDEX_I/J/K results.",
      "optimization": "Use correct OpenMP directive for INDEX_I/J/K results."
    },
    {
      "name": "benchmark_561",
      "inefficiency": "Fix optimization of do loops",
      "optimization": "Fix optimization of do loops"
    },
    {
      "name": "benchmark_562",
      "inefficiency": "Conor Hoekstra's ITM anti-pattern talk reminded me why I",
      "optimization": "Conor Hoekstra's ITM anti-pattern talk reminded me why I"
    },
    {
      "name": "benchmark_563",
      "inefficiency": "Time: 3 ms (88.98%), Space: 16.7 MB (43.41%) - LeetHub",
      "optimization": "Time: 3 ms (88.98%), Space: 16.7 MB (43.41%) - LeetHub"
    },
    {
      "name": "benchmark_564",
      "inefficiency": "We don't have any FP extloads",
      "optimization": "We don't have any FP extloads"
    },
    {
      "name": "benchmark_565",
      "inefficiency": "Improve the `-filter-print-funcs` option to skip the banner",
      "optimization": "Improve the `-filter-print-funcs` option to skip the banner"
    },
    {
      "name": "benchmark_566",
      "inefficiency": "Don't rely on uninitialized data",
      "optimization": "Don't rely on uninitialized data"
    },
    {
      "name": "benchmark_567",
      "inefficiency": "Expose generate_clear as an option.",
      "optimization": "Expose generate_clear as an option."
    },
    {
      "name": "benchmark_568",
      "inefficiency": "[block] Move_inc instead of move in assignment",
      "optimization": "[block] Move_inc instead of move in assignment"
    },
    {
      "name": "benchmark_569",
      "inefficiency": "engine: mozjs60 changes for GC sweeping tracking",
      "optimization": "engine: mozjs60 changes for GC sweeping tracking"
    },
    {
      "name": "benchmark_570",
      "inefficiency": "Use const ref to avoid range loop copy.",
      "optimization": "Use const ref to avoid range loop copy."
    },
    {
      "name": "benchmark_571",
      "inefficiency": "hotfix: don't pre-size hashmap in Rewriter",
      "optimization": "hotfix: don't pre-size hashmap in Rewriter"
    },
    {
      "name": "benchmark_572",
      "inefficiency": "change std::sort to std::stable_sort. Bench: 23942892",
      "optimization": "change std::sort to std::stable_sort. Bench: 23942892"
    },
    {
      "name": "benchmark_573",
      "inefficiency": "cppcheck : CKernelWifi : start() : Parameter 'wd' is passed",
      "optimization": "cppcheck : CKernelWifi : start() : Parameter 'wd' is passed"
    },
    {
      "name": "benchmark_574",
      "inefficiency": "pull MarkFlagResult out from between an",
      "optimization": "pull MarkFlagResult out from between an"
    },
    {
      "name": "benchmark_575",
      "inefficiency": "VarAction2: Avoid turning skip on zero/LSB set sequences into",
      "optimization": "VarAction2: Avoid turning skip on zero/LSB set sequences into"
    },
    {
      "name": "benchmark_576",
      "inefficiency": "fix precaching for omp parallelization",
      "optimization": "fix precaching for omp parallelization"
    },
    {
      "name": "benchmark_577",
      "inefficiency": "use `rapidjson::Value::SizeType` as the type for storing and",
      "optimization": "use `rapidjson::Value::SizeType` as the type for storing and"
    },
    {
      "name": "benchmark_578",
      "inefficiency": "Replace a memcpy with std::copy_n",
      "optimization": "Replace a memcpy with std::copy_n"
    },
    {
      "name": "benchmark_579",
      "inefficiency": "Adjust big callee threshold on z Systems",
      "optimization": "Adjust big callee threshold on z Systems"
    },
    {
      "name": "benchmark_580",
      "inefficiency": "IVGCVSW-2421 Remove the template-based version of",
      "optimization": "IVGCVSW-2421 Remove the template-based version of"
    },
    {
      "name": "benchmark_581",
      "inefficiency": "reduce register pressure in cpunr()",
      "optimization": "reduce register pressure in cpunr()"
    },
    {
      "name": "benchmark_582",
      "inefficiency": "[JAEGER] Add fast-path for JSOP_THIS.",
      "optimization": "[JAEGER] Add fast-path for JSOP_THIS."
    },
    {
      "name": "benchmark_583",
      "inefficiency": "Use std::swap instead of new variables.",
      "optimization": "Use std::swap instead of new variables."
    },
    {
      "name": "benchmark_584",
      "inefficiency": "used mxGetNumberOfElements instead of product of sizes",
      "optimization": "used mxGetNumberOfElements instead of product of sizes"
    },
    {
      "name": "benchmark_585",
      "inefficiency": "Reverse the order for collecting the parts of an addrec. The",
      "optimization": "Reverse the order for collecting the parts of an addrec. The"
    },
    {
      "name": "benchmark_586",
      "inefficiency": "Use -fomit-frame-pointer for -O1 and higher when compiling to",
      "optimization": "Use -fomit-frame-pointer for -O1 and higher when compiling to"
    },
    {
      "name": "benchmark_587",
      "inefficiency": "[ValueTracking] Enabling ValueTracking patch by default",
      "optimization": "[ValueTracking] Enabling ValueTracking patch by default"
    },
    {
      "name": "benchmark_588",
      "inefficiency": "Use Pinned Arena for plotting. Avoids unneeded memory",
      "optimization": "Use Pinned Arena for plotting. Avoids unneeded memory"
    },
    {
      "name": "benchmark_589",
      "inefficiency": "compilation optimization for kron_grad_kernel (#57822)",
      "optimization": "compilation optimization for kron_grad_kernel (#57822)"
    },
    {
      "name": "benchmark_590",
      "inefficiency": "MITAB: avoid int32 overflow in TABIDFile::Open()",
      "optimization": "MITAB: avoid int32 overflow in TABIDFile::Open()"
    },
    {
      "name": "benchmark_591",
      "inefficiency": "Adding a solve status for CplexLPEngine etc.",
      "optimization": "Adding a solve status for CplexLPEngine etc."
    },
    {
      "name": "benchmark_592",
      "inefficiency": "[JAEGER] Use cheaper comparison for GETPROP type checks.",
      "optimization": "[JAEGER] Use cheaper comparison for GETPROP type checks."
    },
    {
      "name": "benchmark_593",
      "inefficiency": "Fix T85779: Cycles not using all threads when using",
      "optimization": "Fix T85779: Cycles not using all threads when using"
    },
    {
      "name": "benchmark_594",
      "inefficiency": "[TableGen] Use vector::append instead of looping and calling",
      "optimization": "[TableGen] Use vector::append instead of looping and calling"
    },
    {
      "name": "benchmark_595",
      "inefficiency": "fix: simplify use of multi_visitor; improve crash resilience",
      "optimization": "fix: simplify use of multi_visitor; improve crash resilience"
    },
    {
      "name": "benchmark_596",
      "inefficiency": "Use static_cast<float>(...) instead C-style cast",
      "optimization": "Use static_cast<float>(...) instead C-style cast"
    },
    {
      "name": "benchmark_597",
      "inefficiency": "- optimize loading: Add const here and there and remove a",
      "optimization": "- optimize loading: Add const here and there and remove a"
    },
    {
      "name": "benchmark_598",
      "inefficiency": "Qt.core: Only gather included moc_*.cpp files if necessary",
      "optimization": "Qt.core: Only gather included moc_*.cpp files if necessary"
    },
    {
      "name": "benchmark_599",
      "inefficiency": "setting FTZ and DAZ flags at rtcInit, otherwise risk of",
      "optimization": "setting FTZ and DAZ flags at rtcInit, otherwise risk of"
    },
    {
      "name": "benchmark_600",
      "inefficiency": "matrix inverse without arma::inv",
      "optimization": "matrix inverse without arma::inv"
    }
  ]
}
