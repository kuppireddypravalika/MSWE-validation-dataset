{
  "benchmarks": [
    {
      "name": "benchmark_v1_001",
      "inefficiency": "Redundant computations",
      "optimization": "Precompute values"
    },
    {
      "name": "benchmark_v1_002",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_v1_003",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_004",
      "inefficiency": "Unwanted type conversions",
      "optimization": "Avoid unnecessary type conversions"
    },
    {
      "name": "benchmark_v1_005",
      "inefficiency": "Redundant computations",
      "optimization": "Precompute values"
    },
    {
      "name": "benchmark_v1_006",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_007",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_v1_008",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_009",
      "inefficiency": "Redundant computations",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_010",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_011",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_012",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_013",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_014",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Utilize architecture-specific features"
    },
    {
      "name": "benchmark_v1_015",
      "inefficiency": "Missing optimization flags",
      "optimization": "Tune build or compile flags"
    },
    {
      "name": "benchmark_v1_016",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_017",
      "inefficiency": "Missing early-exit checks",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_v1_018",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_019",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_020",
      "inefficiency": "Redundant computations",
      "optimization": "Precompute values"
    },
    {
      "name": "benchmark_v1_021",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Utilize architecture-specific features"
    },
    {
      "name": "benchmark_v1_022",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Refine data structures"
    },
    {
      "name": "benchmark_v1_023",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Utilize architecture-specific features"
    },
    {
      "name": "benchmark_v1_024",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_025",
      "inefficiency": "Missing optimization flags",
      "optimization": "Tune build or compile flags"
    },
    {
      "name": "benchmark_v1_026",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_v1_027",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_028",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_029",
      "inefficiency": "Redundant computations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_030",
      "inefficiency": "Unwanted type conversions",
      "optimization": "Avoid unnecessary type conversions"
    },
    {
      "name": "benchmark_v1_031",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_032",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_033",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_034",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_035",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_036",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_037",
      "inefficiency": "Redundant computations",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_v1_038",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Utilize architecture-specific features"
    },
    {
      "name": "benchmark_v1_039",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_v1_040",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_041",
      "inefficiency": "Missing optimization flags",
      "optimization": "Tune build or compile flags"
    },
    {
      "name": "benchmark_v1_042",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_v1_043",
      "inefficiency": "Redundant computations",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_v1_044",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_v1_045",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_046",
      "inefficiency": "Redundant computations",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_v1_047",
      "inefficiency": "Missing early-exit checks",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_v1_048",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_v1_049",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_v1_050",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_v1_051",
      "inefficiency": "Redundant computations",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_052",
      "inefficiency": "Disabled or broken parallelism",
      "optimization": "Fix or enable parallelism"
    },
    {
      "name": "benchmark_v1_053",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_054",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_055",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_056",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_057",
      "inefficiency": "Unwanted type conversions",
      "optimization": "Avoid unnecessary type conversions"
    },
    {
      "name": "benchmark_v1_058",
      "inefficiency": "Redundant computations",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_059",
      "inefficiency": "Missing early-exit checks",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_v1_060",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_061",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Utilize architecture-specific features"
    },
    {
      "name": "benchmark_v1_062",
      "inefficiency": "Missing optimization flags",
      "optimization": "Tune build or compile flags"
    },
    {
      "name": "benchmark_v1_063",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_064",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_065",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_066",
      "inefficiency": "Redundant computations",
      "optimization": "Precompute values"
    },
    {
      "name": "benchmark_v1_067",
      "inefficiency": "Redundant computations",
      "optimization": "Precompute values"
    },
    {
      "name": "benchmark_v1_068",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_069",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Refine data structures"
    },
    {
      "name": "benchmark_v1_070",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_071",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_072",
      "inefficiency": "Inefficient memory operations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_073",
      "inefficiency": "Disabled or broken parallelism",
      "optimization": "Fix or enable parallelism"
    },
    {
      "name": "benchmark_v1_074",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_075",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_076",
      "inefficiency": "Lack of caching or reuse",
      "optimization": "Introduce caching or static storage"
    },
    {
      "name": "benchmark_v1_077",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_078",
      "inefficiency": "Missing early-exit checks",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_v1_079",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_080",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_081",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_082",
      "inefficiency": "Missing early-exit checks",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_v1_083",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_084",
      "inefficiency": "Missing optimization flags",
      "optimization": "Tune build or compile flags"
    },
    {
      "name": "benchmark_v1_085",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_086",
      "inefficiency": "Missing optimization flags",
      "optimization": "Tune build or compile flags"
    },
    {
      "name": "benchmark_v1_087",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_088",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_089",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_090",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Remove redundant memory operations"
    },
    {
      "name": "benchmark_v1_091",
      "inefficiency": "Unwanted type conversions",
      "optimization": "Avoid unnecessary type conversions"
    },
    {
      "name": "benchmark_v1_092",
      "inefficiency": "Inefficient algorithms or data structures",
      "optimization": "Select a more efficient algorithm"
    },
    {
      "name": "benchmark_v1_093",
      "inefficiency": "Missing early-exit checks",
      "optimization": "Insert early-return checks"
    },
    {
      "name": "benchmark_v1_094",
      "inefficiency": "Unnecessary copies or allocations",
      "optimization": "Emplace into optional"
    },
    {
      "name": "benchmark_v1_095",
      "inefficiency": "Unnecessary object creation",
      "optimization": "Use integer overload"
    },
    {
      "name": "benchmark_v1_096",
      "inefficiency": "Fixed long sleep interval",
      "optimization": "Expose configurable GC interval"
    },
    {
      "name": "benchmark_v1_097",
      "inefficiency": "Repeated function pointer lookup",
      "optimization": "Cache pointer outside loop"
    },
    {
      "name": "benchmark_v1_098",
      "inefficiency": "Redundant variable management",
      "optimization": "Use helper functions"
    },
    {
      "name": "benchmark_v1_099",
      "inefficiency": "Suboptimal variable ordering",
      "optimization": "Order variables by domain cost"
    },
    {
      "name": "benchmark_v1_100",
      "inefficiency": "Missing page table A/D bits",
      "optimization": "Set A and D bits early"
    },
    {
      "name": "benchmark_v1_101",
      "inefficiency": "Low-level JIT label manipulation",
      "optimization": "Use higher level wrappers"
    },
    {
      "name": "benchmark_v1_102",
      "inefficiency": "Heap allocations in string concatenation",
      "optimization": "Use SmallString"
    },
    {
      "name": "benchmark_v1_103",
      "inefficiency": "Heavy algorithm for small matrix inversion",
      "optimization": "Use specialized inverse routine"
    },
    {
      "name": "benchmark_v1_104",
      "inefficiency": "Redundant async check detection",
      "optimization": "Skip check on unsupported CPU"
    },
    {
      "name": "benchmark_v1_105",
      "inefficiency": "Redundant computations",
      "optimization": "Avoid redundant simplification"
    },
    {
      "name": "benchmark_v1_106",
      "inefficiency": "Repeated cache construction",
      "optimization": "Use thread-local cache"
    },
    {
      "name": "benchmark_v1_107",
      "inefficiency": "Redundant name normalization",
      "optimization": "Reuse normalized name"
    },
    {
      "name": "benchmark_v1_108",
      "inefficiency": "Repeated fragment recording after mismatches",
      "optimization": "Blacklist fragment early"
    },
    {
      "name": "benchmark_v1_109",
      "inefficiency": "Linear global slot scan",
      "optimization": "Early isGlobal check"
    },
    {
      "name": "benchmark_v1_110",
      "inefficiency": "Unnecessary precision promotions",
      "optimization": "Use powf for floats"
    },
    {
      "name": "benchmark_v1_111",
      "inefficiency": "Inefficient instruction selection",
      "optimization": "Emit tMOVgpr2gpr"
    },
    {
      "name": "benchmark_v1_112",
      "inefficiency": "Manual pointer math with division",
      "optimization": "Use CreatePtrDiff"
    },
    {
      "name": "benchmark_v1_113",
      "inefficiency": "Container copies with foreach macro",
      "optimization": "Use range-based loop"
    },
    {
      "name": "benchmark_v1_114",
      "inefficiency": "Disabled NRVO via std::move",
      "optimization": "Return value directly"
    },
    {
      "name": "benchmark_v1_115",
      "inefficiency": "High overhead dynamic scheduling",
      "optimization": "Use static OpenMP schedule"
    },
    {
      "name": "benchmark_v1_116",
      "inefficiency": "Unconditional attribute copies",
      "optimization": "Skip copy when disabled"
    },
    {
      "name": "benchmark_v1_117",
      "inefficiency": "Expensive memory profiling macro",
      "optimization": "Use lightweight version"
    },
    {
      "name": "benchmark_v1_118",
      "inefficiency": "Lock contention on shared table",
      "optimization": "Replace lock with memory fence"
    },
    {
      "name": "benchmark_v1_119",
      "inefficiency": "Missed optimization for declared functions",
      "optimization": "Process declarations in ArgCast"
    },
    {
      "name": "benchmark_v1_120",
      "inefficiency": "Manual XOR loop with resizing",
      "optimization": "Use std::transform and skip resizing"
    },
    {
      "name": "benchmark_v1_121",
      "inefficiency": "Forced interpreter execution",
      "optimization": "Enable JIT via ExecutionEngine"
    },
    {
      "name": "benchmark_v1_122",
      "inefficiency": "Custom stacks hinder ASAN",
      "optimization": "Skip pthread_attr_setstack when ASAN"
    },
    {
      "name": "benchmark_v1_123",
      "inefficiency": "Runtime CPU mode check",
      "optimization": "Bypass check on 64-bit builds"
    },
    {
      "name": "benchmark_v1_124",
      "inefficiency": "Repeated PLT fix-ups",
      "optimization": "Emit fix-ups once"
    },
    {
      "name": "benchmark_v1_125",
      "inefficiency": "Scanning debug users unnecessarily",
      "optimization": "Early return if not used"
    },
    {
      "name": "benchmark_v1_126",
      "inefficiency": "Locale-dependent strtod",
      "optimization": "Use custom parser"
    },
    {
      "name": "benchmark_v1_127",
      "inefficiency": "Copying force vector",
      "optimization": "Move into member"
    },
    {
      "name": "benchmark_v1_128",
      "inefficiency": "Generic eigen solver call",
      "optimization": "Use direct eigenvalue method"
    },
    {
      "name": "benchmark_v1_129",
      "inefficiency": "Redundant FoldingSet lookups",
      "optimization": "Return existing list when unchanged"
    },
    {
      "name": "benchmark_v1_130",
      "inefficiency": "Copying string return",
      "optimization": "Return buffer with move"
    },
    {
      "name": "benchmark_v1_131",
      "inefficiency": "Scanning all redeclarations",
      "optimization": "Break after first default args"
    },
    {
      "name": "benchmark_v1_132",
      "inefficiency": "Repeated name normalization",
      "optimization": "Call GetProtoNorm directly"
    },
    {
      "name": "benchmark_v1_133",
      "inefficiency": "Queue reallocates each append",
      "optimization": "Skip when capacity suffices"
    },
    {
      "name": "benchmark_v1_134",
      "inefficiency": "Thread search on each call",
      "optimization": "Cache thread pointer"
    },
    {
      "name": "benchmark_v1_135",
      "inefficiency": "Recomputing variable address space",
      "optimization": "Read from pointer type"
    },
    {
      "name": "benchmark_v1_136",
      "inefficiency": "Lookup of Int32 type each time",
      "optimization": "Cache pointer for reuse"
    },
    {
      "name": "benchmark_v1_137",
      "inefficiency": "Registry lookup per call",
      "optimization": "Cache attached property function"
    },
    {
      "name": "benchmark_v1_138",
      "inefficiency": "Using Adam with small batch",
      "optimization": "Switch to SGD and larger batch"
    },
    {
      "name": "benchmark_v1_139",
      "inefficiency": "StructurizeCFG processes uniform regions",
      "optimization": "Enable SkipUniformRegions"
    },
    {
      "name": "benchmark_v1_140",
      "inefficiency": "Inaccurate max trip count",
      "optimization": "Use min sign bits to tighten bound"
    },
    {
      "name": "benchmark_v1_141",
      "inefficiency": "Always null move prune",
      "optimization": "Check staticEval before pruning"
    },
    {
      "name": "benchmark_v1_142",
      "inefficiency": "Disabled parallelism",
      "optimization": "Parallelize ReLU with OpenMP"
    }
  ]
}
