{"org": "expressjs", "repo": "express", "number": 5555, "state": "closed", "title": "fix #5554 passing URL instances with new location encoding", "body": "The new check did not account for operating on the input to `.location` previously being wrapped with `String()` inside `encodeurl`. Adds explicit fix for that.", "base": {"label": "expressjs:master", "ref": "master", "sha": "a1fa90fcea7d8e844e1c9938ad095d62669c3abd"}, "resolved_issues": [{"number": 5554, "title": "4.19.0 breaks passing new URL() into res.redirect(...)", "body": "Understandably, res.redirect(...) should take a string.  But for years we have been successfully passing a new URL().  We can certainly fix this on our side, but wanted to give a heads-up that this change might cause others to run into the same thing.\r\n\r\nError ultimately is thrown here:\r\n\r\nreponse.js:915\r\n  var lowerLoc = loc.toLowerCase();\r\n"}], "fix_patch": "diff --git a/History.md b/History.md\nindex b6208ea7e3..2fda95c155 100644\n--- a/History.md\n+++ b/History.md\n@@ -1,3 +1,8 @@\n+unreleased changes\n+==========\n+\n+  * Allow passing non-strings to res.location with new encoding handling checks\n+\n 4.19.0 / 2024-03-20\n ==========\n \ndiff --git a/lib/response.js b/lib/response.js\nindex f7c94d10e7..6fddbf3516 100644\n--- a/lib/response.js\n+++ b/lib/response.js\n@@ -905,7 +905,7 @@ res.cookie = function (name, value, options) {\n  */\n \n res.location = function location(url) {\n-  var loc = url;\n+  var loc = String(url);\n \n   // \"back\" is an alias for the referrer\n   if (url === 'back') {\n", "test_patch": "diff --git a/test/res.location.js b/test/res.location.js\nindex 71fbaec03d..d1bbf4b687 100644\n--- a/test/res.location.js\n+++ b/test/res.location.js\n@@ -145,5 +145,20 @@ describe('res', function(){\n         .expect(200, done)\n       })\n     })\n+\n+    if (typeof URL !== 'undefined') {\n+      it('should accept an instance of URL', function (done) {\n+        var app = express();\n+\n+        app.use(function(req, res){\n+          res.location(new URL('http://google.com/')).end();\n+        });\n+\n+        request(app)\n+          .get('/')\n+          .expect('Location', 'http://google.com/')\n+          .expect(200, done);\n+      });\n+    }\n   })\n })\n", "fixed_tests": {"should respond with root handler": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not perform freshness check unless 2xx or 304": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to UNLOCK request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should transfer a file": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display login error for bad password": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should expose res.locals": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not override manual content-types": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send as application/json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 500 on error": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response status code to 501": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should include ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback on 404": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should deny dotfiles": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with hello world": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get a users pets": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond repos json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send the status code and message as body": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should fail to find user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should error missing path": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not add it again": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not send cache-control": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not override Content-Type": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should give precedence to res.render() locals over app.locals": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set multiple response header fields": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not send cache-control header with immutable": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should redirect to /": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display login error for bad user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get a users pet": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should ignore the body": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to MKACTIVITY request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should floor cache-control max-age": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 404 for directory without trailing slash": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not send cache-control header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should pass it to the callback": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the Content-Type based on a filename": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should fail without proper username": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to MOVE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set .statusCode": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should cap cache-control max-age to 1 year": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 404 with unknown user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display no views": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should redirect to /login": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should transfer a file with special characters in string": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should consider ../ malicious when \"root\" is not set": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with APIv2 root handler": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should default to a 302 redirect": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with users 1 through 3": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send as html": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should give precedence to res.render() locals over res.locals": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should error for non-string path": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should redirect to /login without cookie": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to REBIND request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should transfer a file with urlencoded name": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 400 bad request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should next(err)": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback on socket error": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should min cache-control max-age to 0": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should default to text/html": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should utilize the same options as express.static()": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept an instance of URL": {"run": "NONE", "test": "FAIL", "fix": "PASS"}, "should get pet": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should return type if not given charset": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to UNBIND request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response status code to 410": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support unices": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept to application/json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to UNSUBSCRIBE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should keep charset if not given charset": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should include the redirect type": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback when client already aborted": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support strings": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should say foo": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to PROPFIND request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should pass options to send module": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should disallow requesting out of \"root\"": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send custom ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display 1 view on revisit": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to BIND request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to CHECKOUT request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the values": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should fail": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should have a download header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should redirect to /bar": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should be supported for backwards compat": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should override charset": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with index": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should error without \"view engine\" set and file extension to a non-engine module": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should update the user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should strip Content-* fields, Transfer-Encoding field, and body": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should pass the resulting string": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should encode the url": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send cache-control by default": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should create a pet for user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support buffer": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should ignore dotfiles": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send last-modified header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to SEARCH request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should delete user 1": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond to cookie": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to OPTIONS request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should error for non-absolute path": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with text": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to PATCH request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should say hello": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with no cookies": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept headers option": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should render login form": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set location from \"Referrer\" header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should clear cookie": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with users from APIv2": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send cache-control header with immutable": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should expose app.locals with `name` property": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should default to application/octet-stream": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag for long response": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send cache-control header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to HEAD request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get a user to edit": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 403": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept suffix \"m\" for minutes": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should edit a user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should still serve": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to PROPPATCH request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with an error": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag when manually set": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should keep charset in Content-Type for Buffers": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get pet edit page": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with a user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not have last-modified header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should conditionally respond with if-modified-since": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should give precedence to res.locals over app.locals": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set a session cookie": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should error without \"view engine\" set and no file extension": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should work with unknown code": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should do anything without type": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 404 on missing user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set body to \"\"": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should no set cookie w/o reminder": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should fail without proper password": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to PURGE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support windows": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond to range request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept plain number as milliseconds": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to SUBSCRIBE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept suffix \"d\" for days": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should strip Transfer-Encoding field and body, set Content-Length": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get a list of posts": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to GET request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display the users pets": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with users 2 and 3 as json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should fail integer parsing": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response status code to 201": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with error": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should succeed with proper cookie": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 404": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send number as json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with three users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to M-SEARCH request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with page list": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should override charset in Content-Type": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set location from \"Referer\" header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not advertise accept-ranges": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should serve relative to \"root\"": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response header field": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 404 json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should escape the url": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not send falsy ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response status code to 302": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to MKCALENDAR request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 304 Not Modified when fresh": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the value": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not honor if-modified-since": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond user repos json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to DELETE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set multiple fields": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with APIv1 root handler": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should redirect to /foo": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send no ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should redirect to /users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to ACL request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send as octet-stream": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback when complete": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should throw when Content-Type is an array": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag for empty string response": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with all users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set .statusCode and body": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should prefer \"Referrer\" header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should list users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not serve dotfiles by default": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not serve dotfiles": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not set a charset of one is already set": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept dotfiles option": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to UNLINK request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display the user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should flatten an array": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept to text/plain": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to REPORT request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback without error when HEAD": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to PUT request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 304 when ETag matches": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with instructions": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support windows unc": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to MERGE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should transfer a directory index file": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should coerce to an array of strings": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response status code to 403": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 401 unauthorized": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 404": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should transfer the file": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send weak ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should raise error for invalid status code": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with user 1": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 404 for directory": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display a list of users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should next(404) when not found": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not override ETag when manually set": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with an empty body": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support utf8 strings": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 404 when not found": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should allow ../ when \"root\" is set": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback without error when 304": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support empty string": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to MKCOL request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response status": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not override ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should advertise byte range accepted": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to LOCK request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback when client aborts": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to COPY request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should update the pet": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the header to \"/\" without referrer": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set cache-control max-age to milliseconds": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to POST request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should delete users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to NOTIFY request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should have a link to amazing.txt": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond users json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set charset": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get a user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send strong ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept suffix \"s\" for seconds": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with users from APIv1": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should ignore headers option on 404": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should allow dotfiles": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should succeed with proper credentials": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback on 403": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to TRACE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to LINK request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not set Vary": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 500": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should always check regardless of length": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display the edit form": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not error if the client aborts": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should coerce to a string": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with html": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to SOURCE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not honor range requests": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the Content-Type with type/subtype": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should have a form": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not send ETag for res.send()": {"run": "PASS", "test": "NONE", "fix": "PASS"}}, "p2p_tests": {"should populate req.params with the captures": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore X-Forwarded-Host if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return false when set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow options to res.sendFile()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should denote an optional capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should pass-though middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not invoke without a body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respond with 200 and the entire contents": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject up outside root": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be not be enabled by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support nesting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support array of paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should assert value is function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return undefined otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 403 when traversing past root": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should unicode escape HTML-sniffing characters": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should overwrite existing req.params by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse array of objects syntax": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not match otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should otherwise return the value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support index.html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be called for any URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return false when the resource is modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle throwing in handler after async param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the client addr": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be reasonable when infinite": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should strip port number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not obscure FQDNs": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include LINK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to utf-8": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should lookup the mime type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work with IPv4 address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work with res.set(field, val) first": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return an array of the specified addresses": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should disallow arbitrary js": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should capture everything": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse \"application/octet-stream\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should fall-through when directory without slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should require middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support deflate encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should alias app.delete()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include OPTIONS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return true when \"trust proxy\" is enabled": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should add handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return undefined if no range": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 400 for bad token": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should add the filename and filename* params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse deep object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set Last-Modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include UNBIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should map the array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not respond if the path is not defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore \"application/x-json\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not touch already-encoded sequences in \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse without encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should all .VERB after .all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include MKCALENDAR": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not parse primitives": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return true when the resource is not modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should mount the app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the first when Accept is not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the parsed pathname": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should contain full lower path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the protocol string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse codepage charsets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should presist store when unmatched content-type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work with encoded values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should remove OWS around comma": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should keep correct parameter indexes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should map a template engine": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work inside literal parenthesis": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should check req.query": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should redirect relative to the originalUrl": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include NOTIFY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore X-Forwarded-Proto if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.mkactivity": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respond with json and set the .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should call param function when routing middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return true when the resource is modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support altering req.params across routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse \"application/vnd+octets\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be able to invoke other formatter": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should transfer as an attachment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow naming": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be served with \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include UNLOCK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should fail when omitting the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be callable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 404 without routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should expose static middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle throw in .all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle no message-body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse when content-length != char length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse JSON for \"application/vnd.api+json\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should invoke callback with a string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should disable redirect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw if a callback is null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.unsubscribe": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support absolute paths with \"view engine\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to the routes defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should match a single segment only": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not accept content-encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 400 on primitives": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should prefer child \"trust proxy\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should expose Router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should denote a format": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should call when values differ when using \"next\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should denote a capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should take quality into account": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set \"etag fn\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should presist store when limit exceeded": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return a function with router methods": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore hidden files": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not redirect incorrectly": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set the given params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should serve static files": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should strip path from req.url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow []": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not choke on auth-looking URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should fail when adding the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should fall-through when OPTIONS request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should catch thrown error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return false when http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.move": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should break out of app.router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should fail if not given fn": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not alter the status": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow leading whitespaces in JSON": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should require root path to be string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 413 when over limit with Content-Length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should add a router per method": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be ignored case-insensitively": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 413 when inflated value exceeds limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include M-SEARCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should have a .type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the header field value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should skip non error middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support -n": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse utf-16": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.merge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not break undefined escape": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include UNLINK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set medium priority": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should invoke middleware for all requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include SUBSCRIBE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should denote an optional format": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return false when the resource is not modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should defer all the param routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse for custom type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should adjust FQDN req.url with multiple handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not accept params in malformed paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should use the default value unless defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should only call once per request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore Rage request header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not change when options altered": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should fall-through when traversing past root": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be empty by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to GET": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should continue lookup": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should emit \"mount\" when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return language if accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should get called when sending file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include Accept-Ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not error when inflating": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should wrap with an HTTP server": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work \"view engine\" with leading \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should only call an error handling routing callback when an error is propagated": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 400 when invalid content-length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set the value to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore \"text/xml\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should stop at first untrusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.put": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.get": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should presist store when parse error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should expose json middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.m-search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be the executed Route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not get called on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work without leading \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should error if file does not exist": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should expose text middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should behave like connect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return combined ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should presist store when inflate error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work with several": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should override Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include REBIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.delete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw missing header name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 404 when directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not throw on undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include PUT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should escape utf whitespace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support gzip encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to the socket addr if X-Forwarded-Proto not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should override the default behavior": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 404 when URL too long": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work together with res.cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore maxAge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return []": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include original body on error object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 404 if nothing found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not decode spaces": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be ignored": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respond with requested byte range": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return a new route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work with IPv6 Host and port": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should check req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.proppatch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should permit modifying the .application prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ensure regexp matches path prefix": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should change default charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be false if encoding not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should redirect to trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include PROPFIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should adapt the Content-Length accordingly": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 400 for incomplete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 400 on malformed encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should provide an alternate filename": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 404 when directory without slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should limit to just .VERB": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support n-": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore standard type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should span multiple segments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set relative expires": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should match the pathname only": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to true for prototype values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.post": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should eat everything after /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return undefined for prototype values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should remove Content-Disposition": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include COPY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should match no slashes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 415 on unknown charset prior to verify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work with IPv6 Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should map logic for a single param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.del": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow relative path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include SOURCE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not be affected by app.all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.checkout": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should match middleware when omitting the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support .use of other routers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should get reset by res.set(field, val)": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should catch urlencoded ../": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set a signed cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should accept multiple arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ensure redirect URL is properly encoded": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respond with default Content-Security-Policy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw on bad value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the mounted path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not include Last-Modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore \"application/x-foo\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject Date as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse application/octet-stream": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle errors via arity 4 functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.source": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should serve zero-length files": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should generate a signed JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include REPORT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should only include each method once": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should re-route when method is altered": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should Content-Disposition to attachment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not allow root path disclosure": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should only extend for the referenced app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work with large limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be false if language not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include PURGE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include Last-Modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support fallbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow escaped regexp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not stack overflow with a large sync route stack": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.mkcol": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should inherit to sub apps": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respond with json for null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should invoke callback with a number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support byte ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to {}": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support regexp path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle throw": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should presist store": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should disable \"view cache\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should catch thrown secondary error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not stack overflow with many registered routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include ACL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should act like \"extended\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw an error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.patch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should always lookup view without cache": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should decode correct params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should override previous Content-Types with callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow rewriting of the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse extended syntax": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should redirect correctly": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the first acceptable type with canonical mime types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should accept multiple arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include UNSUBSCRIBE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw on old middlewares": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should expose the application prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include MERGE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should override": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 400 when URL malformed": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore invalid incoming req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include a Content-Range header of complete length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.trace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow pass-through": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should check req.body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set Content-Range": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include MKCOL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should inherit \"trust proxy\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should load the file when on trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should cap to the given size when open-ended": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow multiple calls": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set a value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow renaming callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should cache with \"view cache\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default max-age=0": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include correct message in stack trace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should redirect when directory without slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should append multiple headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "is taken to be equal to one less than the current length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should fail gracefully": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should case-insensitive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should presist store when inflated": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject 0": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should expose raw middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the canonical": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw for non-string header name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return parsed ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support disabling extensions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include MKACTIVITY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should create an instance of it": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should map app.param(name, ...) logic": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should redirect to trailing slash mount point": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not escape utf whitespace for json fallback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not parse primitives with leading whitespaces": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should travel through routers correctly": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support mount-points": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should lookup in later paths until found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should fall-through when URL malformed": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work if path has trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should accept content-encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should obey Rage request header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should given precedence to the child": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not set headers on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the full type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support absolute paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not mutate the options object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.subscribe": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set the value to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse JSON for custom type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set headers on response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse primitives": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should use last header when duplicated": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not encode bad \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set partitioned": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set a cookie passed expiry": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include DEL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.purge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 413 if over limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not parse extended syntax": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should get the response header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should accept string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support index.<engine>": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should extend the request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle throwing inside error handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should jump out of router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should output the same headers as GET requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include TRACE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should restore req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set high priority": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should permit modifying the .request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should merge numeric indices req.params when more in parent": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work with different charsets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse x-www-form-urlencoded": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.report": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return an array with the whole domain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 405 when OPTIONS request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not error on empty routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should run the callback for a method just once": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.head": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 500 if stream not readable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle single error handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to development": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return an array with the whole IPv6": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be disabled by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include GET": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.lock": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the app when undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow literal \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not get invoked without error handler on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set Link header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should fall-through when directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the remote address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should match trailing slashes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should add the filename param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set max-age": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject reading outside root": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should accept array of values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should expose the response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.rebind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 404 when trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should invoke callback with an object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should denote a greedy capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not mix requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work in array of paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include PATCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should inherit from event emitter": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse JSON for \"application/json\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not hang response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be optional by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should special-case Referer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.bind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.unbind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore FQDN in search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return false when not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle VERBS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respond with json and set the .statusCode for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be chainable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject number as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should use params from router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 413 when over limit with chunked encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should use the first value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 400 when only whitespace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow several capture groups": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should call when values differ": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the Host when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should run in order added": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return an array with the whole IPv4": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set immutable directive in Cache-Control": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to the parent app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow merging existing req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should restore req.params after leaving router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return true when Accept is not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should match middleware when adding the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle blank URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should next() on mount point": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be configurable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not stack overflow with a large sync middleware stack": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work cross-segment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject non-functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "handle missing method": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should contain app settings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should always return language": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse fully-encoded extended syntax": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not get called on redirect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return true without response headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should call handler in same route, if exists": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should accept number of bytes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should fall-through when URL too long": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should enable \"view cache\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should jump to next route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle throwing inside routes with params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject string as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow sub app to override": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return true when X-Requested-With is xmlhttprequest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should pass-though mounted middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.notify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse \"application/x-www-form-urlencoded\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include SEARCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.copy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work when at the limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should presist store on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.link": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.acl": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respond with 206 \"Partial Content\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle render error throws": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be case-insensitive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work following a partial capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should decode the capture": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should merge numeric indices req.params when parent has same number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow custom type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respond with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse JSON": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work with Infinity limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle empty message-body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should give precedence to app.render() locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should encode \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should preserve trailing slashes when not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return undefined when unset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should permit modifying the .response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should match identical casing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return true when set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set prototype values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should generate a JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work \"view engine\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should assert value if function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not include Cache-Control": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse \"text/html\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include BIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse utf-8": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be empty for top-level route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should require root path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not include Accept-Ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respond with json for String": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work without handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse \"application/x-pairs\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should fail on unknown charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw if a callback is undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set Content-Length to the # of octets transferred": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw if a callback is not a function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return true when initial proxy is https": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw with invalid priority": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include security header and prologue": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work with unicode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.unlock": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work without content-type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse when truthy value returned": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle Content-Length: 0": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse multiple key instances": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should contain lower path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support .get": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should pass error to callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be called for any URL when \"*\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include LOCK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should match middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.propfind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore FQDN in path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support using .all to capture all http verbs": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include POST": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should redirect directories": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should dispatch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should adjust FQDN req.url with multiple routed handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should accept range requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should skip POST requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should forward requests down the middleware chain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 415 on unknown encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include HTML link": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the addr after trusted proxy based on count": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not support jsonp callbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set Link header field for multiple calls": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not throw if all callbacks are functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support precondition checks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not stack overflow with a large sync stack": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should merge numeric indices req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should extend the response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include Cache-Control": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not override previous Content-Types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should invoke middleware for all requests starting with path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work if number is floating point": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should provide a helpful error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not throw on null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the parent when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle duplicated middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should adjust FQDN req.url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse array index notation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respond with json for Number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not redirect to protocol-relative locations": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should error from verify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw with notice": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include PROPPATCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse array index notation with large array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject null as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should use status as second number for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse using function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw on invalid date": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set \"trust proxy fn\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should accept any type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respond with 416": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw when the callback is missing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the first acceptable type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should handle missing URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not invoke without route handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should expose the request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set low priority": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include MOVE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse text/plain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set a cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not be greedy immediately after param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow custom codes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore object callback parameter with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should ignore application/x-foo": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 415 on unknown charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should call param function when routing VERBS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should invoke callback with no arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.options": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not call when values differ on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the addr after trusted proxy based on list": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not pollute parent app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should expose urlencoded middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should default to false for prototype values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow up within root": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be .use()able": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should honor content-type charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should invoke callback with an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should stack": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set the child's .parent": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support empty string path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should accept an argument list of type names": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support array of paths with middleware array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support ../": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should next() on directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should throw an error with invalid maxAge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support identity encoding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse parameters with dots": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.mkcalendar": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be served when dotfiles: \"allow\" is given": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work with IPv6 address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should cap to the given size": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return false when initial proxy is http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should allow fallthrough": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not parse query": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should 413 when inflated body over limit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should cache with cache option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be invoked instead of auto-responding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return false when no match is made": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work when only .default is provided": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should work within arrays": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should invoke callback with null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be optional": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should parse \"text/plain\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should require a preceding /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support urlencoded pathnames": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include CHECKOUT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should be inclusive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return a signed JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return false without response headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support conditional requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return the addr after trusted proxy, from sub app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should redirect directories with query string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should not override previous Content-Types with no callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should defer to next route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should set the header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return encoding if accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should populate the capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should return set value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should support mounted app anywhere": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should accept nested arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should use first callback parameter with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should reject numbers for app.unlink": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "should include DELETE": {"run": "PASS", "test": "PASS", "fix": "PASS"}}, "f2p_tests": {"should accept an instance of URL": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "s2p_tests": {}, "n2p_tests": {"should respond with root handler": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not perform freshness check unless 2xx or 304": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to UNLOCK request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should transfer a file": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display login error for bad password": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should expose res.locals": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not override manual content-types": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send as application/json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 500 on error": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response status code to 501": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should include ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback on 404": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should deny dotfiles": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with hello world": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get a users pets": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond repos json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send the status code and message as body": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should fail to find user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should error missing path": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not add it again": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not send cache-control": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not override Content-Type": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should give precedence to res.render() locals over app.locals": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set multiple response header fields": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not send cache-control header with immutable": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should redirect to /": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display login error for bad user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get a users pet": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should ignore the body": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to MKACTIVITY request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should floor cache-control max-age": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 404 for directory without trailing slash": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not send cache-control header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should pass it to the callback": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the Content-Type based on a filename": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should fail without proper username": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to MOVE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set .statusCode": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should cap cache-control max-age to 1 year": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 404 with unknown user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display no views": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should redirect to /login": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should transfer a file with special characters in string": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should consider ../ malicious when \"root\" is not set": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with APIv2 root handler": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should default to a 302 redirect": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with users 1 through 3": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send as html": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should give precedence to res.render() locals over res.locals": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should error for non-string path": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should redirect to /login without cookie": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to REBIND request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should transfer a file with urlencoded name": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 400 bad request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should next(err)": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback on socket error": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should min cache-control max-age to 0": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should default to text/html": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should utilize the same options as express.static()": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get pet": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should return type if not given charset": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to UNBIND request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response status code to 410": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support unices": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept to application/json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to UNSUBSCRIBE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should keep charset if not given charset": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should include the redirect type": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback when client already aborted": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support strings": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should say foo": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to PROPFIND request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should pass options to send module": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should disallow requesting out of \"root\"": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send custom ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display 1 view on revisit": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to BIND request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to CHECKOUT request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the values": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should fail": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should have a download header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should redirect to /bar": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should be supported for backwards compat": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should override charset": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with index": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should error without \"view engine\" set and file extension to a non-engine module": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should update the user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should strip Content-* fields, Transfer-Encoding field, and body": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should pass the resulting string": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should encode the url": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send cache-control by default": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should create a pet for user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support buffer": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should ignore dotfiles": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send last-modified header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to SEARCH request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should delete user 1": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond to cookie": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to OPTIONS request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should error for non-absolute path": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with text": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to PATCH request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should say hello": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with no cookies": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept headers option": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should render login form": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set location from \"Referrer\" header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should clear cookie": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with users from APIv2": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send cache-control header with immutable": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should expose app.locals with `name` property": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should default to application/octet-stream": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag for long response": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send cache-control header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to HEAD request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get a user to edit": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 403": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept suffix \"m\" for minutes": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should edit a user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should still serve": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to PROPPATCH request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with an error": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag when manually set": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should keep charset in Content-Type for Buffers": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get pet edit page": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with a user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not have last-modified header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should conditionally respond with if-modified-since": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should give precedence to res.locals over app.locals": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set a session cookie": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should error without \"view engine\" set and no file extension": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should work with unknown code": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should do anything without type": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 404 on missing user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set body to \"\"": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should no set cookie w/o reminder": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should fail without proper password": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to PURGE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support windows": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond to range request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept plain number as milliseconds": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to SUBSCRIBE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept suffix \"d\" for days": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should strip Transfer-Encoding field and body, set Content-Length": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get a list of posts": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to GET request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display the users pets": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with users 2 and 3 as json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should fail integer parsing": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response status code to 201": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with error": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should succeed with proper cookie": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 404": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send number as json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with three users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to M-SEARCH request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with page list": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should override charset in Content-Type": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set location from \"Referer\" header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not advertise accept-ranges": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should serve relative to \"root\"": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response header field": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 404 json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should escape the url": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not send falsy ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response status code to 302": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to MKCALENDAR request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 304 Not Modified when fresh": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the value": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not honor if-modified-since": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond user repos json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to DELETE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set multiple fields": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with APIv1 root handler": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should redirect to /foo": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send no ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should redirect to /users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to ACL request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send as octet-stream": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback when complete": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should throw when Content-Type is an array": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag for empty string response": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with all users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set .statusCode and body": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should prefer \"Referrer\" header": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should list users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not serve dotfiles by default": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not serve dotfiles": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not set a charset of one is already set": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept dotfiles option": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to UNLINK request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display the user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should flatten an array": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept to text/plain": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to REPORT request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback without error when HEAD": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to PUT request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 304 when ETag matches": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with instructions": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support windows unc": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to MERGE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should transfer a directory index file": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should coerce to an array of strings": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response status code to 403": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 401 unauthorized": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 404": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should transfer the file": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send weak ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should raise error for invalid status code": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with user 1": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 404 for directory": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display a list of users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should next(404) when not found": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not override ETag when manually set": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with an empty body": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support utf8 strings": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should 404 when not found": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should allow ../ when \"root\" is set": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback without error when 304": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should support empty string": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to MKCOL request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the response status": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not override ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should advertise byte range accepted": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to LOCK request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback when client aborts": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to COPY request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should update the pet": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the header to \"/\" without referrer": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set cache-control max-age to milliseconds": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to POST request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should delete users": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to NOTIFY request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should have a link to amazing.txt": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond users json": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set charset": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should get a user": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send strong ETag": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should accept suffix \"s\" for seconds": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with users from APIv1": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should ignore headers option on 404": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should allow dotfiles": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should succeed with proper credentials": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should invoke the callback on 403": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to TRACE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to LINK request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not set Vary": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with 500": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should always check regardless of length": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should display the edit form": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not error if the client aborts": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should coerce to a string": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should respond with html": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should send ETag in response to SOURCE request": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not honor range requests": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should set the Content-Type with type/subtype": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should have a form": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "should not send ETag for res.send()": {"run": "PASS", "test": "NONE", "fix": "PASS"}}, "run_result": {"passed_count": 939, "failed_count": 0, "skipped_count": 0, "passed_tests": ["should populate req.params with the captures", "should default to false", "should ignore X-Forwarded-Host if socket addr not trusted", "should return false when set", "should respond with root handler", "should reject numbers for app.search", "should allow options to res.sendFile()", "should not perform freshness check unless 2xx or 304", "should denote an optional capture group", "should support dynamic routes", "should pass-though middleware", "should not invoke without a body", "should respond with 200 and the entire contents", "should reject up outside root", "should be not be enabled by default", "should support nesting", "should support array of paths", "should assert value is function", "should return undefined otherwise", "should 403 when traversing past root", "should unicode escape HTML-sniffing characters", "should overwrite existing req.params by default", "should parse array of objects syntax", "should not match otherwise", "should otherwise return the value", "should support index.html", "should send ETag in response to UNLOCK request", "should be called for any URL", "should return false when the resource is modified", "should transfer a file", "should handle throwing in handler after async param", "should display login error for bad password", "should return the client addr", "should expose res.locals", "should not override manual content-types", "should be reasonable when infinite", "should strip port number", "should not obscure FQDNs", "should send as application/json", "should 500 on error", "should set the response status code to 501", "should include LINK", "should include ETag", "should default to utf-8", "should lookup the mime type", "should work with IPv4 address", "should work with res.set(field, val) first", "should invoke the callback on 404", "should return an array of the specified addresses", "should deny dotfiles", "should respond with hello world", "should disallow arbitrary js", "should capture everything", "should get a users pets", "should parse \"application/octet-stream\"", "should fall-through when directory without slash", "should not parse complex keys", "should default to parse complex keys", "should require middleware", "should support deflate encoding", "should alias app.delete()", "should include OPTIONS", "should return true when \"trust proxy\" is enabled", "should respond repos json", "should add handler", "should return undefined if no range", "should send the status code and message as body", "should 400 for bad token", "should add the filename and filename* params", "should fail to find user", "should parse deep object", "should set Last-Modified", "should error missing path", "should include UNBIND", "should map the array", "should not respond if the path is not defined", "should not add it again", "should ignore \"application/x-json\"", "should not touch already-encoded sequences in \"url\"", "should parse without encoding", "should all .VERB after .all", "should include MKCALENDAR", "should not parse primitives", "should return true when the resource is not modified", "should set params", "should not send cache-control", "should mount the app", "should return the first when Accept is not present", "should respond with users", "should not override Content-Type", "should give precedence to res.render() locals over app.locals", "should return the parsed pathname", "should set multiple response header fields", "should contain full lower path", "should return the protocol string", "should parse codepage charsets", "should not send cache-control header with immutable", "should presist store when unmatched content-type", "should redirect to /", "should work with encoded values", "should remove OWS around comma", "should not send ETag for res.send()", "should keep correct parameter indexes", "should map a template engine", "should display login error for bad user", "should default to true", "should get a users pet", "should ignore the body", "should work inside literal parenthesis", "should check req.query", "should send ETag in response to MKACTIVITY request", "should floor cache-control max-age", "should redirect relative to the originalUrl", "should include NOTIFY", "should ignore X-Forwarded-Proto if socket addr not trusted", "should 404 for directory without trailing slash", "should not send cache-control header", "should reject numbers for app.mkactivity", "should respond with json and set the .statusCode", "should call param function when routing middleware", "should pass it to the callback", "should set the Content-Type based on a filename", "should fail without proper username", "should return true when the resource is modified", "should send ETag in response to MOVE request", "should support altering req.params across routes", "should parse \"application/vnd+octets\"", "should set .statusCode", "should cap cache-control max-age to 1 year", "should be able to invoke other formatter", "should transfer as an attachment", "should allow naming", "should set the correct charset for the Content-Type", "should 404 with unknown user", "should be served with \".\"", "should include UNLOCK", "should fail when omitting the trailing slash", "should be callable", "should display no views", "should 404 without routes", "should redirect to /login", "should expose static middleware", "should handle throw in .all", "should handle no message-body", "should parse when content-length != char length", "should parse JSON for \"application/vnd.api+json\"", "should invoke callback with a string", "should transfer a file with special characters in string", "should consider ../ malicious when \"root\" is not set", "should work when mounted", "should disable redirect", "should throw if a callback is null", "should reject numbers for app.unsubscribe", "should support absolute paths with \"view engine\"", "should default to the routes defined", "should respond with APIv2 root handler", "should match a single segment only", "should support HEAD", "should not accept content-encoding", "should 400 on primitives", "should prefer child \"trust proxy\" setting", "should expose Router", "should denote a format", "should call when values differ when using \"next\"", "should denote a capture group", "should take quality into account", "should default to a 302 redirect", "should set \"etag fn\"", "should presist store when limit exceeded", "should return a function with router methods", "should ignore hidden files", "should not redirect incorrectly", "should set the given params", "should serve static files", "should respond with users 1 through 3", "should strip path from req.url", "should allow []", "should not choke on auth-looking URL", "should fail when adding the trailing slash", "should fall-through when OPTIONS request", "should catch thrown error", "should return false when http", "should reject numbers for app.move", "should break out of app.router", "should send as html", "should give precedence to res.render() locals over res.locals", "should fail if not given fn", "should not alter the status", "should return false otherwise", "should allow leading whitespaces in JSON", "should require root path to be string", "should parse complex keys", "should accept array of middleware", "should 413 when over limit with Content-Length", "should add a router per method", "should be ignored case-insensitively", "should 413 when inflated value exceeds limit", "should include M-SEARCH", "should error for non-string path", "should have a .type", "should redirect to /login without cookie", "should return the header field value", "should skip non error middleware", "should support -n", "should send ETag in response to REBIND request", "should parse utf-16", "should reject numbers for app.merge", "should not break undefined escape", "should transfer a file with urlencoded name", "should include UNLINK", "should set medium priority", "should invoke middleware for all requests", "should include SUBSCRIBE", "should respond with 400 bad request", "should next(err)", "should denote an optional format", "should invoke the callback on socket error", "should return false when the resource is not modified", "should min cache-control max-age to 0", "should defer all the param routes", "should parse for custom type", "should adjust FQDN req.url with multiple handlers", "should not accept params in malformed paths", "should use the default value unless defined", "should default to text/html", "should utilize the same options as express.static()", "should only call once per request", "should ignore Rage request header", "should not change when options altered", "should fall-through when traversing past root", "should be empty by default", "should get pet", "should ignore charset", "should return type if not given charset", "should default to GET", "should continue lookup", "should emit \"mount\" when mounted", "should return language if accepted", "should send ETag in response to UNBIND request", "should set the response status code to 410", "should get called when sending file", "should support unices", "should include Accept-Ranges", "should not error when inflating", "should accept to application/json", "should wrap with an HTTP server", "should work \"view engine\" with leading \".\"", "should only call an error handling routing callback when an error is propagated", "should 400 when invalid content-length", "should send ETag in response to UNSUBSCRIBE request", "should keep charset if not given charset", "should set the value to true", "should ignore \"text/xml\"", "should include the redirect type", "should stop at first untrusted", "should reject numbers for app.put", "should reject numbers for app.get", "should presist store when parse error", "should reject string", "should expose json middleware", "should invoke the callback when client already aborted", "should reject numbers for app.m-search", "should be the executed Route", "should not get called on 404", "should set ETag", "should support strings", "should say foo", "should send ETag in response to PROPFIND request", "should work without leading \".\"", "should error if file does not exist", "should pass options to send module", "should expose text middleware", "should disallow requesting out of \"root\"", "should behave like connect", "should send custom ETag", "should display 1 view on revisit", "should return combined ranges", "should presist store when inflate error", "should work with several", "should override Content-Type", "should include REBIND", "should default to Host", "should send ETag in response to BIND request", "should send ETag in response to CHECKOUT request", "should reject numbers for app.delete", "should set the values", "should throw missing header name", "should fail", "should have a download header", "should redirect to /bar", "should send ETag", "should 404 when directory", "should not throw on undefined", "should include PUT", "should escape utf whitespace", "should be supported for backwards compat", "should override charset", "should support gzip encoding", "should default to the socket addr if X-Forwarded-Proto not present", "should return false when not matching", "should respond with index", "should error without \"view engine\" set and file extension to a non-engine module", "should override the default behavior", "should 404 when URL too long", "should work together with res.cookie", "should ignore maxAge", "should return []", "should include original body on error object", "should 404 if nothing found", "should not decode spaces", "should be ignored", "should respond with requested byte range", "should return a new route", "should work with IPv6 Host and port", "should check req.params", "should update the user", "should reject numbers for app.proppatch", "should permit modifying the .application prototype", "should strip Content-* fields, Transfer-Encoding field, and body", "should ensure regexp matches path prefix", "should change default charset", "should pass the resulting string", "should be false if encoding not accepted", "should set the Content-Type", "should redirect to trailing slash", "should encode the url", "should send cache-control by default", "should create a pet for user", "should support buffer", "should include PROPFIND", "should adapt the Content-Length accordingly", "should ignore dotfiles", "should 400 for incomplete", "should 400 on malformed encoding", "should provide an alternate filename", "should 404 when directory without slash", "should send last-modified header", "should limit to just .VERB", "should support n-", "should ignore standard type", "should span multiple segments", "should set relative expires", "should match the pathname only", "should default to true for prototype values", "should reject numbers for app.post", "should eat everything after /", "should return the app", "should return undefined for prototype values", "should remove Content-Disposition", "should send ETag in response to SEARCH request", "should delete user 1", "should respond to cookie", "should include COPY", "should match no slashes", "should expose app.locals", "should 415 on unknown charset prior to verify", "should send ETag in response to OPTIONS request", "should work with IPv6 Host", "should map logic for a single param", "should default to http", "should error for non-absolute path", "should respond with text", "should lookup the file in the path", "should reject numbers for app.del", "should allow relative path", "should include SOURCE", "should not be affected by app.all", "should reject numbers for app.checkout", "should match middleware when omitting the trailing slash", "should send ETag in response to PATCH request", "should say hello", "should respond with no cookies", "should support .use of other routers", "should get reset by res.set(field, val)", "should catch urlencoded ../", "should set a signed cookie", "should accept multiple arguments", "should accept headers option", "should ensure redirect URL is properly encoded", "should respond with default Content-Security-Policy", "should render login form", "should set location from \"Referrer\" header", "should throw on bad value", "should return the mounted path", "should not include Last-Modified", "should ignore \"application/x-foo\"", "should reject Date as middleware", "should clear cookie", "should respond with users from APIv2", "should send cache-control header with immutable", "should parse application/octet-stream", "should handle errors via arity 4 functions", "should reject numbers for app.source", "should serve zero-length files", "should generate a signed JSON cookie", "should expose app.locals with `name` property", "should include REPORT", "should only include each method once", "should re-route when method is altered", "should Content-Disposition to attachment", "should Vary: Accept", "should default to application/octet-stream", "should not allow root path disclosure", "should only extend for the referenced app", "should work with large limit", "should be false if language not accepted", "should include PURGE", "should include Last-Modified", "should support fallbacks", "should send ETag for long response", "should allow escaped regexp", "should not stack overflow with a large sync route stack", "should reject numbers for app.mkcol", "should send cache-control header", "should inherit to sub apps", "should respond with json for null", "should send ETag in response to HEAD request", "should should respond with 406 not acceptable", "should invoke callback with a number", "should support byte ranges", "should default to {}", "should support regexp path", "should handle throw", "should presist store", "should disable \"view cache\"", "should catch thrown secondary error", "should not stack overflow with many registered routes", "should include ACL", "should act like \"extended\"", "should throw an error", "should reject numbers for app.patch", "should get a user to edit", "should default the Content-Type", "should always lookup view without cache", "should decode correct params", "should respond with 403", "should override previous Content-Types with callback", "should allow rewriting of the url", "should accept suffix \"m\" for minutes", "should edit a user", "should parse extended syntax", "should redirect correctly", "should return the first acceptable type with canonical mime types", "should accept multiple arrays of middleware", "should still serve", "should include UNSUBSCRIBE", "should send ETag in response to PROPPATCH request", "should throw on old middlewares", "should expose the application prototype", "should include MERGE", "should respond with an error", "should override", "should 400 when URL malformed", "should ignore invalid incoming req.params", "should include a Content-Range header of complete length", "should reject numbers for app.trace", "should allow pass-through", "should check req.body", "should set Content-Range", "should set Content-Type", "should send ETag when manually set", "should include MKCOL", "should keep charset in Content-Type for Buffers", "should get pet edit page", "should inherit \"trust proxy\" setting", "should load the file when on trailing slash", "should throw", "should cap to the given size when open-ended", "should allow multiple calls", "should set a value", "should allow renaming callback", "should cache with \"view cache\" setting", "should respond with a user", "should respect X-Forwarded-Proto", "should default max-age=0", "should include correct message in stack trace", "should not have last-modified header", "should redirect when directory without slash", "should append multiple headers", "is taken to be equal to one less than the current length", "should fail gracefully", "should case-insensitive", "should presist store when inflated", "should reject 0", "should expose raw middleware", "should return the canonical", "should throw for non-string header name", "should conditionally respond with if-modified-since", "should give precedence to res.locals over app.locals", "should set a session cookie", "should error without \"view engine\" set and no file extension", "should return parsed ranges", "should work with unknown code", "should support disabling extensions", "should do anything without type", "should include MKACTIVITY", "should 404 on missing user", "should create an instance of it", "should set body to \"\"", "should no set cookie w/o reminder", "should map app.param(name, ...) logic", "should fail without proper password", "should redirect to trailing slash mount point", "should not escape utf whitespace for json fallback", "should not parse primitives with leading whitespaces", "should travel through routers correctly", "should support mount-points", "should lookup in later paths until found", "should send ETag in response to PURGE request", "should fall-through when URL malformed", "should work if path has trailing slash", "should support windows", "should respond to range request", "should accept content-encoding", "should obey Rage request header", "should return true", "should given precedence to the child", "should not set headers on 404", "should accept plain number as milliseconds", "should return the full type when matching", "should support absolute paths", "should not mutate the options object", "should reject numbers for app.subscribe", "should set the value to false", "should send ETag in response to SUBSCRIBE request", "should accept suffix \"d\" for days", "should parse JSON for custom type", "should strip Transfer-Encoding field and body, set Content-Length", "should set headers on response", "should parse primitives", "should use last header when duplicated", "should allow wildcard type/subtypes", "should not encode bad \"url\"", "should return an array", "should set partitioned", "should set a cookie passed expiry", "should include DEL", "should reject numbers for app.purge", "should 413 if over limit", "should get a list of posts", "should not parse extended syntax", "should send ETag in response to GET request", "should get the response header field", "should display the users pets", "should accept string", "should respond with users 2 and 3 as json", "should fail integer parsing", "should support index.<engine>", "should extend the request prototype", "should set the response status code to 201", "should handle throwing inside error handlers", "should jump out of router", "should respond with error", "should output the same headers as GET requests", "should succeed with proper cookie", "should 404", "should include TRACE", "should restore req.params", "should send number as json", "should respond with three users", "should send ETag in response to M-SEARCH request", "should set high priority", "should permit modifying the .request prototype", "should merge numeric indices req.params when more in parent", "should work with different charsets", "should parse x-www-form-urlencoded", "should respond with page list", "should override charset in Content-Type", "should reject numbers for app.report", "should return an array with the whole domain", "should set location from \"Referer\" header", "should 405 when OPTIONS request", "should not advertise accept-ranges", "should not error on empty routes", "should run the callback for a method just once", "should reject numbers for app.head", "should serve relative to \"root\"", "should set the response header field", "should respond with 404 json", "should escape the url", "should 500 if stream not readable", "should handle single error handler", "should default to development", "should return an array with the whole IPv6", "should not send falsy ETag", "should return true when present", "should be disabled by default", "should set the response status code to 302", "should include GET", "should reject numbers for app.lock", "should send ETag in response to MKCALENDAR request", "should return the app when undefined", "should allow literal \".\"", "should not get invoked without error handler on error", "should set Link header field", "should fall-through when directory", "should return the remote address", "should respond with 304 Not Modified when fresh", "should match trailing slashes", "should add the filename param", "should set max-age", "should reject reading outside root", "should accept array of values", "should expose the response prototype", "should reject numbers for app.rebind", "should 404 when trailing slash", "should set the value", "should invoke callback with an object", "should not honor if-modified-since", "should respond user repos json", "should denote a greedy capture group", "should not mix requests", "should work in array of paths", "should include PATCH", "should inherit from event emitter", "should parse JSON for \"application/json\"", "should send ETag in response to DELETE request", "should not hang response", "should return an empty array", "should set multiple fields", "should be optional by default", "should special-case Referer", "should respond with APIv1 root handler", "should redirect to /foo", "should reject numbers for app.bind", "should reject numbers for app.unbind", "should ignore FQDN in search", "should send no ETag", "should return false when not present", "should handle VERBS", "should respond with json and set the .statusCode for backwards compat", "should redirect to /users", "should be chainable", "should reject number as middleware", "should use params from router", "should 413 when over limit with chunked encoding", "should send ETag in response to ACL request", "should use the first value", "should 400 when only whitespace", "should allow several capture groups", "should call when values differ", "should return the Host when present", "should run in order added", "should return an array with the whole IPv4", "should send as octet-stream", "should invoke the callback when complete", "should throw when Content-Type is an array", "should render the template", "should set immutable directive in Cache-Control", "should send ETag for empty string response", "should respond with all users", "should default to the parent app", "should set .statusCode and body", "should prefer \"Referrer\" header", "should allow merging existing req.params", "should list users", "should restore req.params after leaving router", "should return true when Accept is not present", "should not serve dotfiles by default", "should match middleware when adding the trailing slash", "should handle blank URL", "should next() on mount point", "should not serve dotfiles", "should be configurable", "should not stack overflow with a large sync middleware stack", "should work cross-segment", "should not set a charset of one is already set", "should reject non-functions", "handle missing method", "should contain app settings", "should always return language", "should parse fully-encoded extended syntax", "should accept dotfiles option", "should not get called on redirect", "should return true without response headers", "should send ETag in response to UNLINK request", "should call handler in same route, if exists", "should display the user", "should accept number of bytes", "should fall-through when URL too long", "should flatten an array", "should enable \"view cache\"", "should jump to next route", "should handle throwing inside routes with params", "should reject string as middleware", "should allow sub app to override", "should return true when X-Requested-With is xmlhttprequest", "should accept to text/plain", "should invoke the callback", "should pass-though mounted middleware", "should send ETag in response to REPORT request", "should invoke the callback without error when HEAD", "should send ETag in response to PUT request", "should reject numbers for app.notify", "should parse \"application/x-www-form-urlencoded\"", "should include SEARCH", "should reject numbers for app.copy", "should work when at the limit", "should presist store on error", "should reject numbers for app.link", "should utilize qvalues in negotiation", "should 304 when ETag matches", "should reject numbers for app.acl", "should respond with 206 \"Partial Content\"", "should default object", "should respond with instructions", "should handle render error throws", "should support windows unc", "should send ETag in response to MERGE request", "should be case-insensitive", "should transfer a directory index file", "should work following a partial capture group", "should coerce to an array of strings", "should decode the capture", "should merge numeric indices req.params when parent has same number", "should allow custom type", "should respond with jsonp", "should parse JSON", "should work with Infinity limit", "should handle empty message-body", "should set the response status code to 403", "should respond with 401 unauthorized", "should respond with 404", "should give precedence to app.render() locals", "should encode \"url\"", "should preserve trailing slashes when not present", "should transfer the file", "should send weak ETag", "should raise error for invalid status code", "should return undefined when unset", "should permit modifying the .response prototype", "should return the type when matching", "should ignore X-Forwarded-Proto", "should respect X-Forwarded-Host", "should respond with user 1", "should match identical casing", "should 404 for directory", "should set prototype values", "should generate a JSON cookie", "should display a list of users", "should work \"view engine\" setting", "should next(404) when not found", "should assert value if function", "should not include Cache-Control", "should parse \"text/html\"", "should include BIND", "should parse utf-8", "should be empty for top-level route", "should require root path", "should not include Accept-Ranges", "should respond with json for String", "should work without handlers", "should parse \"application/x-pairs\"", "should fail on unknown charset", "should not override ETag when manually set", "should throw if a callback is undefined", "should set Content-Length to the # of octets transferred", "should throw if a callback is not a function", "should return true when initial proxy is https", "should throw with invalid priority", "should invoke the first callback", "should include security header and prologue", "should respond with an empty body", "should work with unicode", "should support utf8 strings", "should reject numbers for app.unlock", "should work without content-type", "should parse when truthy value returned", "should handle Content-Length: 0", "should parse multiple key instances", "should 404 when not found", "should contain lower path", "should support .get", "should pass error to callback", "should allow ../ when \"root\" is set", "should be called for any URL when \"*\"", "should include LOCK", "should match middleware", "should reject numbers for app.propfind", "should invoke the callback without error when 304", "should ignore FQDN in path", "should support using .all to capture all http verbs", "should include POST", "should redirect directories", "should support empty string", "should dispatch", "should adjust FQDN req.url with multiple routed handlers", "should be passed to JSON.stringify()", "should accept range requests", "should skip POST requests", "should send ETag in response to MKCOL request", "should forward requests down the middleware chain", "should 415 on unknown encoding", "should include HTML link", "should return the addr after trusted proxy based on count", "should not support jsonp callbacks", "should set the response status", "should ignore X-Forwarded-Host", "should set Link header field for multiple calls", "should not throw if all callbacks are functions", "should not override ETag", "should support precondition checks", "should not stack overflow with a large sync stack", "should merge numeric indices req.params", "should extend the response prototype", "should advertise byte range accepted", "should include Cache-Control", "should not override previous Content-Types", "should invoke middleware for all requests starting with path", "should work if number is floating point", "should provide a helpful error", "should not throw on null", "should return the parent when mounted", "should handle duplicated middleware", "should adjust FQDN req.url", "should parse array index notation", "should respond with json for Number", "should not redirect to protocol-relative locations", "should error from verify", "should throw with notice", "should include PROPPATCH", "should parse array index notation with large array", "should send ETag in response to LOCK request", "should invoke the callback when client aborts", "should reject null as middleware", "should use status as second number for backwards compat", "should parse using function", "should throw on invalid date", "should send ETag in response to COPY request", "should set \"trust proxy fn\"", "should accept any type", "should update the pet", "should respond with 416", "should throw when the callback is missing", "should return the first acceptable type", "should handle missing URL", "should set the header to \"/\" without referrer", "should set cache-control max-age to milliseconds", "should not invoke without route handler", "should expose the request prototype", "should set low priority", "should send ETag in response to POST request", "should delete users", "should include MOVE", "should parse text/plain", "should send ETag in response to NOTIFY request", "should set a cookie", "should respond with json", "should not be greedy immediately after param", "should allow custom codes", "should have a link to amazing.txt", "should ignore object callback parameter with jsonp", "should ignore application/x-foo", "should 415 on unknown charset", "should call param function when routing VERBS", "should invoke callback with no arguments", "should reject numbers for app.options", "should not call when values differ on error", "should return the addr after trusted proxy based on list", "should not pollute parent app", "should expose urlencoded middleware", "should default to false for prototype values", "should allow up within root", "should respond users json", "should be .use()able", "should honor content-type charset", "should invoke callback with an array", "should set charset", "should get a user", "should send strong ETag", "should accept suffix \"s\" for seconds", "should respond with users from APIv1", "should ignore headers option on 404", "should stack", "should return false", "should set the child's .parent", "should support empty string path", "should allow dotfiles", "should succeed with proper credentials", "should accept an argument list of type names", "should support array of paths with middleware array", "should support ../", "should next() on directory", "should throw an error with invalid maxAge", "should support identity encoding", "should parse parameters with dots", "should invoke the callback on 403", "should reject numbers for app.mkcalendar", "should be served when dotfiles: \"allow\" is given", "should work with IPv6 address", "should send ETag in response to TRACE request", "should cap to the given size", "should return false when initial proxy is http", "should send ETag in response to LINK request", "should not set Vary", "should allow fallthrough", "should not parse query", "should 413 when inflated body over limit", "should respond with 500", "should cache with cache option", "should be invoked instead of auto-responding", "should return false when no match is made", "should work when only .default is provided", "should work within arrays", "should be undefined by default", "should invoke callback with null", "should be optional", "should parse \"text/plain\"", "should require a preceding /", "should always check regardless of length", "should display the edit form", "should support urlencoded pathnames", "should not error if the client aborts", "should include CHECKOUT", "should coerce to a string", "should be inclusive", "should return a signed JSON cookie", "should respond with html", "should return false without response headers", "should send ETag in response to SOURCE request", "should not honor range requests", "should support conditional requests", "should return the addr after trusted proxy, from sub app", "should redirect directories with query string", "should set the Content-Type with type/subtype", "should have a form", "should not override previous Content-Types with no callback", "should defer to next route", "should set the header", "should return encoding if accepted", "should populate the capture group", "should return set value", "should include HEAD", "should support mounted app anywhere", "should accept nested arrays of middleware", "should use first callback parameter with jsonp", "should return true when set", "should reject numbers for app.unlink", "should include DELETE"], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 678, "failed_count": 2, "skipped_count": 0, "passed_tests": ["should populate req.params with the captures", "should default to false", "should ignore X-Forwarded-Host if socket addr not trusted", "should return false when set", "should reject numbers for app.search", "should allow options to res.sendFile()", "should denote an optional capture group", "should support dynamic routes", "should pass-though middleware", "should not invoke without a body", "should respond with 200 and the entire contents", "should reject up outside root", "should be not be enabled by default", "should support nesting", "should support array of paths", "should assert value is function", "should return undefined otherwise", "should 403 when traversing past root", "should unicode escape HTML-sniffing characters", "should overwrite existing req.params by default", "should parse array of objects syntax", "should not match otherwise", "should otherwise return the value", "should support index.html", "should be called for any URL", "should return false when the resource is modified", "should handle throwing in handler after async param", "should return the client addr", "should be reasonable when infinite", "should strip port number", "should not obscure FQDNs", "should include LINK", "should default to utf-8", "should lookup the mime type", "should work with IPv4 address", "should work with res.set(field, val) first", "should return an array of the specified addresses", "should disallow arbitrary js", "should capture everything", "should parse \"application/octet-stream\"", "should fall-through when directory without slash", "should not parse complex keys", "should default to parse complex keys", "should require middleware", "should support deflate encoding", "should alias app.delete()", "should include OPTIONS", "should return true when \"trust proxy\" is enabled", "should add handler", "should return undefined if no range", "should 400 for bad token", "should add the filename and filename* params", "should parse deep object", "should set Last-Modified", "should include UNBIND", "should map the array", "should not respond if the path is not defined", "should ignore \"application/x-json\"", "should not touch already-encoded sequences in \"url\"", "should parse without encoding", "should all .VERB after .all", "should include MKCALENDAR", "should not parse primitives", "should return true when the resource is not modified", "should set params", "should mount the app", "should return the first when Accept is not present", "should return the parsed pathname", "should contain full lower path", "should return the protocol string", "should parse codepage charsets", "should presist store when unmatched content-type", "should work with encoded values", "should remove OWS around comma", "should keep correct parameter indexes", "should map a template engine", "should default to true", "should work inside literal parenthesis", "should check req.query", "should redirect relative to the originalUrl", "should include NOTIFY", "should ignore X-Forwarded-Proto if socket addr not trusted", "should reject numbers for app.mkactivity", "should respond with json and set the .statusCode", "should call param function when routing middleware", "should return true when the resource is modified", "should support altering req.params across routes", "should parse \"application/vnd+octets\"", "should be able to invoke other formatter", "should transfer as an attachment", "should allow naming", "should set the correct charset for the Content-Type", "should be served with \".\"", "should include UNLOCK", "should fail when omitting the trailing slash", "should be callable", "should 404 without routes", "should expose static middleware", "should handle throw in .all", "should handle no message-body", "should parse when content-length != char length", "should parse JSON for \"application/vnd.api+json\"", "should invoke callback with a string", "should work when mounted", "should disable redirect", "should throw if a callback is null", "should reject numbers for app.unsubscribe", "should support absolute paths with \"view engine\"", "should default to the routes defined", "should match a single segment only", "should support HEAD", "should not accept content-encoding", "should 400 on primitives", "should prefer child \"trust proxy\" setting", "should expose Router", "should denote a format", "should call when values differ when using \"next\"", "should denote a capture group", "should take quality into account", "should set \"etag fn\"", "should presist store when limit exceeded", "should return a function with router methods", "should ignore hidden files", "should not redirect incorrectly", "should set the given params", "should serve static files", "should strip path from req.url", "should allow []", "should not choke on auth-looking URL", "should fail when adding the trailing slash", "should fall-through when OPTIONS request", "should catch thrown error", "should return false when http", "should reject numbers for app.move", "should break out of app.router", "should fail if not given fn", "should not alter the status", "should return false otherwise", "should allow leading whitespaces in JSON", "should require root path to be string", "should parse complex keys", "should accept array of middleware", "should 413 when over limit with Content-Length", "should add a router per method", "should be ignored case-insensitively", "should 413 when inflated value exceeds limit", "should include M-SEARCH", "should have a .type", "should return the header field value", "should skip non error middleware", "should support -n", "should parse utf-16", "should reject numbers for app.merge", "should not break undefined escape", "should include UNLINK", "should set medium priority", "should invoke middleware for all requests", "should include SUBSCRIBE", "should denote an optional format", "should return false when the resource is not modified", "should defer all the param routes", "should parse for custom type", "should adjust FQDN req.url with multiple handlers", "should not accept params in malformed paths", "should use the default value unless defined", "should only call once per request", "should ignore Rage request header", "should not change when options altered", "should fall-through when traversing past root", "should be empty by default", "should ignore charset", "should default to GET", "should continue lookup", "should emit \"mount\" when mounted", "should return language if accepted", "should get called when sending file", "should include Accept-Ranges", "should not error when inflating", "should wrap with an HTTP server", "should work \"view engine\" with leading \".\"", "should only call an error handling routing callback when an error is propagated", "should 400 when invalid content-length", "should set the value to true", "should ignore \"text/xml\"", "should stop at first untrusted", "should reject numbers for app.put", "should reject numbers for app.get", "should presist store when parse error", "should reject string", "should expose json middleware", "should reject numbers for app.m-search", "should be the executed Route", "should not get called on 404", "should work without leading \".\"", "should error if file does not exist", "should expose text middleware", "should behave like connect", "should return combined ranges", "should presist store when inflate error", "should work with several", "should override Content-Type", "should include REBIND", "should default to Host", "should reject numbers for app.delete", "should throw missing header name", "should 404 when directory", "should not throw on undefined", "should include PUT", "should escape utf whitespace", "should support gzip encoding", "should default to the socket addr if X-Forwarded-Proto not present", "should return false when not matching", "should override the default behavior", "should 404 when URL too long", "should work together with res.cookie", "should ignore maxAge", "should return []", "should include original body on error object", "should 404 if nothing found", "should not decode spaces", "should be ignored", "should respond with requested byte range", "should return a new route", "should work with IPv6 Host and port", "should check req.params", "should reject numbers for app.proppatch", "should permit modifying the .application prototype", "should ensure regexp matches path prefix", "should change default charset", "should be false if encoding not accepted", "should set the Content-Type", "should redirect to trailing slash", "should include PROPFIND", "should adapt the Content-Length accordingly", "should 400 for incomplete", "should 400 on malformed encoding", "should provide an alternate filename", "should 404 when directory without slash", "should limit to just .VERB", "should support n-", "should ignore standard type", "should span multiple segments", "should set relative expires", "should match the pathname only", "should default to true for prototype values", "should reject numbers for app.post", "should eat everything after /", "should return the app", "should return undefined for prototype values", "should remove Content-Disposition", "should include COPY", "should match no slashes", "should expose app.locals", "should 415 on unknown charset prior to verify", "should work with IPv6 Host", "should map logic for a single param", "should default to http", "should lookup the file in the path", "should reject numbers for app.del", "should allow relative path", "should include SOURCE", "should not be affected by app.all", "should reject numbers for app.checkout", "should match middleware when omitting the trailing slash", "should support .use of other routers", "should get reset by res.set(field, val)", "should catch urlencoded ../", "should set a signed cookie", "should accept multiple arguments", "should ensure redirect URL is properly encoded", "should respond with default Content-Security-Policy", "should throw on bad value", "should return the mounted path", "should not include Last-Modified", "should ignore \"application/x-foo\"", "should reject Date as middleware", "should parse application/octet-stream", "should handle errors via arity 4 functions", "should reject numbers for app.source", "should serve zero-length files", "should generate a signed JSON cookie", "should include REPORT", "should only include each method once", "should re-route when method is altered", "should Content-Disposition to attachment", "should Vary: Accept", "should not allow root path disclosure", "should only extend for the referenced app", "should work with large limit", "should be false if language not accepted", "should include PURGE", "should include Last-Modified", "should support fallbacks", "should allow escaped regexp", "should not stack overflow with a large sync route stack", "should reject numbers for app.mkcol", "should inherit to sub apps", "should respond with json for null", "should should respond with 406 not acceptable", "should invoke callback with a number", "should support byte ranges", "should default to {}", "should support regexp path", "should handle throw", "should presist store", "should disable \"view cache\"", "should catch thrown secondary error", "should not stack overflow with many registered routes", "should include ACL", "should act like \"extended\"", "should throw an error", "should reject numbers for app.patch", "should default the Content-Type", "should always lookup view without cache", "should decode correct params", "should override previous Content-Types with callback", "should allow rewriting of the url", "should parse extended syntax", "should redirect correctly", "should return the first acceptable type with canonical mime types", "should accept multiple arrays of middleware", "should include UNSUBSCRIBE", "should throw on old middlewares", "should expose the application prototype", "should include MERGE", "should override", "should 400 when URL malformed", "should ignore invalid incoming req.params", "should include a Content-Range header of complete length", "should reject numbers for app.trace", "should allow pass-through", "should check req.body", "should set Content-Range", "should set Content-Type", "should include MKCOL", "should inherit \"trust proxy\" setting", "should load the file when on trailing slash", "should throw", "should cap to the given size when open-ended", "should allow multiple calls", "should set a value", "should allow renaming callback", "should cache with \"view cache\" setting", "should respect X-Forwarded-Proto", "should default max-age=0", "should include correct message in stack trace", "should redirect when directory without slash", "should append multiple headers", "is taken to be equal to one less than the current length", "should fail gracefully", "should case-insensitive", "should presist store when inflated", "should reject 0", "should expose raw middleware", "should return the canonical", "should throw for non-string header name", "should return parsed ranges", "should support disabling extensions", "should include MKACTIVITY", "should create an instance of it", "should map app.param(name, ...) logic", "should redirect to trailing slash mount point", "should not escape utf whitespace for json fallback", "should not parse primitives with leading whitespaces", "should travel through routers correctly", "should support mount-points", "should lookup in later paths until found", "should fall-through when URL malformed", "should work if path has trailing slash", "should accept content-encoding", "should obey Rage request header", "should return true", "should given precedence to the child", "should not set headers on 404", "should return the full type when matching", "should support absolute paths", "should not mutate the options object", "should reject numbers for app.subscribe", "should set the value to false", "should parse JSON for custom type", "should set headers on response", "should parse primitives", "should use last header when duplicated", "should allow wildcard type/subtypes", "should not encode bad \"url\"", "should return an array", "should set partitioned", "should set a cookie passed expiry", "should include DEL", "should reject numbers for app.purge", "should 413 if over limit", "should not parse extended syntax", "should get the response header field", "should accept string", "should support index.<engine>", "should extend the request prototype", "should handle throwing inside error handlers", "should jump out of router", "should output the same headers as GET requests", "should include TRACE", "should restore req.params", "should set high priority", "should permit modifying the .request prototype", "should merge numeric indices req.params when more in parent", "should work with different charsets", "should parse x-www-form-urlencoded", "should reject numbers for app.report", "should return an array with the whole domain", "should 405 when OPTIONS request", "should not error on empty routes", "should run the callback for a method just once", "should reject numbers for app.head", "should 500 if stream not readable", "should handle single error handler", "should default to development", "should return an array with the whole IPv6", "should return true when present", "should be disabled by default", "should include GET", "should reject numbers for app.lock", "should return the app when undefined", "should allow literal \".\"", "should not get invoked without error handler on error", "should set Link header field", "should fall-through when directory", "should return the remote address", "should match trailing slashes", "should add the filename param", "should set max-age", "should reject reading outside root", "should accept array of values", "should expose the response prototype", "should reject numbers for app.rebind", "should 404 when trailing slash", "should invoke callback with an object", "should denote a greedy capture group", "should not mix requests", "should work in array of paths", "should include PATCH", "should inherit from event emitter", "should parse JSON for \"application/json\"", "should not hang response", "should return an empty array", "should be optional by default", "should special-case Referer", "should reject numbers for app.bind", "should reject numbers for app.unbind", "should ignore FQDN in search", "should return false when not present", "should handle VERBS", "should respond with json and set the .statusCode for backwards compat", "should be chainable", "should reject number as middleware", "should use params from router", "should 413 when over limit with chunked encoding", "should use the first value", "should 400 when only whitespace", "should allow several capture groups", "should call when values differ", "should return the Host when present", "should run in order added", "should return an array with the whole IPv4", "should render the template", "should set immutable directive in Cache-Control", "should default to the parent app", "should allow merging existing req.params", "should restore req.params after leaving router", "should return true when Accept is not present", "should match middleware when adding the trailing slash", "should handle blank URL", "should next() on mount point", "should be configurable", "should not stack overflow with a large sync middleware stack", "should work cross-segment", "should reject non-functions", "handle missing method", "should contain app settings", "should always return language", "should parse fully-encoded extended syntax", "should not get called on redirect", "should return true without response headers", "should call handler in same route, if exists", "should accept number of bytes", "should fall-through when URL too long", "should enable \"view cache\"", "should jump to next route", "should handle throwing inside routes with params", "should reject string as middleware", "should allow sub app to override", "should return true when X-Requested-With is xmlhttprequest", "should invoke the callback", "should pass-though mounted middleware", "should reject numbers for app.notify", "should parse \"application/x-www-form-urlencoded\"", "should include SEARCH", "should reject numbers for app.copy", "should work when at the limit", "should presist store on error", "should reject numbers for app.link", "should utilize qvalues in negotiation", "should reject numbers for app.acl", "should respond with 206 \"Partial Content\"", "should default object", "should handle render error throws", "should be case-insensitive", "should work following a partial capture group", "should decode the capture", "should merge numeric indices req.params when parent has same number", "should allow custom type", "should respond with jsonp", "should parse JSON", "should work with Infinity limit", "should handle empty message-body", "should give precedence to app.render() locals", "should encode \"url\"", "should preserve trailing slashes when not present", "should return undefined when unset", "should permit modifying the .response prototype", "should return the type when matching", "should ignore X-Forwarded-Proto", "should respect X-Forwarded-Host", "should match identical casing", "should set prototype values", "should generate a JSON cookie", "should work \"view engine\" setting", "should assert value if function", "should not include Cache-Control", "should parse \"text/html\"", "should include BIND", "should parse utf-8", "should be empty for top-level route", "should require root path", "should not include Accept-Ranges", "should respond with json for String", "should work without handlers", "should parse \"application/x-pairs\"", "should fail on unknown charset", "should throw if a callback is undefined", "should set Content-Length to the # of octets transferred", "should throw if a callback is not a function", "should return true when initial proxy is https", "should throw with invalid priority", "should invoke the first callback", "should include security header and prologue", "should work with unicode", "should reject numbers for app.unlock", "should work without content-type", "should parse when truthy value returned", "should handle Content-Length: 0", "should parse multiple key instances", "should contain lower path", "should support .get", "should pass error to callback", "should be called for any URL when \"*\"", "should include LOCK", "should match middleware", "should reject numbers for app.propfind", "should ignore FQDN in path", "should support using .all to capture all http verbs", "should include POST", "should redirect directories", "should dispatch", "should adjust FQDN req.url with multiple routed handlers", "should be passed to JSON.stringify()", "should accept range requests", "should skip POST requests", "should forward requests down the middleware chain", "should 415 on unknown encoding", "should include HTML link", "should return the addr after trusted proxy based on count", "should not support jsonp callbacks", "should ignore X-Forwarded-Host", "should set Link header field for multiple calls", "should not throw if all callbacks are functions", "should support precondition checks", "should not stack overflow with a large sync stack", "should merge numeric indices req.params", "should extend the response prototype", "should include Cache-Control", "should not override previous Content-Types", "should invoke middleware for all requests starting with path", "should work if number is floating point", "should provide a helpful error", "should not throw on null", "should return the parent when mounted", "should handle duplicated middleware", "should adjust FQDN req.url", "should parse array index notation", "should respond with json for Number", "should not redirect to protocol-relative locations", "should error from verify", "should throw with notice", "should include PROPPATCH", "should parse array index notation with large array", "should reject null as middleware", "should use status as second number for backwards compat", "should parse using function", "should throw on invalid date", "should set \"trust proxy fn\"", "should accept any type", "should respond with 416", "should throw when the callback is missing", "should return the first acceptable type", "should handle missing URL", "should not invoke without route handler", "should expose the request prototype", "should set low priority", "should include MOVE", "should parse text/plain", "should set a cookie", "should respond with json", "should not be greedy immediately after param", "should allow custom codes", "should ignore object callback parameter with jsonp", "should ignore application/x-foo", "should 415 on unknown charset", "should call param function when routing VERBS", "should invoke callback with no arguments", "should reject numbers for app.options", "should not call when values differ on error", "should return the addr after trusted proxy based on list", "should not pollute parent app", "should expose urlencoded middleware", "should default to false for prototype values", "should allow up within root", "should be .use()able", "should honor content-type charset", "should invoke callback with an array", "should stack", "should return false", "should set the child's .parent", "should support empty string path", "should accept an argument list of type names", "should support array of paths with middleware array", "should support ../", "should next() on directory", "should throw an error with invalid maxAge", "should support identity encoding", "should parse parameters with dots", "should reject numbers for app.mkcalendar", "should be served when dotfiles: \"allow\" is given", "should work with IPv6 address", "should cap to the given size", "should return false when initial proxy is http", "should allow fallthrough", "should not parse query", "should 413 when inflated body over limit", "should cache with cache option", "should be invoked instead of auto-responding", "should return false when no match is made", "should work when only .default is provided", "should work within arrays", "should be undefined by default", "should invoke callback with null", "should be optional", "should parse \"text/plain\"", "should require a preceding /", "should support urlencoded pathnames", "should include CHECKOUT", "should be inclusive", "should return a signed JSON cookie", "should return false without response headers", "should support conditional requests", "should return the addr after trusted proxy, from sub app", "should redirect directories with query string", "should not override previous Content-Types with no callback", "should defer to next route", "should set the header", "should return encoding if accepted", "should populate the capture group", "should return set value", "should include HEAD", "should support mounted app anywhere", "should accept nested arrays of middleware", "should use first callback parameter with jsonp", "should return true when set", "should reject numbers for app.unlink", "should include DELETE"], "failed_tests": ["res", "should accept an instance of URL"], "skipped_tests": []}, "fix_patch_result": {"passed_count": 940, "failed_count": 0, "skipped_count": 0, "passed_tests": ["should populate req.params with the captures", "should default to false", "should ignore X-Forwarded-Host if socket addr not trusted", "should return false when set", "should respond with root handler", "should reject numbers for app.search", "should allow options to res.sendFile()", "should not perform freshness check unless 2xx or 304", "should denote an optional capture group", "should support dynamic routes", "should pass-though middleware", "should not invoke without a body", "should respond with 200 and the entire contents", "should reject up outside root", "should be not be enabled by default", "should support nesting", "should support array of paths", "should assert value is function", "should return undefined otherwise", "should 403 when traversing past root", "should unicode escape HTML-sniffing characters", "should overwrite existing req.params by default", "should parse array of objects syntax", "should not match otherwise", "should otherwise return the value", "should support index.html", "should send ETag in response to UNLOCK request", "should be called for any URL", "should return false when the resource is modified", "should transfer a file", "should handle throwing in handler after async param", "should display login error for bad password", "should return the client addr", "should expose res.locals", "should not override manual content-types", "should be reasonable when infinite", "should strip port number", "should not obscure FQDNs", "should send as application/json", "should 500 on error", "should set the response status code to 501", "should include LINK", "should include ETag", "should default to utf-8", "should lookup the mime type", "should work with IPv4 address", "should work with res.set(field, val) first", "should invoke the callback on 404", "should return an array of the specified addresses", "should deny dotfiles", "should respond with hello world", "should disallow arbitrary js", "should capture everything", "should get a users pets", "should parse \"application/octet-stream\"", "should fall-through when directory without slash", "should not parse complex keys", "should default to parse complex keys", "should require middleware", "should support deflate encoding", "should alias app.delete()", "should include OPTIONS", "should return true when \"trust proxy\" is enabled", "should respond repos json", "should add handler", "should return undefined if no range", "should send the status code and message as body", "should 400 for bad token", "should add the filename and filename* params", "should fail to find user", "should parse deep object", "should set Last-Modified", "should error missing path", "should include UNBIND", "should map the array", "should not respond if the path is not defined", "should not add it again", "should ignore \"application/x-json\"", "should not touch already-encoded sequences in \"url\"", "should parse without encoding", "should all .VERB after .all", "should include MKCALENDAR", "should not parse primitives", "should return true when the resource is not modified", "should set params", "should not send cache-control", "should mount the app", "should return the first when Accept is not present", "should respond with users", "should not override Content-Type", "should give precedence to res.render() locals over app.locals", "should return the parsed pathname", "should set multiple response header fields", "should contain full lower path", "should return the protocol string", "should parse codepage charsets", "should not send cache-control header with immutable", "should presist store when unmatched content-type", "should redirect to /", "should work with encoded values", "should remove OWS around comma", "should not send ETag for res.send()", "should keep correct parameter indexes", "should map a template engine", "should display login error for bad user", "should default to true", "should get a users pet", "should ignore the body", "should work inside literal parenthesis", "should check req.query", "should send ETag in response to MKACTIVITY request", "should floor cache-control max-age", "should redirect relative to the originalUrl", "should include NOTIFY", "should ignore X-Forwarded-Proto if socket addr not trusted", "should 404 for directory without trailing slash", "should not send cache-control header", "should reject numbers for app.mkactivity", "should respond with json and set the .statusCode", "should call param function when routing middleware", "should pass it to the callback", "should set the Content-Type based on a filename", "should fail without proper username", "should return true when the resource is modified", "should send ETag in response to MOVE request", "should support altering req.params across routes", "should parse \"application/vnd+octets\"", "should set .statusCode", "should cap cache-control max-age to 1 year", "should be able to invoke other formatter", "should transfer as an attachment", "should allow naming", "should set the correct charset for the Content-Type", "should 404 with unknown user", "should be served with \".\"", "should include UNLOCK", "should fail when omitting the trailing slash", "should be callable", "should display no views", "should 404 without routes", "should redirect to /login", "should expose static middleware", "should handle throw in .all", "should handle no message-body", "should parse when content-length != char length", "should parse JSON for \"application/vnd.api+json\"", "should invoke callback with a string", "should transfer a file with special characters in string", "should consider ../ malicious when \"root\" is not set", "should work when mounted", "should disable redirect", "should throw if a callback is null", "should reject numbers for app.unsubscribe", "should support absolute paths with \"view engine\"", "should default to the routes defined", "should respond with APIv2 root handler", "should match a single segment only", "should support HEAD", "should not accept content-encoding", "should 400 on primitives", "should prefer child \"trust proxy\" setting", "should expose Router", "should denote a format", "should call when values differ when using \"next\"", "should denote a capture group", "should take quality into account", "should default to a 302 redirect", "should set \"etag fn\"", "should presist store when limit exceeded", "should return a function with router methods", "should ignore hidden files", "should not redirect incorrectly", "should set the given params", "should serve static files", "should respond with users 1 through 3", "should strip path from req.url", "should allow []", "should not choke on auth-looking URL", "should fail when adding the trailing slash", "should fall-through when OPTIONS request", "should catch thrown error", "should return false when http", "should reject numbers for app.move", "should break out of app.router", "should send as html", "should give precedence to res.render() locals over res.locals", "should fail if not given fn", "should not alter the status", "should return false otherwise", "should allow leading whitespaces in JSON", "should require root path to be string", "should parse complex keys", "should accept array of middleware", "should 413 when over limit with Content-Length", "should add a router per method", "should be ignored case-insensitively", "should 413 when inflated value exceeds limit", "should include M-SEARCH", "should error for non-string path", "should have a .type", "should redirect to /login without cookie", "should return the header field value", "should skip non error middleware", "should support -n", "should send ETag in response to REBIND request", "should parse utf-16", "should reject numbers for app.merge", "should not break undefined escape", "should transfer a file with urlencoded name", "should include UNLINK", "should set medium priority", "should invoke middleware for all requests", "should include SUBSCRIBE", "should respond with 400 bad request", "should next(err)", "should denote an optional format", "should invoke the callback on socket error", "should return false when the resource is not modified", "should min cache-control max-age to 0", "should defer all the param routes", "should parse for custom type", "should adjust FQDN req.url with multiple handlers", "should not accept params in malformed paths", "should use the default value unless defined", "should default to text/html", "should utilize the same options as express.static()", "should only call once per request", "should accept an instance of URL", "should ignore Rage request header", "should not change when options altered", "should fall-through when traversing past root", "should be empty by default", "should get pet", "should ignore charset", "should return type if not given charset", "should default to GET", "should continue lookup", "should emit \"mount\" when mounted", "should return language if accepted", "should send ETag in response to UNBIND request", "should set the response status code to 410", "should get called when sending file", "should support unices", "should include Accept-Ranges", "should not error when inflating", "should accept to application/json", "should wrap with an HTTP server", "should work \"view engine\" with leading \".\"", "should only call an error handling routing callback when an error is propagated", "should 400 when invalid content-length", "should send ETag in response to UNSUBSCRIBE request", "should keep charset if not given charset", "should set the value to true", "should ignore \"text/xml\"", "should include the redirect type", "should stop at first untrusted", "should reject numbers for app.put", "should reject numbers for app.get", "should presist store when parse error", "should reject string", "should expose json middleware", "should invoke the callback when client already aborted", "should reject numbers for app.m-search", "should be the executed Route", "should not get called on 404", "should set ETag", "should support strings", "should say foo", "should send ETag in response to PROPFIND request", "should work without leading \".\"", "should error if file does not exist", "should pass options to send module", "should expose text middleware", "should disallow requesting out of \"root\"", "should behave like connect", "should send custom ETag", "should display 1 view on revisit", "should return combined ranges", "should presist store when inflate error", "should work with several", "should override Content-Type", "should include REBIND", "should default to Host", "should send ETag in response to BIND request", "should send ETag in response to CHECKOUT request", "should reject numbers for app.delete", "should set the values", "should throw missing header name", "should fail", "should have a download header", "should redirect to /bar", "should send ETag", "should 404 when directory", "should not throw on undefined", "should include PUT", "should escape utf whitespace", "should be supported for backwards compat", "should override charset", "should support gzip encoding", "should default to the socket addr if X-Forwarded-Proto not present", "should return false when not matching", "should respond with index", "should error without \"view engine\" set and file extension to a non-engine module", "should override the default behavior", "should 404 when URL too long", "should work together with res.cookie", "should ignore maxAge", "should return []", "should include original body on error object", "should 404 if nothing found", "should not decode spaces", "should be ignored", "should respond with requested byte range", "should return a new route", "should work with IPv6 Host and port", "should check req.params", "should update the user", "should reject numbers for app.proppatch", "should permit modifying the .application prototype", "should strip Content-* fields, Transfer-Encoding field, and body", "should ensure regexp matches path prefix", "should change default charset", "should pass the resulting string", "should be false if encoding not accepted", "should set the Content-Type", "should redirect to trailing slash", "should encode the url", "should send cache-control by default", "should create a pet for user", "should support buffer", "should include PROPFIND", "should adapt the Content-Length accordingly", "should ignore dotfiles", "should 400 for incomplete", "should 400 on malformed encoding", "should provide an alternate filename", "should 404 when directory without slash", "should send last-modified header", "should limit to just .VERB", "should support n-", "should ignore standard type", "should span multiple segments", "should set relative expires", "should match the pathname only", "should default to true for prototype values", "should reject numbers for app.post", "should eat everything after /", "should return the app", "should return undefined for prototype values", "should remove Content-Disposition", "should send ETag in response to SEARCH request", "should delete user 1", "should respond to cookie", "should include COPY", "should match no slashes", "should expose app.locals", "should 415 on unknown charset prior to verify", "should send ETag in response to OPTIONS request", "should work with IPv6 Host", "should map logic for a single param", "should default to http", "should error for non-absolute path", "should respond with text", "should lookup the file in the path", "should reject numbers for app.del", "should allow relative path", "should include SOURCE", "should not be affected by app.all", "should reject numbers for app.checkout", "should match middleware when omitting the trailing slash", "should send ETag in response to PATCH request", "should say hello", "should respond with no cookies", "should support .use of other routers", "should get reset by res.set(field, val)", "should catch urlencoded ../", "should set a signed cookie", "should accept multiple arguments", "should accept headers option", "should ensure redirect URL is properly encoded", "should respond with default Content-Security-Policy", "should render login form", "should set location from \"Referrer\" header", "should throw on bad value", "should return the mounted path", "should not include Last-Modified", "should ignore \"application/x-foo\"", "should reject Date as middleware", "should clear cookie", "should respond with users from APIv2", "should send cache-control header with immutable", "should parse application/octet-stream", "should handle errors via arity 4 functions", "should reject numbers for app.source", "should serve zero-length files", "should generate a signed JSON cookie", "should expose app.locals with `name` property", "should include REPORT", "should only include each method once", "should re-route when method is altered", "should Content-Disposition to attachment", "should Vary: Accept", "should default to application/octet-stream", "should not allow root path disclosure", "should only extend for the referenced app", "should work with large limit", "should be false if language not accepted", "should include PURGE", "should include Last-Modified", "should support fallbacks", "should send ETag for long response", "should allow escaped regexp", "should not stack overflow with a large sync route stack", "should reject numbers for app.mkcol", "should send cache-control header", "should inherit to sub apps", "should respond with json for null", "should send ETag in response to HEAD request", "should should respond with 406 not acceptable", "should invoke callback with a number", "should support byte ranges", "should default to {}", "should support regexp path", "should handle throw", "should presist store", "should disable \"view cache\"", "should catch thrown secondary error", "should not stack overflow with many registered routes", "should include ACL", "should act like \"extended\"", "should throw an error", "should reject numbers for app.patch", "should get a user to edit", "should default the Content-Type", "should always lookup view without cache", "should decode correct params", "should respond with 403", "should override previous Content-Types with callback", "should allow rewriting of the url", "should accept suffix \"m\" for minutes", "should edit a user", "should parse extended syntax", "should redirect correctly", "should return the first acceptable type with canonical mime types", "should accept multiple arrays of middleware", "should still serve", "should include UNSUBSCRIBE", "should send ETag in response to PROPPATCH request", "should throw on old middlewares", "should expose the application prototype", "should include MERGE", "should respond with an error", "should override", "should 400 when URL malformed", "should ignore invalid incoming req.params", "should include a Content-Range header of complete length", "should reject numbers for app.trace", "should allow pass-through", "should check req.body", "should set Content-Range", "should set Content-Type", "should send ETag when manually set", "should include MKCOL", "should keep charset in Content-Type for Buffers", "should get pet edit page", "should inherit \"trust proxy\" setting", "should load the file when on trailing slash", "should throw", "should cap to the given size when open-ended", "should allow multiple calls", "should set a value", "should allow renaming callback", "should cache with \"view cache\" setting", "should respond with a user", "should respect X-Forwarded-Proto", "should default max-age=0", "should include correct message in stack trace", "should not have last-modified header", "should redirect when directory without slash", "should append multiple headers", "is taken to be equal to one less than the current length", "should fail gracefully", "should case-insensitive", "should presist store when inflated", "should reject 0", "should expose raw middleware", "should return the canonical", "should throw for non-string header name", "should conditionally respond with if-modified-since", "should give precedence to res.locals over app.locals", "should set a session cookie", "should error without \"view engine\" set and no file extension", "should return parsed ranges", "should work with unknown code", "should support disabling extensions", "should do anything without type", "should include MKACTIVITY", "should 404 on missing user", "should create an instance of it", "should set body to \"\"", "should no set cookie w/o reminder", "should map app.param(name, ...) logic", "should fail without proper password", "should redirect to trailing slash mount point", "should not escape utf whitespace for json fallback", "should not parse primitives with leading whitespaces", "should travel through routers correctly", "should support mount-points", "should lookup in later paths until found", "should send ETag in response to PURGE request", "should fall-through when URL malformed", "should work if path has trailing slash", "should support windows", "should respond to range request", "should accept content-encoding", "should obey Rage request header", "should return true", "should given precedence to the child", "should not set headers on 404", "should accept plain number as milliseconds", "should return the full type when matching", "should support absolute paths", "should not mutate the options object", "should reject numbers for app.subscribe", "should set the value to false", "should send ETag in response to SUBSCRIBE request", "should accept suffix \"d\" for days", "should parse JSON for custom type", "should strip Transfer-Encoding field and body, set Content-Length", "should set headers on response", "should parse primitives", "should use last header when duplicated", "should allow wildcard type/subtypes", "should not encode bad \"url\"", "should return an array", "should set partitioned", "should set a cookie passed expiry", "should include DEL", "should reject numbers for app.purge", "should 413 if over limit", "should get a list of posts", "should not parse extended syntax", "should send ETag in response to GET request", "should get the response header field", "should display the users pets", "should accept string", "should respond with users 2 and 3 as json", "should fail integer parsing", "should support index.<engine>", "should extend the request prototype", "should set the response status code to 201", "should handle throwing inside error handlers", "should jump out of router", "should respond with error", "should output the same headers as GET requests", "should succeed with proper cookie", "should 404", "should include TRACE", "should restore req.params", "should send number as json", "should respond with three users", "should send ETag in response to M-SEARCH request", "should set high priority", "should permit modifying the .request prototype", "should merge numeric indices req.params when more in parent", "should work with different charsets", "should parse x-www-form-urlencoded", "should respond with page list", "should override charset in Content-Type", "should reject numbers for app.report", "should return an array with the whole domain", "should set location from \"Referer\" header", "should 405 when OPTIONS request", "should not advertise accept-ranges", "should not error on empty routes", "should run the callback for a method just once", "should reject numbers for app.head", "should serve relative to \"root\"", "should set the response header field", "should respond with 404 json", "should escape the url", "should 500 if stream not readable", "should handle single error handler", "should default to development", "should return an array with the whole IPv6", "should not send falsy ETag", "should return true when present", "should be disabled by default", "should set the response status code to 302", "should include GET", "should reject numbers for app.lock", "should send ETag in response to MKCALENDAR request", "should return the app when undefined", "should allow literal \".\"", "should not get invoked without error handler on error", "should set Link header field", "should fall-through when directory", "should return the remote address", "should respond with 304 Not Modified when fresh", "should match trailing slashes", "should add the filename param", "should set max-age", "should reject reading outside root", "should accept array of values", "should expose the response prototype", "should reject numbers for app.rebind", "should 404 when trailing slash", "should set the value", "should invoke callback with an object", "should not honor if-modified-since", "should respond user repos json", "should denote a greedy capture group", "should not mix requests", "should work in array of paths", "should include PATCH", "should inherit from event emitter", "should parse JSON for \"application/json\"", "should send ETag in response to DELETE request", "should not hang response", "should return an empty array", "should set multiple fields", "should be optional by default", "should special-case Referer", "should respond with APIv1 root handler", "should redirect to /foo", "should reject numbers for app.bind", "should reject numbers for app.unbind", "should ignore FQDN in search", "should send no ETag", "should return false when not present", "should handle VERBS", "should respond with json and set the .statusCode for backwards compat", "should redirect to /users", "should be chainable", "should reject number as middleware", "should use params from router", "should 413 when over limit with chunked encoding", "should send ETag in response to ACL request", "should use the first value", "should 400 when only whitespace", "should allow several capture groups", "should call when values differ", "should return the Host when present", "should run in order added", "should return an array with the whole IPv4", "should send as octet-stream", "should invoke the callback when complete", "should throw when Content-Type is an array", "should render the template", "should set immutable directive in Cache-Control", "should send ETag for empty string response", "should respond with all users", "should default to the parent app", "should set .statusCode and body", "should prefer \"Referrer\" header", "should allow merging existing req.params", "should list users", "should restore req.params after leaving router", "should return true when Accept is not present", "should not serve dotfiles by default", "should match middleware when adding the trailing slash", "should handle blank URL", "should next() on mount point", "should not serve dotfiles", "should be configurable", "should not stack overflow with a large sync middleware stack", "should work cross-segment", "should not set a charset of one is already set", "should reject non-functions", "handle missing method", "should contain app settings", "should always return language", "should parse fully-encoded extended syntax", "should accept dotfiles option", "should not get called on redirect", "should return true without response headers", "should send ETag in response to UNLINK request", "should call handler in same route, if exists", "should display the user", "should accept number of bytes", "should fall-through when URL too long", "should flatten an array", "should enable \"view cache\"", "should jump to next route", "should handle throwing inside routes with params", "should reject string as middleware", "should allow sub app to override", "should return true when X-Requested-With is xmlhttprequest", "should accept to text/plain", "should invoke the callback", "should pass-though mounted middleware", "should send ETag in response to REPORT request", "should invoke the callback without error when HEAD", "should send ETag in response to PUT request", "should reject numbers for app.notify", "should parse \"application/x-www-form-urlencoded\"", "should include SEARCH", "should reject numbers for app.copy", "should work when at the limit", "should presist store on error", "should reject numbers for app.link", "should utilize qvalues in negotiation", "should 304 when ETag matches", "should reject numbers for app.acl", "should respond with 206 \"Partial Content\"", "should default object", "should respond with instructions", "should handle render error throws", "should support windows unc", "should send ETag in response to MERGE request", "should be case-insensitive", "should transfer a directory index file", "should work following a partial capture group", "should coerce to an array of strings", "should decode the capture", "should merge numeric indices req.params when parent has same number", "should allow custom type", "should respond with jsonp", "should parse JSON", "should work with Infinity limit", "should handle empty message-body", "should set the response status code to 403", "should respond with 401 unauthorized", "should respond with 404", "should give precedence to app.render() locals", "should encode \"url\"", "should preserve trailing slashes when not present", "should transfer the file", "should send weak ETag", "should raise error for invalid status code", "should return undefined when unset", "should permit modifying the .response prototype", "should return the type when matching", "should ignore X-Forwarded-Proto", "should respect X-Forwarded-Host", "should respond with user 1", "should match identical casing", "should 404 for directory", "should set prototype values", "should generate a JSON cookie", "should display a list of users", "should work \"view engine\" setting", "should next(404) when not found", "should assert value if function", "should not include Cache-Control", "should parse \"text/html\"", "should include BIND", "should parse utf-8", "should be empty for top-level route", "should require root path", "should not include Accept-Ranges", "should respond with json for String", "should work without handlers", "should parse \"application/x-pairs\"", "should fail on unknown charset", "should not override ETag when manually set", "should throw if a callback is undefined", "should set Content-Length to the # of octets transferred", "should throw if a callback is not a function", "should return true when initial proxy is https", "should throw with invalid priority", "should invoke the first callback", "should include security header and prologue", "should respond with an empty body", "should work with unicode", "should support utf8 strings", "should reject numbers for app.unlock", "should work without content-type", "should parse when truthy value returned", "should handle Content-Length: 0", "should parse multiple key instances", "should 404 when not found", "should contain lower path", "should support .get", "should pass error to callback", "should allow ../ when \"root\" is set", "should be called for any URL when \"*\"", "should include LOCK", "should match middleware", "should reject numbers for app.propfind", "should invoke the callback without error when 304", "should ignore FQDN in path", "should support using .all to capture all http verbs", "should include POST", "should redirect directories", "should support empty string", "should dispatch", "should adjust FQDN req.url with multiple routed handlers", "should be passed to JSON.stringify()", "should accept range requests", "should skip POST requests", "should send ETag in response to MKCOL request", "should forward requests down the middleware chain", "should 415 on unknown encoding", "should include HTML link", "should return the addr after trusted proxy based on count", "should not support jsonp callbacks", "should set the response status", "should ignore X-Forwarded-Host", "should set Link header field for multiple calls", "should not throw if all callbacks are functions", "should not override ETag", "should support precondition checks", "should not stack overflow with a large sync stack", "should merge numeric indices req.params", "should extend the response prototype", "should advertise byte range accepted", "should include Cache-Control", "should not override previous Content-Types", "should invoke middleware for all requests starting with path", "should work if number is floating point", "should provide a helpful error", "should not throw on null", "should return the parent when mounted", "should handle duplicated middleware", "should adjust FQDN req.url", "should parse array index notation", "should respond with json for Number", "should not redirect to protocol-relative locations", "should error from verify", "should throw with notice", "should include PROPPATCH", "should parse array index notation with large array", "should send ETag in response to LOCK request", "should invoke the callback when client aborts", "should reject null as middleware", "should use status as second number for backwards compat", "should parse using function", "should throw on invalid date", "should send ETag in response to COPY request", "should set \"trust proxy fn\"", "should accept any type", "should update the pet", "should respond with 416", "should throw when the callback is missing", "should return the first acceptable type", "should handle missing URL", "should set the header to \"/\" without referrer", "should set cache-control max-age to milliseconds", "should not invoke without route handler", "should expose the request prototype", "should set low priority", "should send ETag in response to POST request", "should delete users", "should include MOVE", "should parse text/plain", "should send ETag in response to NOTIFY request", "should set a cookie", "should respond with json", "should not be greedy immediately after param", "should allow custom codes", "should have a link to amazing.txt", "should ignore object callback parameter with jsonp", "should ignore application/x-foo", "should 415 on unknown charset", "should call param function when routing VERBS", "should invoke callback with no arguments", "should reject numbers for app.options", "should not call when values differ on error", "should return the addr after trusted proxy based on list", "should not pollute parent app", "should expose urlencoded middleware", "should default to false for prototype values", "should allow up within root", "should respond users json", "should be .use()able", "should honor content-type charset", "should invoke callback with an array", "should set charset", "should get a user", "should send strong ETag", "should accept suffix \"s\" for seconds", "should respond with users from APIv1", "should ignore headers option on 404", "should stack", "should return false", "should set the child's .parent", "should support empty string path", "should allow dotfiles", "should succeed with proper credentials", "should accept an argument list of type names", "should support array of paths with middleware array", "should support ../", "should next() on directory", "should throw an error with invalid maxAge", "should support identity encoding", "should parse parameters with dots", "should invoke the callback on 403", "should reject numbers for app.mkcalendar", "should be served when dotfiles: \"allow\" is given", "should work with IPv6 address", "should send ETag in response to TRACE request", "should cap to the given size", "should return false when initial proxy is http", "should send ETag in response to LINK request", "should not set Vary", "should allow fallthrough", "should not parse query", "should 413 when inflated body over limit", "should respond with 500", "should cache with cache option", "should be invoked instead of auto-responding", "should return false when no match is made", "should work when only .default is provided", "should work within arrays", "should be undefined by default", "should invoke callback with null", "should be optional", "should parse \"text/plain\"", "should require a preceding /", "should always check regardless of length", "should display the edit form", "should support urlencoded pathnames", "should not error if the client aborts", "should include CHECKOUT", "should coerce to a string", "should be inclusive", "should return a signed JSON cookie", "should respond with html", "should return false without response headers", "should send ETag in response to SOURCE request", "should not honor range requests", "should support conditional requests", "should return the addr after trusted proxy, from sub app", "should redirect directories with query string", "should set the Content-Type with type/subtype", "should have a form", "should not override previous Content-Types with no callback", "should defer to next route", "should set the header", "should return encoding if accepted", "should populate the capture group", "should return set value", "should include HEAD", "should support mounted app anywhere", "should accept nested arrays of middleware", "should use first callback parameter with jsonp", "should return true when set", "should reject numbers for app.unlink", "should include DELETE"], "failed_tests": [], "skipped_tests": []}, "instance_id": "expressjs__express-5555"}
{"org": "expressjs", "repo": "express", "number": 3870, "state": "closed", "title": "Fix #3869: Add support for custom view cache key", "body": "See description of the issue in https://github.com/expressjs/express/issues/3869.\r\n\r\n*What this PR includes:*\r\n- Add new option `cacheKey` to `renderOptions` of `render` method.\r\n- Slightly refactor cache tests in `app.render.js`, add new ones for new `cacheKey` option.\r\n\r\nFor a better context, here is how it may be used in an engine https://github.com/pugjs/pug/pull/3099.", "base": {"label": "expressjs:master", "ref": "master", "sha": "dc538f6e810bd462c98ee7e6aae24c64d4b1da93"}, "resolved_issues": [{"number": 3869, "title": "Views: custom cache key support", "body": "This is probably not related directly to Express itself, but I think it's a nice feature to have and may cover some use cases. I refer specifically to Pug, but it may apply to any view engine.\r\n\r\n# Use Case\r\n\r\nA Pug user may want to use [filters](https://pugjs.org/language/filters.html) with dynamic content. But Pug compiles filters only once, they can't contain dynamic content. Express and Pug caches prevent to cache templates with a dynamic cache key, they use filename as a cache key instead. Most of the cache implementations support this, but Express and Pug don't, so you are unable to control how to cache templates.\r\n\r\n*Some related discussions:*\r\nhttps://github.com/pugjs/pug/issues/2603\r\nhttps://github.com/pugjs/pug/issues/1782\r\n\r\n# Suggested Solution\r\n\r\nWe can add the new option `cacheKey` to `render` method. And we can use it in `render` method to identify cached views. This is quite a small fix.\r\n\r\n*Pros:*\r\n- It's easy to implement and it won't be a breaking change.\r\n\r\n*Cons:*\r\n- It may complicate the API of the `render` method.\r\n- It may require view engines to implement support for it. E.g. Pug has its own cache under the hood. But this should be very easy, just one line of code.\r\n\r\nI'm going to submit PR for this one. Let me know your thoughts."}], "fix_patch": "diff --git a/lib/application.js b/lib/application.js\nindex 91f77d241e..e388fe7cd3 100644\n--- a/lib/application.js\n+++ b/lib/application.js\n@@ -530,6 +530,7 @@ app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');\n \n app.render = function render(name, options, callback) {\n   var cache = this.cache;\n+  var cacheKey = name;\n   var done = callback;\n   var engines = this.engines;\n   var opts = options;\n@@ -558,9 +559,14 @@ app.render = function render(name, options, callback) {\n     renderOptions.cache = this.enabled('view cache');\n   }\n \n+  // use custom cache key if provided\n+  if (renderOptions.cacheKey) {\n+    cacheKey = renderOptions.cacheKey;\n+  }\n+\n   // primed cache\n   if (renderOptions.cache) {\n-    view = cache[name];\n+    view = cache[cacheKey];\n   }\n \n   // view\n@@ -584,7 +590,7 @@ app.render = function render(name, options, callback) {\n \n     // prime the cache\n     if (renderOptions.cache) {\n-      cache[name] = view;\n+      cache[cacheKey] = view;\n     }\n   }\n \n", "test_patch": "diff --git a/test/app.render.js b/test/app.render.js\nindex 54f6c2ca82..0daeedaa51 100644\n--- a/test/app.render.js\n+++ b/test/app.render.js\n@@ -227,29 +227,15 @@ describe('app', function(){\n \n     describe('caching', function(){\n       it('should always lookup view without cache', function(done){\n-        var app = express();\n-        var count = 0;\n-\n-        function View(name, options){\n-          this.name = name;\n-          this.path = 'fake';\n-          count++;\n-        }\n-\n-        View.prototype.render = function(options, fn){\n-          fn(null, 'abstract engine');\n-        };\n-\n-        app.set('view cache', false);\n-        app.set('view', View);\n+        var app = createAppForCaching(false);\n \n         app.render('something', function(err, str){\n           if (err) return done(err);\n-          count.should.equal(1);\n+          app.count.should.equal(1);\n           str.should.equal('abstract engine');\n           app.render('something', function(err, str){\n             if (err) return done(err);\n-            count.should.equal(2);\n+            app.count.should.equal(2);\n             str.should.equal('abstract engine');\n             done();\n           })\n@@ -257,29 +243,15 @@ describe('app', function(){\n       })\n \n       it('should cache with \"view cache\" setting', function(done){\n-        var app = express();\n-        var count = 0;\n-\n-        function View(name, options){\n-          this.name = name;\n-          this.path = 'fake';\n-          count++;\n-        }\n-\n-        View.prototype.render = function(options, fn){\n-          fn(null, 'abstract engine');\n-        };\n-\n-        app.set('view cache', true);\n-        app.set('view', View);\n+        var app = createAppForCaching(true);\n \n         app.render('something', function(err, str){\n           if (err) return done(err);\n-          count.should.equal(1);\n+          app.count.should.equal(1);\n           str.should.equal('abstract engine');\n           app.render('something', function(err, str){\n             if (err) return done(err);\n-            count.should.equal(1);\n+            app.count.should.equal(1);\n             str.should.equal('abstract engine');\n             done();\n           })\n@@ -332,34 +304,54 @@ describe('app', function(){\n \n     describe('caching', function(){\n       it('should cache with cache option', function(done){\n-        var app = express();\n-        var count = 0;\n-\n-        function View(name, options){\n-          this.name = name;\n-          this.path = 'fake';\n-          count++;\n-        }\n-\n-        View.prototype.render = function(options, fn){\n-          fn(null, 'abstract engine');\n-        };\n-\n-        app.set('view cache', false);\n-        app.set('view', View);\n+        var app = createAppForCaching(false);\n \n         app.render('something', {cache: true}, function(err, str){\n           if (err) return done(err);\n-          count.should.equal(1);\n+          app.count.should.equal(1);\n           str.should.equal('abstract engine');\n           app.render('something', {cache: true}, function(err, str){\n             if (err) return done(err);\n-            count.should.equal(1);\n+            app.count.should.equal(1);\n             str.should.equal('abstract engine');\n             done();\n           })\n         })\n       })\n+\n+      describe('when \"cacheKey\" option is given', function(){\n+        it('should render the template twice with different keys', function(done){\n+          var app = createAppForCaching(true);\n+\n+          app.render('something', {cacheKey: 'key1'}, function(err, str){\n+            if (err) return done(err);\n+            app.count.should.equal(1);\n+            str.should.equal('abstract engine');\n+            app.render('something', {cacheKey: 'key2'}, function(err, str){\n+              if (err) return done(err);\n+              app.count.should.equal(2);\n+              str.should.equal('abstract engine');\n+              done();\n+            })\n+          })\n+        })\n+\n+        it('should render the template once with the same keys', function(done){\n+          var app = createAppForCaching(true);\n+\n+          app.render('something', {cacheKey: 'key'}, function(err, str){\n+            if (err) return done(err);\n+            app.count.should.equal(1);\n+            str.should.equal('abstract engine');\n+            app.render('something', {cacheKey: 'key'}, function(err, str){\n+              if (err) return done(err);\n+              app.count.should.equal(1);\n+              str.should.equal('abstract engine');\n+              done();\n+            })\n+          })\n+        })\n+      })\n     })\n   })\n })\n@@ -371,3 +363,23 @@ function createApp() {\n \n   return app;\n }\n+\n+function createAppForCaching(cache) {\n+  var app = express();\n+  app.count = 0;\n+\n+  function View(name, options){\n+    this.name = name;\n+    this.path = 'fake';\n+    app.count++;\n+  }\n+\n+  View.prototype.render = function(options, fn){\n+    fn(null, 'abstract engine');\n+  };\n+\n+  app.set('view cache', !!cache);\n+  app.set('view', View);\n+\n+  return app;\n+}\n", "fixed_tests": {"app .render(name, options, fn) caching when \"cacheKey\" option is given should render the template twice with different keys": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "p2p_tests": {"app should emit \"mount\" when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should accept dotfiles option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first acceptable type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should error missing path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.rebind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) should not support jsonp callbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback when complete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should denote a greedy capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include BIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" disabled should not parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should return the type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .all should be called for any URL when \"*\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MOVE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost example.com GET / should say hello": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET / should respond with root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should return the Host when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /restricted should redirect to /login without cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(names, fn) should map the array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to ACL request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should not override previous Content-Types with no callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should fail without proper username": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should keep charset if not given charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when complete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) signed without secret should throw an error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when disabled should send ETag when manually set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should default to the routes defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.bind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should match a single segment only": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include NOTIFY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncoding should be true if encoding accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should require a preceding /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support buffer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should accept to application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match no slashes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should not override ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should cap to the given size": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return false without response headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should include the redirect type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PUT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .application prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.acl": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should not override Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should work with encoded values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should not throw if all callbacks are functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.proppatch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.subscribe": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKCOL request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id/pets/:pid should get a users pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include DEL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support absolute paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should handle blank URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNBIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return true when Accept is not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PATCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag for empty string response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url with multiple handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.options() should override the default behavior": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject number as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.merge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "in development should disable \"view cache\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support empty string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject Date as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should not override manual content-types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throw in .all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support array of paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when an error occurs should next(err)": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set location from \"Referer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNLINK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first when Accept is not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enabled() should default to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.checkout": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should set a session cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.get": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, options, fn) should pass the resulting string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to OPTIONS request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should not override ETag when manually set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should not accept params in malformed paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when given a regexp should match the pathname only": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes should be optional by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.head": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback without error when HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should give precedence to app.render() locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should always check regardless of length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should work with IPv6 Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should work with unicode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should default to text/html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SUBSCRIBE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should not transfer relative with without": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(status, object) should respond with json and set the .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "ejs GET / should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, fn) when an error occurs should pass it to the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should return type if not given charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MOVE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unlink": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .VERB() should not get invoked without error handler on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should default to http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should be optional": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return true when the resource is not modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should disallow arbitrary js": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) should not override previous Content-Types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params when parent has same number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.put": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given an extension should lookup the mime type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback on socket error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should set charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback without error when 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept nested arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should mount the app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkcol": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work following a partial capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should accept headers option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should restore req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should throw with notice": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name? should denote an optional capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is simple should not parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains with no host should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .all should support using .all to capture all http verbs": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should accept to application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "HEAD should default to GET": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should not decode spaces": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string) should allow multiple calls": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json escape\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name, default) should use the default value unless defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /users should display a list of users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should display 1 view on revisit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.trace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should return the header field value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.notify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /pet/0 should get pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when present should display the user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should work with IPv6 Host and port": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throw": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should not obscure FQDNs": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support array of paths with middleware array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given an object should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to BIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should return the full type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains with trusted X-Forwarded-Host should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .request should extend the request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "throw after .end() should fail gracefully": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should default to the parent app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include POST": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should allow naming": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SEARCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req should accept an argument list of type names": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.parent should return the parent when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) caching should cache with cache option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNSUBSCRIBE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, ".sendfile(path, options) should pass options to send module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should transfer a directory index file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET /next should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol should return the protocol string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to POST request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should skip non error middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should escape the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should transfer a file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should do anything without type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include DELETE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when client already aborted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support mount-points": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should set max-age": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should throw when Content-Type is an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should not invoke without route handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should invoke middleware for all requests starting with path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when the request method is HEAD should ignore the body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should accept array of values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(code, body) should set .statusCode and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should strip path from req.url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET /files/amazing.txt should have a download header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should set the Content-Type based on a filename": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work in array of paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next() is called should continue lookup": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should encode \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should not override manual content-types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MERGE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with an absolute path should transfer the file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is not present should return the remote address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should send as octet-stream": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback without error when HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url, status) should set the response status": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when not present should 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET / should respond with instructions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should escape utf whitespace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support empty string path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should respond with 304 Not Modified when fresh": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "in production should enable \"view cache\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/view should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should defer to next route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should not error if the client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should append multiple headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support buffer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should allow fallthrough": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle single error handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support absolute paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should not be affected by app.all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should decore the capture": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow rewriting of the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SOURCE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support utf8 strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should cap to the given size when open-ended": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject Date as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(err) is called should break out of app.router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should eat everything after /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include ACL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work \"view engine\" with leading \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) should allow options to res.sendFile()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /user/:id should update the user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should return the full type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should call when values differ": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should return the app when undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages should be true if language accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id/pets should get a users pets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should not touch already-encoded sequences in \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should span multiple segments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with a valid api key should respond user repos json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.path() should return the canonical": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call param function when routing VERBS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is extended should parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should return parsed ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /users/foo-bar should fail integer parsing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should only include each method once": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .handle should dispatch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should stack": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages when Accept-Language is not present should always return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /pet/2 should update the pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should work with several": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should map a template engine": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when a \"view\" constructor is given should create an instance of it": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name) should check req.body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should strip port number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when content-type is not present should return false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.locals over app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET /missing should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /posts should get a list of posts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path with non-GET should still serve": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should prefer child \"trust proxy\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given an array should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given when array of paths should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, value) should set the response header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support mounted app anywhere": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should not mutate the options object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should not set a charset of one is already set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should map logic for a single param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /login should display login error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call when values differ": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to NOTIFY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting neither text or html should respond with an empty body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should have a .type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.all() should add a router per method": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "markdown GET / should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should return a new route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id/edit should display the edit form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) caching when \"cacheKey\" option is given should render the template once with the same keys": {"run": "NONE", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept nested arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should default to Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should all .VERB after .all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should allow []": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should denote a capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost bar.example.com GET / should redirect to /bar": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept multiple arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should default to application/octet-stream": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should return undefined if no range": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback on 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains otherwise should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should expose res.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should case-insensitive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, object) should generate a JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PROPPATCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should handle missing URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work without leading \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should work with IPv4 address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SEARCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work \"view engine\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(body, code) should be supported for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1 should respond with user 1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MERGE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should coerce to an array of strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support absolute paths with \"view engine\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should handle render error throws": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkcalendar": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should add handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include CHECKOUT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.listen() should wrap with an HTTP server": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should override charset in Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should be called for any URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PUT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not override previous Content-Types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unbind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow escaped regexp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"headers\" option should ignore headers option on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies POST / should set a cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.link": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should travel through routers correctly": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should work with IPv6 address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies POST / should no set cookie w/o reminder": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(object) should coerce to a string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return true without response headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is not present should return []": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set the header to \"/\" without referrer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguage should be false if language not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename) should provide an alternate filename": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .signedCookies should return a signed JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(null) should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should set relative expires": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should 404 without routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should work cross-segment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router .:name? should denote an optional format": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.source": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support absolute paths with \"view engine\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should allow merging existing req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .route should be the executed Route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET / should redirect to /login": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should throw missing header name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /logout should redirect to /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .response should not be influenced by other app protos": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) given .default should be invoked instead of auto-responding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should ignore object callback parameter with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should not send ETag for res.send()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should inherit \"trust proxy\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is missing should return false when http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation POST /user/:id/edit?_method=PUT should edit a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to HEAD request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"view engine\" is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include REPORT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 404 for directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(fn) should fail if not given fn": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route should work without handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work inside literal parenthesis": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should return undefined otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET / should respond with instructions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name) should check req.query": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json for null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept multiple arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject null as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost example.com GET /foo should say foo": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should fail without proper password": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include M-SEARCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"trust proxy\" should set \"trust proxy fn\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given an array should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should ignore FQDN in path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should not call when values differ on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /restricted should succeed with proper cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharset(type) when Accept-Charset is not present should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should restore req.params after leaving router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should transfer the file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should work with cookies": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" an unknown value should throw": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation PUT /user/:id/edit should edit a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for Number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should return a function with router methods": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "without NODE_ENV should default to development": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include REBIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(status, url) should set the response status": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.render() locals over res.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.purge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should ignore headers option on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(undefined) should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with an empty array should not set Vary": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKACTIVITY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should handle VERBS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support index.<engine>": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .response should extend the response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params when more in parent": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map DELETE /users should delete users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(status, object) should respond with json and set the .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SOURCE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.del": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return false when the resource is modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharset(type) when Accept-Charset is not present should return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should require middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag for long response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should take quality into account": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /user/0 should respond with a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include TRACE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET / should redirect to /users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return false when not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) should set params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users with a valid api key should respond users json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Object) should send as application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should 404 for directory without trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should support .get": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should expose app.locals with `name` property": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should respond to cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should transfer a file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should default to text/html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path) should transfer as an attachment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept multiple arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should return the Host when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" disabled should not parse query": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id should 404 on missing user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should allow several capture groups": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when an error occurs should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res on failure should remove Content-Disposition": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback when client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disabled() should default to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should throw when the callback is missing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET / should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.delete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKCALENDAR": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should be chainable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when present should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should throw on old middlewares": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should respond with no cookies": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name) should check req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should work within arrays": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() should return undefined when unset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return false when http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should set the child's .parent": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object, status) should use status as second number for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"view engine\" is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url with multiple routed handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should not touch already-encoded sequences in \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.m-search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages GET / should respond with page list": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service when requesting an invalid route should respond with 404 json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.patch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should contain lower path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle errors via arity 4 functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not perform freshness check unless 2xx or 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.del() should alias app.delete()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .locals should be empty by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource DELETE /users/9 should fail": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.post": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should error without \"view engine\" set and file extension to a non-engine module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .locals(obj) should merge locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1..3.json should respond with users 2 and 3 as json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .status(code) should set the response .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json spaces\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support regexp path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 304 when ETag matches": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource DELETE /users/1 should delete user 1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(object) should set multiple fields": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNLINK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should encode \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should accept to text/plain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when disabled should send no ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object, status) should use status as second number for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should disallow requesting out of \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object, status) should respond with json and set the .statusCode for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(utf8filename) should add the filename and filename* params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support empty string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v1/users should respond with users from APIv1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PROPFIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should keep charset in Content-Type for Buffers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should ignore invalid incoming req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(err) is called should call handler in same route, if exists": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PURGE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should throw for non-string header name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should overwrite existing req.params by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should encode the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router .:name should denote a format": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should transfer a file with urlencoded name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.head() should override": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include LOCK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res on failure should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when an extension is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(\"router\") is called should jump out of router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should support altering req.params across routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should set multiple response header fields": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is extended should parse parameters with dots": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should include ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"etag\" should throw on bad value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should allow renaming callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should use params from router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.isAbsolute() should support windows": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.flatten(arr) should flatten an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .get(field) should get the response header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with an array should set the values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncodingss should be true if encoding accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(\"route\") is called should jump to next route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the application prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(filename) should add the filename param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, value) should coerce to a string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string) should set a cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.propfind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendStatus(statusCode) should work with unknown code": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback when client already aborted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when given a regexp should populate req.params with the captures": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to REPORT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should decode correct params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should invoke middleware for all requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should catch thrown secondary error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should override previous Content-Types with callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unsubscribe": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"etag\" should set \"etag fn\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/9 should respond with error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to TRACE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject number as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing in handler after async param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when present should display the users pets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first acceptable type with canonical mime types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should inherit from event emitter": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKCOL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1..3 should respond with users 1 through 3": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET / should respond with index": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .VERB() should only call an error handling routing callback when an error is propagated": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.isAbsolute() should support unices": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should work with IPv6 Host and port": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should work with res.set(field, val) first": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback without error when 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNBIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should override charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() when the value is present should not add it again": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should catch thrown error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNLOCK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include GET": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.move": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name? should populate the capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given an object should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should not stack overflow with many registered routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when \"weak\" should send weak ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should defer all the param routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when a function should send custom ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when the file does not exist should provide a helpful error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should not respond if the path is not defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept multiple arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when a function should not send falsy ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return false when no match is made": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/view should 404 on missing user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow literal \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PURGE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /login should render login form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call param function when routing middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject null as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncodingss should be false if encoding not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject string as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should return undefined otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should default to a 302 redirect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing inside error handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /users/0-2 should respond with three users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to DELETE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should not error if the client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) caching should always lookup view without cache": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should transfer a file with special characters in string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should be .use()able": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json for Number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should set the header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enable() should set the value to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should send as html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include LINK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should accept any type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should not serve dotfiles": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost foo.example.com GET / should redirect to /foo": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should be empty for top-level route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to LOCK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment() should Content-Disposition to attachment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disabled() should return false when set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users should respond with users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS when error occurs in response handler should pass error to callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .clearCookie(name) should set a cookie passed expiry": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) given .default should work when only .default is provided": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should not escape utf whitespace for json fallback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should default to Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PATCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with a string should set the value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "HEAD should output the same headers as GET requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should call when values differ when using \"next\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should not error on empty routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendStatus(statusCode) should send the status code and message as body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should include the redirect type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should capture everything": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enabled() should return true when set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should be callable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throwing inside error handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, fn) should pass the resulting string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should work if path has trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should next(404) when not found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should require middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should get reset by res.set(field, val)": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with no arguments should not set Vary": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should contain full lower path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.mountpath should return the mounted path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include OPTIONS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disable() should set the value to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.isAbsolute() should support windows unc": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return false when the resource is not modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .clearCookie(name, options) should set the given params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .path should return the parsed pathname": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) signed should generate a signed JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncoding should be false if encoding not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should succeed with proper credentials": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include COPY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should have a form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should serve relative to \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET / should have a link to amazing.txt": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.lock": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when \"strong\" should send strong ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set otherwise should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNLOCK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /pet/0/edit should get pet edit page": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send() should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/edit should get a user to edit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should re-route when method is altered": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should special-case Referer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should work when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity should be disabled by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .links(obj) should set Link header field for multiple calls": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return true when the resource is modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "markdown GET /fail should respond with an error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unlock": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to GET request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(code, number) should send number as json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should only call once per request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should serve relative to \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should limit to just .VERB": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support utf8 strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .links(obj) should set Link header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /user/9 should fail to find user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should respond with text": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should given precedence to the child": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.options": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should not override Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users should respond with all users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should ignore FQDN in search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to REBIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v2/ should respond with APIv2 root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"headers\" option should accept headers option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is a function should parse using function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json for String": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PROPFIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose Router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should error without \"view engine\" set and no file extension": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "middleware .next() should behave like connect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should strip port number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for String": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.copy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return true when X-Requested-With is xmlhttprequest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should display no views": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(filename) should set the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.report": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguage should be true if language accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 404 when not found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, options) should pass options to send module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should set ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should forward requests down the middleware chain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is not a function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.all() should run the callback for a method just once": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguage when Accept-Language is not present should always return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should utilize the same options as express.static()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(fn) should map app.param(name, ...) logic": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set location from \"Referrer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() should otherwise return the value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos with a valid api key should respond repos json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support index.<engine>": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET /forget should clear cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query should default to parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should respond with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should set a value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing inside routes with params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should return the app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size, options) with \"combine: true\" option should return combined ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /user/:id should 500 on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should not be greedy immediately after param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should work with IPv6 Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.render() locals over app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to COPY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should accept to text/plain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should be chainable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkactivity": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .locals.settings should expose app settings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json spaces\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should use first callback parameter with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages should be false if language not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should set ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should allow ../ when \"root\" is set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should set the Content-Type with type/subtype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should keep correct parameter indexes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should prefer \"Referrer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should only call once per request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /users should list users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v1/ should respond with APIv1 root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v2/users should respond with users from APIv2": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject string as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET /files/missing.txt should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should support .use of other routers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) caching should cache with \"view cache\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should run in order added": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should include security header and prologue": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query should default to {}": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router parallel requests should not mix requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(utf8filename) should set the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(code) should set .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json escape\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to LINK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser fn\" is missing should act like \"extended\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not support jsonp callbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc POST /user/:id/pet should create a pet for user": {"run": "PASS", "test": "PASS", "fix": "PASS"}}, "f2p_tests": {"app .render(name, options, fn) caching when \"cacheKey\" option is given should render the template twice with different keys": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "s2p_tests": {}, "n2p_tests": {}, "run_result": {"passed_count": 850, "failed_count": 0, "skipped_count": 0, "passed_tests": ["app should emit \"mount\" when mounted", "res .jsonp(object) when given primitives should respond with json", "res .sendfile(path) should accept dotfiles option", "req .accepts(types) should return the first acceptable type", "res .sendFile(path) should error missing path", "app.router methods should reject numbers for app.rebind", "res .json(object) should not support jsonp callbacks", "res .sendfile(path, fn) should invoke the callback when complete", "app.router * should denote a greedy capture group", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "app.router methods should include BIND", "req .query when \"query parser\" disabled should not parse complex keys", "Router .multiple callbacks should throw if a callback is undefined", "req.is() when given a mime type should return the type when matching", "Router .all should be called for any URL when \"*\"", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "req .accepts(type) should return false otherwise", "vhost example.com GET / should say hello", "multi-router GET / should respond with root handler", "req .host should return the Host when present", "auth GET /restricted should redirect to /login without cookie", "app .param(names, fn) should map the array", "app.router methods should reject numbers for app.search", "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to ACL request", "res .jsonp(object) should not override previous Content-Types with no callback", "auth POST /login should fail without proper username", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "utils.setCharset(type, charset) should keep charset if not given charset", "res .sendFile(path, fn) should invoke the callback when complete", "res .cookie(name, string, options) signed without secret should throw an error", "res \"etag\" setting when disabled should send ETag when manually set", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.bind", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app.router :name should match a single segment only", "app.router methods should include NOTIFY", "app .render(name, options, fn) should render the template", "req .acceptsEncoding should be true if encoding accepted", "res .format(obj) with parameters should allow wildcard type/subtypes", "app.router * should require a preceding /", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "utils.wetag(body, encoding) should support buffer", "res .format(obj) in router should default the Content-Type", "content-negotiation GET / should accept to application/json", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "res .send(Buffer) should not override ETag", "req .range(size) should cap to the given size", "req .fresh should return false without response headers", "res when accepting text should include the redirect type", "app.router methods should include PUT", "exports should permit modifying the .application prototype", "app.router methods should reject numbers for app.acl", "res .send(Buffer) should not override Content-Type", "app .param(name, fn) should work with encoded values", "app .render(name, fn) should expose app.locals", "Router .multiple callbacks should not throw if all callbacks are functions", "app.router methods should reject numbers for app.proppatch", "res .format(obj) in router when Accept is not present should invoke the first callback", "app.router methods should reject numbers for app.subscribe", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "route-map GET /users/:id/pets/:pid should get a users pet", "app.router methods should include DEL", "res .render(name) should support absolute paths", "Router should handle blank URL", "app.router methods should include UNBIND", "req .accepts(type) should return true when Accept is not present", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "res \"etag\" setting when enabled should send ETag for empty string response", "Router FQDN should adjust FQDN req.url with multiple handlers", "app.options() should override the default behavior", "Router .use should reject number as middleware", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.merge", "in development should disable \"view cache\"", "utils.etag(body, encoding) should support empty string", "Router .use should reject Date as middleware", "res .sendFile(path) should not override manual content-types", "Route errors should handle throw in .all", "app .use(path, middleware) should support array of paths", "res .render(name) when an error occurs should next(err)", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "req .accepts(types) should return the first when Accept is not present", "config .enabled() should default to false", "app.router methods should reject numbers for app.checkout", "cookie-sessions GET / should set a session cookie", "app.router methods should reject numbers for app.get", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "res .render(name, options, fn) should pass the resulting string", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "res \"etag\" setting when enabled should not override ETag when manually set", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "app.router decode params should not accept params in malformed paths", "app.router when given a regexp should match the pathname only", "error-pages Accept: application/json GET /404 should respond with 404", "app.router trailing slashes should be optional by default", "app.router methods should reject numbers for app.head", "res .sendfile(path, fn) should invoke the callback without error when HEAD", "app .render(name, options, fn) should give precedence to app.render() locals", "res should always check regardless of length", "req .hostname should work with IPv6 Host", "app.router decode params should work with unicode", "content-negotiation GET / should default to text/html", "app.router methods should include SUBSCRIBE", "res .sendFile(path) with \"root\" option should not transfer relative with without", "res .jsonp(status, object) should respond with json and set the .statusCode", "req.is() when given */subtype should return false when not matching", "ejs GET / should respond with html", "res .render(name, fn) when an error occurs should pass it to the callback", "utils.setCharset(type, charset) should return type if not given charset", "app.router methods should include MOVE", "app.router methods should reject numbers for app.unlink", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "app .VERB() should not get invoked without error handler on error", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router * should be optional", "req .fresh should return true when the resource is not modified", "res .jsonp(object) should disallow arbitrary js", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "res .render(name, option) should render the template", "res .json(object) should not override previous Content-Types", "app.router params should merge numeric indices req.params when parent has same number", "app.router methods should reject numbers for app.put", "req.is() when given an extension should lookup the mime type", "res .sendfile(path, fn) should invoke the callback on socket error", "utils.setCharset(type, charset) should set charset", "res .sendfile(path, fn) should invoke the callback without error when 304", "app .use(middleware) should accept nested arrays of middleware", "app .use(app) should mount the app", "app.router methods should reject numbers for app.mkcol", "app.router :name should work following a partial capture group", "res .sendfile(path) should accept headers option", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app.router params should restore req.params", "app.router should throw with notice", "app.router :name? should denote an optional capture group", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains with no host should return an empty array", "Router .all should support using .all to capture all http verbs", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "content-negotiation GET /users should accept to application/json", "HEAD should default to GET", "res .format(obj) with extnames should set the correct charset for the Content-Type", "res .format(obj) with parameters should Vary: Accept", "exports should permit modifying the .response prototype", "app.router decode params should not decode spaces", "res .cookie(name, string) should allow multiple calls", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "res .jsonp(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "req .param(name, default) should use the default value unless defined", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "mvc GET /users should display a list of users", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "cookie-sessions GET / should display 1 view on revisit", "app.router methods should reject numbers for app.trace", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "req .get(field) should return the header field value", "app.router methods should reject numbers for app.notify", "mvc GET /pet/0 should get pet", "mvc GET /user/:id when present should display the user", "req .hostname should work with IPv6 Host and port", "Route errors should handle throw", "Router FQDN should not obscure FQDNs", "app .use(path, middleware) should support array of paths with middleware array", "res .jsonp(object) when given an object should respond with json", "res \"etag\" setting when enabled should send ETag in response to BIND request", "req.is() when given type/* should return the full type when matching", "req .subdomains with trusted X-Forwarded-Host should return an array", "app .request should extend the request prototype", "throw after .end() should fail gracefully", "config .get() when mounted should default to the parent app", "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set", "app.router methods should include POST", "app.router * should allow naming", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "req should accept an argument list of type names", "app.parent should return the parent when mounted", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should include UNSUBSCRIBE", ".sendfile(path, options) should pass options to send module", "Router FQDN should adjust FQDN req.url", "res .sendfile(path) should transfer a directory index file", "error GET /next should respond with 500", "req .protocol should return the protocol string", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "res \"etag\" setting when enabled should send ETag in response to POST request", "Router error should skip non error middleware", "res when accepting html should escape the url", "res .sendfile(path) should transfer a file", "req .xhr should return false otherwise", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "utils.setCharset(type, charset) should do anything without type", "app.router methods should include DELETE", "res .sendFile(path, fn) should invoke the callback when client already aborted", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "app .use(app) should support mount-points", "res .cookie(name, string, options) maxAge should set max-age", "res .set(field, values) should throw when Content-Type is an array", "app .param(name, fn) should not invoke without route handler", "app .use(path, middleware) should invoke middleware for all requests starting with path", "res when the request method is HEAD should ignore the body", "res .append(field, val) should accept array of values", "res .send(code, body) should set .statusCode and body", "app .use(path, middleware) should strip path from req.url", "res .format(obj) in router should set the correct charset for the Content-Type", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "downloads GET /files/amazing.txt should have a download header", "res .type(str) should set the Content-Type based on a filename", "app.router :name should work in array of paths", "res .download(path, filename, options, fn) should invoke the callback", "app.router when next() is called should continue lookup", "res .redirect(url) should encode \"url\"", "res .sendfile(path, fn) should not override manual content-types", "app.router methods should include MERGE", "res .sendfile(path) with an absolute path should transfer the file", "req .ip when X-Forwarded-For is not present should return the remote address", "res .send(Buffer) should send as octet-stream", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "res .redirect(url, status) should set the response status", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "mvc GET /user/:id when not present should 404", "resource GET / should respond with instructions", "res .jsonp(object) should escape utf whitespace", "app .use(path, middleware) should support empty string path", "res should respond with 304 Not Modified when fresh", "in production should enable \"view cache\"", "route-separation GET /user/:id/view should get a user", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "app .param(name, fn) should defer to next route", "res .sendfile(path) should not error if the client aborts", "res .append(field, val) should append multiple headers", "utils.etag(body, encoding) should support buffer", "Route .VERB should allow fallthrough", "Route errors should handle single error handler", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app .render(name, fn) should support absolute paths", "OPTIONS should not be affected by app.all", "app.router * should decore the capture", "app.router should allow rewriting of the url", "app.router methods should include SOURCE", "utils.wetag(body, encoding) should support utf8 strings", "req .range(size) should cap to the given size when open-ended", "app .use(path, middleware) should reject Date as middleware", "app.router when next(err) is called should break out of app.router", "app.router * should eat everything after /", "app.router methods should include ACL", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "mvc PUT /user/:id should update the user", "req.is() when given */subtype should return the full type when matching", "app .param(name, fn) should call when values differ", "config .set() should return the app when undefined", "req .acceptsLanguages should be true if language accepted", "route-map GET /users/:id/pets should get a users pets", "res .location(url) should not touch already-encoded sequences in \"url\"", "app.router * should span multiple segments", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "app.path() should return the canonical", "Router .param should call param function when routing VERBS", "req .query when \"query parser\" is extended should parse complex keys", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "req .range(size) should return parsed ranges", "params GET /users/foo-bar should fail integer parsing", "OPTIONS should only include each method once", "Router .handle should dispatch", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "Route .all should stack", "req .acceptsLanguages when Accept-Language is not present should always return true", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "mvc PUT /pet/2 should update the pet", "app.router * should work with several", "res .format(obj) in router should utilize qvalues in negotiation", "app .engine(ext, fn) should map a template engine", "error-pages Accept: text/html GET /404 should respond with 404", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "req .param(name) should check req.body", "req .hostname should strip port number", "req.is() when content-type is not present should return false", "res .render(name, option) should give precedence to res.locals over app.locals", "res .format(obj) with parameters should default the Content-Type", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively", "error GET /missing should respond with 404", "route-separation GET /posts should get a list of posts", "res .sendfile(path) with a relative path with non-GET should still serve", "config .get() when mounted should prefer child \"trust proxy\" setting", "res .json(object) when given an array should respond with json", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "error-pages Accept: application/json GET /403 should respond with 403", "res .set(field, value) should set the response header field", "exports should expose the request prototype", "app .use(app) should support mounted app anywhere", "res .cookie(name, string, options) maxAge should not mutate the options object", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "res .set(field, values) should not set a charset of one is already set", "app .param(name, fn) should map logic for a single param", "auth GET /login should display login error", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "Router .param should call when values differ", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "res when accepting neither text or html should respond with an empty body", "req .range(size) should have a .type", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "app.all() should add a router per method", "markdown GET / should respond with html", "app.route should return a new route", "mvc GET /user/:id/edit should display the edit form", "app .use(path, middleware) should accept nested arrays of middleware", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "req .host when \"trust proxy\" is enabled should default to Host", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "res .format(obj) with canonicalized mime types should Vary: Accept", "app.route should all .VERB after .all", "res .jsonp(object) should allow []", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "app.router :name should denote a capture group", "vhost bar.example.com GET / should redirect to /bar", "app .use(path, middleware) should accept multiple arrays of middleware", "res .type(str) should default to application/octet-stream", "req .range(size) should return undefined if no range", "res .sendfile(path, fn) should invoke the callback on 403", "req .subdomains otherwise should return an empty array", "res .render(name, option) should expose res.locals", "req .xhr should case-insensitive", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "res .cookie(name, object) should generate a JSON cookie", "app.router methods should include PROPPATCH", "Router should handle missing URL", "app .engine(ext, fn) should work without leading \".\"", "req .subdomains when present should work with IPv4 address", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "app.router methods should include SEARCH", "app .engine(ext, fn) should work \"view engine\" setting", "res .send(body, code) should be supported for backwards compat", "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat", "resource GET /users/1 should respond with user 1", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "res .set(field, values) should coerce to an array of strings", "app .render(name, fn) should support absolute paths with \"view engine\"", "app .render(name, fn) should handle render error throws", "app.router methods should reject numbers for app.mkcalendar", "Route .all should add handler", "app.router methods should include CHECKOUT", "app.listen() should wrap with an HTTP server", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .send(String) should override charset in Content-Type", "Router .use should be called for any URL", "res \"etag\" setting when enabled should send ETag in response to PUT request", "res should not override previous Content-Types", "app.router methods should reject numbers for app.unbind", "app.router should allow escaped regexp", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "cookies POST / should set a cookie", "app.router methods should reject numbers for app.link", "req .baseUrl should travel through routers correctly", "res .sendfile(path, fn) should invoke the callback on 404", "req .subdomains when present should work with IPv6 address", "cookies POST / should no set cookie w/o reminder", "res .set(object) should coerce to a string", "req .stale should return true without response headers", "req .ips when X-Forwarded-For is not present should return []", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "req .acceptsLanguage should be false if language not accepted", "res .download(path, filename) should provide an alternate filename", "req .signedCookies should return a signed JSON cookie", "res .send(null) should set body to \"\"", "res .cookie(name, string, options) maxAge should set relative expires", "app should 404 without routes", "app.router * should work cross-segment", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "app.router .:name? should denote an optional format", "app.router methods should reject numbers for app.source", "res .render(name) should support absolute paths with \"view engine\"", "app.router params should allow merging existing req.params", "req .route should be the executed Route", "auth GET / should redirect to /login", "req .get(field) should throw missing header name", "auth GET /logout should redirect to /", "app .response should not be influenced by other app protos", "res .format(obj) given .default should be invoked instead of auto-responding", "res .jsonp(object) should ignore object callback parameter with jsonp", "res \"etag\" setting when enabled should not send ETag for res.send()", "config .get() when mounted should inherit \"trust proxy\" setting", "req .secure when X-Forwarded-Proto is missing should return false when http", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app .render(name, fn) when \"view engine\" is given should render the template", "res .format(obj) in router should allow wildcard type/subtypes", "app.router methods should include REPORT", "res .sendFile(path) should 404 for directory", "app .param(fn) should fail if not given fn", "Route should work without handlers", "app.router :name should work inside literal parenthesis", "req .host should return undefined otherwise", "res .download(path, fn) should invoke the callback", "params GET / should respond with instructions", "req .param(name) should check req.query", "res .jsonp(object) when given primitives should respond with json for null", "app .use(middleware) should accept multiple arguments", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "Router .use should reject null as middleware", "vhost example.com GET /foo should say foo", "auth POST /login should fail without proper password", "app.route should support dynamic routes", "app.router methods should include M-SEARCH", "route-separation GET /user/:id should get a user", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "res .jsonp(object) when given an array should respond with json", "Router FQDN should ignore FQDN in path", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "app .param(name, fn) should not call when values differ on error", "auth GET /restricted should succeed with proper cookie", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "route-map GET /users/:id should get a user", "req .acceptsCharset(type) when Accept-Charset is not present should return true when present", "app.router should restore req.params after leaving router", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .sendfile(path) with a relative path should transfer the file", "res .append(field, val) should work with cookies", "req .query when \"query parser\" an unknown value should throw", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "route-separation PUT /user/:id/edit should edit a user", "res .json(object) when given primitives should respond with json for Number", "Router should return a function with router methods", "without NODE_ENV should default to development", "exports should permit modifying the .request prototype", "app.router methods should include REBIND", "res .redirect(status, url) should set the response status", "res .render(name, option) should give precedence to res.render() locals over res.locals", "app.router methods should reject numbers for app.purge", "res .sendfile(path) should ignore headers option on 404", "res .send(undefined) should set body to \"\"", "res.vary() with an empty array should not set Vary", "app.router methods should include MKACTIVITY", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "Route .all should handle VERBS", "app .render(name, fn) should support index.<engine>", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "app .response should extend the response prototype", "app.router params should merge numeric indices req.params when more in parent", "route-map DELETE /users should delete users", "res .json(status, object) should respond with json and set the .statusCode", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "app.router methods should reject numbers for app.del", "req .fresh should return false when the resource is modified", "req .acceptsCharset(type) when Accept-Charset is not present should return true", "req.is() when given a mime type should return false when not matching", "res when accepting html should respond with html", "res .format(obj) with extnames should default the Content-Type", "app .use(path, middleware) should require middleware", "res \"etag\" setting when enabled should send ETag for long response", "req .accepts(types) should take quality into account", "params GET /user/0 should respond with a user", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include TRACE", "mvc GET / should redirect to /users", "req .xhr should return false when not present", "res .cookie(name, string, options) should set params", "web-service GET /api/users with a valid api key should respond users json", "res .send(Object) should send as application/json", "res .sendfile(path) should 404 for directory without trailing slash", "Route .VERB should support .get", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .render(name) should expose app.locals with `name` property", "cookies GET / should respond to cookie", "res .sendFile(path) should transfer a file", "content-negotiation GET /users should default to text/html", "res .download(path) should transfer as an attachment", "app .use(path, middleware) should accept multiple arguments", "req .hostname should return the Host when present", "req .query when \"query parser\" disabled should not parse query", "route-separation GET /user/:id should 404 on missing user", "req.is() when given */subtype should ignore charset", "app.router :name should allow several capture groups", "app .render(name, fn) when an error occurs should invoke the callback", "res on failure should remove Content-Disposition", "res .sendfile(path, fn) should invoke the callback when client aborts", "config .disabled() should default to true", "app .engine(ext, fn) should throw when the callback is missing", "app .use(path, middleware) should accept array of middleware", "res .render(name, option) should expose app.locals", "error GET / should respond with 500", "Router should support dynamic routes", "app.router methods should reject numbers for app.delete", "app.router methods should include MKCALENDAR", "app.router should be chainable", "utils.etag(body, encoding) should support strings", "req .subdomains when subdomain offset is set when present should return an array", "exports should throw on old middlewares", "cookies GET / should respond with no cookies", "req .param(name) should check req.params", "app.router * should work within arrays", "config .get() should return undefined when unset", "req .secure when X-Forwarded-Proto is present should return false when http", "app .use(app) should set the child's .parent", "res .format(obj) with canonicalized mime types should default the Content-Type", "res .json(object, status) should use status as second number for backwards compat", "res .render(name) when \"view engine\" is given should render the template", "res .format(obj) with extnames should Vary: Accept", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "app.router methods should reject numbers for app.m-search", "error-pages GET / should respond with page list", "error-pages Accept: text/plain GET /404 should respond with 404", "web-service when requesting an invalid route should respond with 404 json", "app.router methods should reject numbers for app.patch", "req .baseUrl should contain lower path", "error-pages Accept: text/plain GET /500 should respond with 500", "Route errors should handle errors via arity 4 functions", "res should not perform freshness check unless 2xx or 304", "app.del() should alias app.delete()", "res .locals should be empty by default", "resource DELETE /users/9 should fail", "app.router methods should reject numbers for app.post", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "app .locals(obj) should merge locals", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "res .status(code) should set the response .statusCode", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app .use(path, middleware) should support regexp path", "res .sendFile(path) should 304 when ETag matches", "res .sendFile(path, fn) should invoke the callback when client aborts", "resource DELETE /users/1 should delete user 1", "res .set(object) should set multiple fields", "app.router methods should include UNLINK", "res .location(url) should encode \"url\"", "content-negotiation GET /users should accept to text/plain", "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise", "res \"etag\" setting when disabled should send no ETag", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "res .jsonp(object, status) should use status as second number for backwards compat", "res .sendfile(path) with a relative path should disallow requesting out of \"root\"", "res .json(object, status) should respond with json and set the .statusCode for backwards compat", "res .attachment(utf8filename) should add the filename and filename* params", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "utils.wetag(body, encoding) should support empty string", "multi-router GET /api/v1/users should respond with users from APIv1", "res .format(obj) with parameters should utilize qvalues in negotiation", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "res .send(String) should keep charset in Content-Type for Buffers", "app.router params should ignore invalid incoming req.params", "res .render(name) when \"views\" is given should lookup the file in the path", "app.router when next(err) is called should call handler in same route, if exists", "exports should expose the response prototype", "res .format(obj) with extnames should utilize qvalues in negotiation", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "app.router methods should include PURGE", "req .get(field) should throw for non-string header name", "app.router params should overwrite existing req.params by default", "res when accepting text should encode the url", "app.router .:name should denote a format", "res .sendfile(path) should transfer a file with urlencoded name", "res .format(obj) with extnames should allow wildcard type/subtypes", "app.head() should override", "app.router methods should include LOCK", "res on failure should invoke the callback", "app .render(name, fn) when an extension is given should render the template", "app.router when next(\"router\") is called should jump out of router", "app .param(name, fn) should support altering req.params across routes", "res .set(field, values) should set multiple response header fields", "req .query when \"query parser\" is extended should parse parameters with dots", "res .sendFile(path) should include ETag", "config .set() \"etag\" should throw on bad value", "res .download(path, filename, fn) should invoke the callback", "utils.wetag(body, encoding) should support strings", "res .jsonp(object) should allow renaming callback", "app.router params should use params from router", "utils.isAbsolute() should support windows", "utils.flatten(arr) should flatten an array", "res .get(field) should get the response header field", "res.vary() with an array should set the values", "req .acceptsEncodingss should be true if encoding accepted", "app.router when next(\"route\") is called should jump to next route", "exports should expose the application prototype", "res .attachment(filename) should add the filename param", "res .set(field, value) should coerce to a string", "res .cookie(name, string) should set a cookie", "app.router methods should reject numbers for app.propfind", "res .sendStatus(statusCode) should work with unknown code", "res .sendfile(path, fn) should invoke the callback when client already aborted", "app.router when given a regexp should populate req.params with the captures", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "app.router decode params should decode correct params", "app .use(middleware) should invoke middleware for all requests", "app .param(name, fn) should catch thrown secondary error", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "res .jsonp(object) should override previous Content-Types with callback", "app.router methods should reject numbers for app.unsubscribe", "config .set() \"etag\" should set \"etag fn\"", "resource GET /users/9 should respond with error", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "app .use(path, middleware) should reject number as middleware", "Router error should handle throwing in handler after async param", "mvc GET /user/:id when present should display the users pets", "req .accepts(types) should return the first acceptable type with canonical mime types", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "app should inherit from event emitter", "app.router methods should include MKCOL", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "resource GET /users/1..3 should respond with users 1 through 3", "route-separation GET / should respond with index", "app .VERB() should only call an error handling routing callback when an error is propagated", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "utils.isAbsolute() should support unices", "req .host should work with IPv6 Host and port", "res .append(field, val) should work with res.set(field, val) first", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .sendFile(path, fn) should invoke the callback without error when 304", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "utils.setCharset(type, charset) should override charset", "res.vary() when the value is present should not add it again", "app .param(name, fn) should catch thrown error", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "error-pages Accept: application/json GET /500 should respond with 500", "app.router methods should include GET", "app.router methods should reject numbers for app.move", "app.router :name? should populate the capture group", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "res .json(object) when given an object should respond with json", "Router should not stack overflow with many registered routes", "res \"etag\" setting when \"weak\" should send weak ETag", "app .param(name, fn) should defer all the param routes", "res \"etag\" setting when a function should send custom ETag", "app .render(name, fn) when the file does not exist should provide a helpful error", "OPTIONS should not respond if the path is not defined", "app .use(middleware) should accept multiple arrays of middleware", "res \"etag\" setting when a function should not send falsy ETag", "req .accepts(types) should return false when no match is made", "route-separation GET /user/:id/view should 404 on missing user", "app .use(middleware) should accept array of middleware", "app.router should allow literal \".\"", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "auth GET /login should render login form", "Router .param should call param function when routing middleware", "app .use(path, middleware) should reject null as middleware", "req .acceptsEncodingss should be false if encoding not accepted", "req .accepts(type) should return true when present", "app .use(path, middleware) should reject string as middleware", "req .hostname should return undefined otherwise", "res .redirect(url) should default to a 302 redirect", "Router error should handle throwing inside error handlers", "res .render(name) should expose app.locals", "params GET /users/0-2 should respond with three users", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "res .sendFile(path) should not error if the client aborts", "app .render(name, fn) caching should always lookup view without cache", "res .sendFile(path) should transfer a file with special characters in string", "app.router should be .use()able", "res .jsonp(object) when given primitives should respond with json for Number", "res .location(url) should set the header", "config .enable() should set the value to true", "res .send(String) should send as html", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should include LINK", "req .range(size) should accept any type", "req.is() when given type/* should return false when not matching", "res .sendfile(path) should not serve dotfiles", "vhost foo.example.com GET / should redirect to /foo", "req .baseUrl should be empty for top-level route", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "res .attachment() should Content-Disposition to attachment", "config .disabled() should return false when set", "route-map GET /users should respond with users", "req.is() when given type/* should ignore charset", "OPTIONS when error occurs in response handler should pass error to callback", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .clearCookie(name) should set a cookie passed expiry", "Router .multiple callbacks should throw if a callback is null", "res .format(obj) given .default should work when only .default is provided", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored", "res .jsonp(object) should not escape utf whitespace for json fallback", "req .hostname when \"trust proxy\" is enabled should default to Host", "app.router methods should include PATCH", "res.vary() with a string should set the value", "HEAD should output the same headers as GET requests", "app .param(name, fn) should call when values differ when using \"next\"", "app.route should not error on empty routes", "res .sendStatus(statusCode) should send the status code and message as body", "res when accepting html should include the redirect type", "app.router * should capture everything", "config .enabled() should return true when set", "app should be callable", "Route errors should handle throwing inside error handlers", "res .render(name, fn) should pass the resulting string", "app .use(path, middleware) should work if path has trailing slash", "res .sendfile(path) with a relative path should next(404) when not found", "Router .use should require middleware", "res .append(field, val) should get reset by res.set(field, val)", "res.vary() with no arguments should not set Vary", "req .baseUrl should contain full lower path", "app.mountpath should return the mounted path", "app.router methods should include OPTIONS", "app.router params should merge numeric indices req.params", "config .disable() should set the value to false", "res \"etag\" setting when enabled should send ETag", "utils.isAbsolute() should support windows unc", "req .stale should return false when the resource is not modified", "res .clearCookie(name, options) should set the given params", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "res .format(obj) in router should Vary: Accept", "req .path should return the parsed pathname", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "error-pages Accept: text/html GET /500 should respond with 500", "req .acceptsEncoding should be false if encoding not accepted", "req .subdomains when present should return an array", "auth POST /login should succeed with proper credentials", "app.router methods should include COPY", "cookies GET / should have a form", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "res .sendFile(path, fn) should invoke the callback on 404", "downloads GET / should have a link to amazing.txt", "app.router methods should reject numbers for app.lock", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res \"etag\" setting when \"strong\" should send strong ETag", "req .subdomains when subdomain offset is set otherwise should return an empty array", "Router .use should accept array of middleware", "app.router methods should include UNLOCK", "mvc GET /pet/0/edit should get pet edit page", "res .send() should set body to \"\"", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "route-separation GET /user/:id/edit should get a user to edit", "app.router methods should re-route when method is altered", "req .get(field) should special-case Referer", "res should work when mounted", "app.router case sensitivity should be disabled by default", "res .links(obj) should set Link header field for multiple calls", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "req .stale should return true when the resource is modified", "markdown GET /fail should respond with an error", "app.router methods should reject numbers for app.unlock", "res \"etag\" setting when enabled should send ETag in response to GET request", "res .send(code, number) should send number as json", "Router .param should only call once per request", "error-pages Accept: text/html GET /403 should respond with 403", "res .sendfile(path) with a relative path should serve relative to \"root\"", "Route .VERB should limit to just .VERB", "utils.etag(body, encoding) should support utf8 strings", "res .links(obj) should set Link header field", "params GET /user/9 should fail to find user", "res when accepting text should respond with text", "config .get() when mounted should given precedence to the child", "app.router methods should reject numbers for app.options", "res .send(String) should not override Content-Type", "resource GET /users should respond with all users", "Router FQDN should ignore FQDN in search", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "multi-router GET /api/v2/ should respond with APIv2 root handler", "res .format(obj) with parameters should set the correct charset for the Content-Type", "res .sendFile(path) with \"headers\" option should accept headers option", "req .query when \"query parser\" is a function should parse using function", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .json(object) when given primitives should respond with json for null", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "res .jsonp(object) when given primitives should respond with json for String", "app.router methods should include PROPFIND", "exports should expose Router", "res .render(name) should error without \"view engine\" set and no file extension", "middleware .next() should behave like connect", "req .host should strip port number", "res .json(object) when given primitives should respond with json for String", "app.router methods should reject numbers for app.copy", "app .use(app) should support dynamic routes", "req .xhr should return true when X-Requested-With is xmlhttprequest", "cookie-sessions GET / should display no views", "res .attachment(filename) should set the Content-Type", "app.router methods should reject numbers for app.report", "req .acceptsLanguage should be true if language accepted", "res .sendFile(path) should 404 when not found", "res .sendFile(path, options) should pass options to send module", "res .send(Buffer) should set ETag", "OPTIONS should forward requests down the middleware chain", "Router .multiple callbacks should throw if a callback is not a function", "app.all() should run the callback for a method just once", "req .acceptsLanguage when Accept-Language is not present should always return true", "res .sendfile(path, fn) should utilize the same options as express.static()", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "app .param(fn) should map app.param(name, ...) logic", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "config .get() should otherwise return the value", "web-service GET /api/repos with a valid api key should respond repos json", "res .render(name) should support index.<engine>", "req.is() when given a mime type should ignore charset", "cookies GET /forget should clear cookie", "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise", "req .query should default to parse complex keys", "res .jsonp(object) should respond with jsonp", "web-service GET /api/users without an api key should respond with 400 bad request", "error-pages Accept: text/plain GET /403 should respond with 403", "config .set() should set a value", "Router error should handle throwing inside routes with params", "config .set() should return the app", "req .range(size, options) with \"combine: true\" option should return combined ranges", "mvc PUT /user/:id should 500 on error", "app.router * should not be greedy immediately after param", "req .host should work with IPv6 Host", "res .render(name, option) should give precedence to res.render() locals over app.locals", "res \"etag\" setting when enabled should send ETag in response to COPY request", "content-negotiation GET / should accept to text/plain", "res should be chainable", "app.router methods should reject numbers for app.mkactivity", "app .locals.settings should expose app settings", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be undefined by default", "res .jsonp(object) should use first callback parameter with jsonp", "req .acceptsLanguages should be false if language not accepted", "res .send(String) should set ETag", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "res .sendfile(path) with a relative path should allow ../ when \"root\" is set", "res .type(str) should set the Content-Type with type/subtype", "app.router * should keep correct parameter indexes", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "app .param(name, fn) should only call once per request", "route-separation GET /users should list users", "multi-router GET /api/v1/ should respond with APIv1 root handler", "multi-router GET /api/v2/users should respond with users from APIv2", "Router .use should reject string as middleware", "downloads GET /files/missing.txt should respond with 404", "Router should support .use of other routers", "app.router methods should include HEAD", "app .render(name, fn) caching should cache with \"view cache\" setting", "app.router should run in order added", "res .jsonp(object) should include security header and prologue", "req .query should default to {}", "Router parallel requests should not mix requests", "res .attachment(utf8filename) should set the Content-Type", "res .send(code) should set .statusCode", "res .json(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to LINK request", "req .query when \"query parser fn\" is missing should act like \"extended\"", "res should not support jsonp callbacks", "mvc POST /user/:id/pet should create a pet for user"], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 851, "failed_count": 1, "skipped_count": 0, "passed_tests": ["app should emit \"mount\" when mounted", "res .jsonp(object) when given primitives should respond with json", "res .sendfile(path) should accept dotfiles option", "req .accepts(types) should return the first acceptable type", "res .sendFile(path) should error missing path", "app.router methods should reject numbers for app.rebind", "res .json(object) should not support jsonp callbacks", "res .sendfile(path, fn) should invoke the callback when complete", "app.router * should denote a greedy capture group", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "app.router methods should include BIND", "req .query when \"query parser\" disabled should not parse complex keys", "Router .multiple callbacks should throw if a callback is undefined", "req.is() when given a mime type should return the type when matching", "Router .all should be called for any URL when \"*\"", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "req .accepts(type) should return false otherwise", "vhost example.com GET / should say hello", "multi-router GET / should respond with root handler", "req .host should return the Host when present", "auth GET /restricted should redirect to /login without cookie", "app .param(names, fn) should map the array", "app.router methods should reject numbers for app.search", "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to ACL request", "res .jsonp(object) should not override previous Content-Types with no callback", "auth POST /login should fail without proper username", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "utils.setCharset(type, charset) should keep charset if not given charset", "res .sendFile(path, fn) should invoke the callback when complete", "res .cookie(name, string, options) signed without secret should throw an error", "res \"etag\" setting when disabled should send ETag when manually set", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.bind", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app.router :name should match a single segment only", "app.router methods should include NOTIFY", "app .render(name, options, fn) should render the template", "req .acceptsEncoding should be true if encoding accepted", "res .format(obj) with parameters should allow wildcard type/subtypes", "app.router * should require a preceding /", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "utils.wetag(body, encoding) should support buffer", "res .format(obj) in router should default the Content-Type", "content-negotiation GET / should accept to application/json", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "res .send(Buffer) should not override ETag", "req .range(size) should cap to the given size", "req .fresh should return false without response headers", "res when accepting text should include the redirect type", "app.router methods should include PUT", "exports should permit modifying the .application prototype", "app.router methods should reject numbers for app.acl", "res .send(Buffer) should not override Content-Type", "app .param(name, fn) should work with encoded values", "app .render(name, fn) should expose app.locals", "Router .multiple callbacks should not throw if all callbacks are functions", "app.router methods should reject numbers for app.proppatch", "res .format(obj) in router when Accept is not present should invoke the first callback", "app.router methods should reject numbers for app.subscribe", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "route-map GET /users/:id/pets/:pid should get a users pet", "app.router methods should include DEL", "res .render(name) should support absolute paths", "Router should handle blank URL", "app.router methods should include UNBIND", "req .accepts(type) should return true when Accept is not present", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "res \"etag\" setting when enabled should send ETag for empty string response", "Router FQDN should adjust FQDN req.url with multiple handlers", "app.options() should override the default behavior", "Router .use should reject number as middleware", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.merge", "in development should disable \"view cache\"", "utils.etag(body, encoding) should support empty string", "Router .use should reject Date as middleware", "res .sendFile(path) should not override manual content-types", "Route errors should handle throw in .all", "app .use(path, middleware) should support array of paths", "res .render(name) when an error occurs should next(err)", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "req .accepts(types) should return the first when Accept is not present", "config .enabled() should default to false", "app.router methods should reject numbers for app.checkout", "cookie-sessions GET / should set a session cookie", "app.router methods should reject numbers for app.get", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "res .render(name, options, fn) should pass the resulting string", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "res \"etag\" setting when enabled should not override ETag when manually set", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "app.router decode params should not accept params in malformed paths", "app.router when given a regexp should match the pathname only", "error-pages Accept: application/json GET /404 should respond with 404", "app.router trailing slashes should be optional by default", "app.router methods should reject numbers for app.head", "res .sendfile(path, fn) should invoke the callback without error when HEAD", "app .render(name, options, fn) should give precedence to app.render() locals", "res should always check regardless of length", "req .hostname should work with IPv6 Host", "app.router decode params should work with unicode", "content-negotiation GET / should default to text/html", "app.router methods should include SUBSCRIBE", "res .sendFile(path) with \"root\" option should not transfer relative with without", "res .jsonp(status, object) should respond with json and set the .statusCode", "req.is() when given */subtype should return false when not matching", "ejs GET / should respond with html", "res .render(name, fn) when an error occurs should pass it to the callback", "utils.setCharset(type, charset) should return type if not given charset", "app.router methods should include MOVE", "app.router methods should reject numbers for app.unlink", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "app .VERB() should not get invoked without error handler on error", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router * should be optional", "req .fresh should return true when the resource is not modified", "res .jsonp(object) should disallow arbitrary js", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "res .render(name, option) should render the template", "res .json(object) should not override previous Content-Types", "app.router params should merge numeric indices req.params when parent has same number", "app.router methods should reject numbers for app.put", "req.is() when given an extension should lookup the mime type", "res .sendfile(path, fn) should invoke the callback on socket error", "utils.setCharset(type, charset) should set charset", "res .sendfile(path, fn) should invoke the callback without error when 304", "app .use(middleware) should accept nested arrays of middleware", "app .use(app) should mount the app", "app.router methods should reject numbers for app.mkcol", "app.router :name should work following a partial capture group", "res .sendfile(path) should accept headers option", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app.router params should restore req.params", "app.router should throw with notice", "app.router :name? should denote an optional capture group", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains with no host should return an empty array", "Router .all should support using .all to capture all http verbs", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "content-negotiation GET /users should accept to application/json", "HEAD should default to GET", "res .format(obj) with extnames should set the correct charset for the Content-Type", "res .format(obj) with parameters should Vary: Accept", "exports should permit modifying the .response prototype", "app.router decode params should not decode spaces", "res .cookie(name, string) should allow multiple calls", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "res .jsonp(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "req .param(name, default) should use the default value unless defined", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "mvc GET /users should display a list of users", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "cookie-sessions GET / should display 1 view on revisit", "app.router methods should reject numbers for app.trace", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "req .get(field) should return the header field value", "app.router methods should reject numbers for app.notify", "mvc GET /pet/0 should get pet", "mvc GET /user/:id when present should display the user", "req .hostname should work with IPv6 Host and port", "Route errors should handle throw", "Router FQDN should not obscure FQDNs", "app .use(path, middleware) should support array of paths with middleware array", "res .jsonp(object) when given an object should respond with json", "res \"etag\" setting when enabled should send ETag in response to BIND request", "req.is() when given type/* should return the full type when matching", "req .subdomains with trusted X-Forwarded-Host should return an array", "app .request should extend the request prototype", "throw after .end() should fail gracefully", "config .get() when mounted should default to the parent app", "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set", "app.router methods should include POST", "app.router * should allow naming", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "req should accept an argument list of type names", "app.parent should return the parent when mounted", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should include UNSUBSCRIBE", ".sendfile(path, options) should pass options to send module", "Router FQDN should adjust FQDN req.url", "res .sendfile(path) should transfer a directory index file", "error GET /next should respond with 500", "req .protocol should return the protocol string", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "res \"etag\" setting when enabled should send ETag in response to POST request", "Router error should skip non error middleware", "res when accepting html should escape the url", "res .sendfile(path) should transfer a file", "req .xhr should return false otherwise", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "utils.setCharset(type, charset) should do anything without type", "app.router methods should include DELETE", "res .sendFile(path, fn) should invoke the callback when client already aborted", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "app .use(app) should support mount-points", "res .cookie(name, string, options) maxAge should set max-age", "res .set(field, values) should throw when Content-Type is an array", "app .param(name, fn) should not invoke without route handler", "app .use(path, middleware) should invoke middleware for all requests starting with path", "res when the request method is HEAD should ignore the body", "res .append(field, val) should accept array of values", "res .send(code, body) should set .statusCode and body", "app .use(path, middleware) should strip path from req.url", "res .format(obj) in router should set the correct charset for the Content-Type", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "downloads GET /files/amazing.txt should have a download header", "res .type(str) should set the Content-Type based on a filename", "app.router :name should work in array of paths", "res .download(path, filename, options, fn) should invoke the callback", "app.router when next() is called should continue lookup", "res .redirect(url) should encode \"url\"", "res .sendfile(path, fn) should not override manual content-types", "app.router methods should include MERGE", "res .sendfile(path) with an absolute path should transfer the file", "req .ip when X-Forwarded-For is not present should return the remote address", "res .send(Buffer) should send as octet-stream", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "res .redirect(url, status) should set the response status", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "mvc GET /user/:id when not present should 404", "resource GET / should respond with instructions", "res .jsonp(object) should escape utf whitespace", "app .use(path, middleware) should support empty string path", "res should respond with 304 Not Modified when fresh", "in production should enable \"view cache\"", "route-separation GET /user/:id/view should get a user", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "app .param(name, fn) should defer to next route", "res .sendfile(path) should not error if the client aborts", "res .append(field, val) should append multiple headers", "utils.etag(body, encoding) should support buffer", "Route .VERB should allow fallthrough", "Route errors should handle single error handler", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app .render(name, fn) should support absolute paths", "OPTIONS should not be affected by app.all", "app.router * should decore the capture", "app.router should allow rewriting of the url", "app.router methods should include SOURCE", "utils.wetag(body, encoding) should support utf8 strings", "req .range(size) should cap to the given size when open-ended", "app .use(path, middleware) should reject Date as middleware", "app.router when next(err) is called should break out of app.router", "app.router * should eat everything after /", "app.router methods should include ACL", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "mvc PUT /user/:id should update the user", "req.is() when given */subtype should return the full type when matching", "app .param(name, fn) should call when values differ", "config .set() should return the app when undefined", "req .acceptsLanguages should be true if language accepted", "route-map GET /users/:id/pets should get a users pets", "res .location(url) should not touch already-encoded sequences in \"url\"", "app.router * should span multiple segments", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "app.path() should return the canonical", "Router .param should call param function when routing VERBS", "req .query when \"query parser\" is extended should parse complex keys", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "req .range(size) should return parsed ranges", "params GET /users/foo-bar should fail integer parsing", "OPTIONS should only include each method once", "Router .handle should dispatch", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "Route .all should stack", "req .acceptsLanguages when Accept-Language is not present should always return true", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "mvc PUT /pet/2 should update the pet", "app.router * should work with several", "res .format(obj) in router should utilize qvalues in negotiation", "app .engine(ext, fn) should map a template engine", "error-pages Accept: text/html GET /404 should respond with 404", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "req .param(name) should check req.body", "req .hostname should strip port number", "req.is() when content-type is not present should return false", "res .render(name, option) should give precedence to res.locals over app.locals", "res .format(obj) with parameters should default the Content-Type", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively", "error GET /missing should respond with 404", "route-separation GET /posts should get a list of posts", "res .sendfile(path) with a relative path with non-GET should still serve", "config .get() when mounted should prefer child \"trust proxy\" setting", "res .json(object) when given an array should respond with json", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "error-pages Accept: application/json GET /403 should respond with 403", "res .set(field, value) should set the response header field", "exports should expose the request prototype", "app .use(app) should support mounted app anywhere", "res .cookie(name, string, options) maxAge should not mutate the options object", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "res .set(field, values) should not set a charset of one is already set", "app .param(name, fn) should map logic for a single param", "auth GET /login should display login error", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "Router .param should call when values differ", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "res when accepting neither text or html should respond with an empty body", "app .render(name, options, fn) caching when \"cacheKey\" option is given should render the template once with the same keys", "req .range(size) should have a .type", "app.all() should add a router per method", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "app.route should return a new route", "markdown GET / should respond with html", "mvc GET /user/:id/edit should display the edit form", "app .use(path, middleware) should accept nested arrays of middleware", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "req .host when \"trust proxy\" is enabled should default to Host", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "res .format(obj) with canonicalized mime types should Vary: Accept", "app.route should all .VERB after .all", "res .jsonp(object) should allow []", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "app.router :name should denote a capture group", "vhost bar.example.com GET / should redirect to /bar", "app .use(path, middleware) should accept multiple arrays of middleware", "res .type(str) should default to application/octet-stream", "req .range(size) should return undefined if no range", "res .sendfile(path, fn) should invoke the callback on 403", "req .subdomains otherwise should return an empty array", "res .render(name, option) should expose res.locals", "req .xhr should case-insensitive", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "res .cookie(name, object) should generate a JSON cookie", "app.router methods should include PROPPATCH", "Router should handle missing URL", "app .engine(ext, fn) should work without leading \".\"", "req .subdomains when present should work with IPv4 address", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "app.router methods should include SEARCH", "app .engine(ext, fn) should work \"view engine\" setting", "res .send(body, code) should be supported for backwards compat", "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat", "resource GET /users/1 should respond with user 1", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "res .set(field, values) should coerce to an array of strings", "app .render(name, fn) should support absolute paths with \"view engine\"", "app .render(name, fn) should handle render error throws", "app.router methods should reject numbers for app.mkcalendar", "Route .all should add handler", "app.router methods should include CHECKOUT", "app.listen() should wrap with an HTTP server", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .send(String) should override charset in Content-Type", "Router .use should be called for any URL", "res \"etag\" setting when enabled should send ETag in response to PUT request", "res should not override previous Content-Types", "app.router methods should reject numbers for app.unbind", "app.router should allow escaped regexp", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "cookies POST / should set a cookie", "app.router methods should reject numbers for app.link", "req .baseUrl should travel through routers correctly", "res .sendfile(path, fn) should invoke the callback on 404", "req .subdomains when present should work with IPv6 address", "cookies POST / should no set cookie w/o reminder", "res .set(object) should coerce to a string", "req .stale should return true without response headers", "req .ips when X-Forwarded-For is not present should return []", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "req .acceptsLanguage should be false if language not accepted", "res .download(path, filename) should provide an alternate filename", "req .signedCookies should return a signed JSON cookie", "res .send(null) should set body to \"\"", "res .cookie(name, string, options) maxAge should set relative expires", "app should 404 without routes", "app.router * should work cross-segment", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "app.router .:name? should denote an optional format", "app.router methods should reject numbers for app.source", "res .render(name) should support absolute paths with \"view engine\"", "app.router params should allow merging existing req.params", "req .route should be the executed Route", "auth GET / should redirect to /login", "req .get(field) should throw missing header name", "auth GET /logout should redirect to /", "app .response should not be influenced by other app protos", "res .format(obj) given .default should be invoked instead of auto-responding", "res .jsonp(object) should ignore object callback parameter with jsonp", "res \"etag\" setting when enabled should not send ETag for res.send()", "config .get() when mounted should inherit \"trust proxy\" setting", "req .secure when X-Forwarded-Proto is missing should return false when http", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app .render(name, fn) when \"view engine\" is given should render the template", "res .format(obj) in router should allow wildcard type/subtypes", "app.router methods should include REPORT", "res .sendFile(path) should 404 for directory", "app .param(fn) should fail if not given fn", "Route should work without handlers", "app.router :name should work inside literal parenthesis", "req .host should return undefined otherwise", "res .download(path, fn) should invoke the callback", "params GET / should respond with instructions", "req .param(name) should check req.query", "res .jsonp(object) when given primitives should respond with json for null", "app .use(middleware) should accept multiple arguments", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "Router .use should reject null as middleware", "vhost example.com GET /foo should say foo", "auth POST /login should fail without proper password", "app.route should support dynamic routes", "app.router methods should include M-SEARCH", "route-separation GET /user/:id should get a user", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "res .jsonp(object) when given an array should respond with json", "Router FQDN should ignore FQDN in path", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "app .param(name, fn) should not call when values differ on error", "auth GET /restricted should succeed with proper cookie", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "route-map GET /users/:id should get a user", "req .acceptsCharset(type) when Accept-Charset is not present should return true when present", "app.router should restore req.params after leaving router", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .sendfile(path) with a relative path should transfer the file", "res .append(field, val) should work with cookies", "req .query when \"query parser\" an unknown value should throw", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "route-separation PUT /user/:id/edit should edit a user", "res .json(object) when given primitives should respond with json for Number", "Router should return a function with router methods", "without NODE_ENV should default to development", "exports should permit modifying the .request prototype", "app.router methods should include REBIND", "res .redirect(status, url) should set the response status", "res .render(name, option) should give precedence to res.render() locals over res.locals", "app.router methods should reject numbers for app.purge", "res .sendfile(path) should ignore headers option on 404", "res .send(undefined) should set body to \"\"", "res.vary() with an empty array should not set Vary", "app.router methods should include MKACTIVITY", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "Route .all should handle VERBS", "app .render(name, fn) should support index.<engine>", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "app .response should extend the response prototype", "app.router params should merge numeric indices req.params when more in parent", "route-map DELETE /users should delete users", "res .json(status, object) should respond with json and set the .statusCode", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "app.router methods should reject numbers for app.del", "req .fresh should return false when the resource is modified", "req .acceptsCharset(type) when Accept-Charset is not present should return true", "req.is() when given a mime type should return false when not matching", "res when accepting html should respond with html", "res .format(obj) with extnames should default the Content-Type", "app .use(path, middleware) should require middleware", "res \"etag\" setting when enabled should send ETag for long response", "req .accepts(types) should take quality into account", "params GET /user/0 should respond with a user", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include TRACE", "mvc GET / should redirect to /users", "req .xhr should return false when not present", "res .cookie(name, string, options) should set params", "web-service GET /api/users with a valid api key should respond users json", "res .send(Object) should send as application/json", "res .sendfile(path) should 404 for directory without trailing slash", "Route .VERB should support .get", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .render(name) should expose app.locals with `name` property", "cookies GET / should respond to cookie", "res .sendFile(path) should transfer a file", "content-negotiation GET /users should default to text/html", "res .download(path) should transfer as an attachment", "app .use(path, middleware) should accept multiple arguments", "req .hostname should return the Host when present", "req .query when \"query parser\" disabled should not parse query", "route-separation GET /user/:id should 404 on missing user", "req.is() when given */subtype should ignore charset", "app.router :name should allow several capture groups", "app .render(name, fn) when an error occurs should invoke the callback", "res on failure should remove Content-Disposition", "res .sendfile(path, fn) should invoke the callback when client aborts", "config .disabled() should default to true", "app .engine(ext, fn) should throw when the callback is missing", "app .use(path, middleware) should accept array of middleware", "res .render(name, option) should expose app.locals", "error GET / should respond with 500", "Router should support dynamic routes", "app.router methods should reject numbers for app.delete", "app.router methods should include MKCALENDAR", "app.router should be chainable", "utils.etag(body, encoding) should support strings", "req .subdomains when subdomain offset is set when present should return an array", "exports should throw on old middlewares", "cookies GET / should respond with no cookies", "req .param(name) should check req.params", "app.router * should work within arrays", "config .get() should return undefined when unset", "req .secure when X-Forwarded-Proto is present should return false when http", "app .use(app) should set the child's .parent", "res .format(obj) with canonicalized mime types should default the Content-Type", "res .json(object, status) should use status as second number for backwards compat", "res .render(name) when \"view engine\" is given should render the template", "res .format(obj) with extnames should Vary: Accept", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "app.router methods should reject numbers for app.m-search", "error-pages GET / should respond with page list", "error-pages Accept: text/plain GET /404 should respond with 404", "web-service when requesting an invalid route should respond with 404 json", "app.router methods should reject numbers for app.patch", "req .baseUrl should contain lower path", "error-pages Accept: text/plain GET /500 should respond with 500", "Route errors should handle errors via arity 4 functions", "res should not perform freshness check unless 2xx or 304", "app.del() should alias app.delete()", "res .locals should be empty by default", "resource DELETE /users/9 should fail", "app.router methods should reject numbers for app.post", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "app .locals(obj) should merge locals", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "res .status(code) should set the response .statusCode", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app .use(path, middleware) should support regexp path", "res .sendFile(path) should 304 when ETag matches", "res .sendFile(path, fn) should invoke the callback when client aborts", "resource DELETE /users/1 should delete user 1", "res .set(object) should set multiple fields", "app.router methods should include UNLINK", "res .location(url) should encode \"url\"", "content-negotiation GET /users should accept to text/plain", "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise", "res \"etag\" setting when disabled should send no ETag", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "res .jsonp(object, status) should use status as second number for backwards compat", "res .sendfile(path) with a relative path should disallow requesting out of \"root\"", "res .json(object, status) should respond with json and set the .statusCode for backwards compat", "res .attachment(utf8filename) should add the filename and filename* params", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "utils.wetag(body, encoding) should support empty string", "multi-router GET /api/v1/users should respond with users from APIv1", "res .format(obj) with parameters should utilize qvalues in negotiation", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "res .send(String) should keep charset in Content-Type for Buffers", "app.router params should ignore invalid incoming req.params", "res .render(name) when \"views\" is given should lookup the file in the path", "app.router when next(err) is called should call handler in same route, if exists", "exports should expose the response prototype", "res .format(obj) with extnames should utilize qvalues in negotiation", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "app.router methods should include PURGE", "req .get(field) should throw for non-string header name", "app.router params should overwrite existing req.params by default", "res when accepting text should encode the url", "app.router .:name should denote a format", "res .sendfile(path) should transfer a file with urlencoded name", "res .format(obj) with extnames should allow wildcard type/subtypes", "app.head() should override", "app.router methods should include LOCK", "res on failure should invoke the callback", "app .render(name, fn) when an extension is given should render the template", "app.router when next(\"router\") is called should jump out of router", "app .param(name, fn) should support altering req.params across routes", "res .set(field, values) should set multiple response header fields", "req .query when \"query parser\" is extended should parse parameters with dots", "res .sendFile(path) should include ETag", "config .set() \"etag\" should throw on bad value", "res .download(path, filename, fn) should invoke the callback", "utils.wetag(body, encoding) should support strings", "res .jsonp(object) should allow renaming callback", "app.router params should use params from router", "utils.isAbsolute() should support windows", "utils.flatten(arr) should flatten an array", "res .get(field) should get the response header field", "res.vary() with an array should set the values", "req .acceptsEncodingss should be true if encoding accepted", "app.router when next(\"route\") is called should jump to next route", "exports should expose the application prototype", "res .attachment(filename) should add the filename param", "res .set(field, value) should coerce to a string", "res .cookie(name, string) should set a cookie", "app.router methods should reject numbers for app.propfind", "res .sendStatus(statusCode) should work with unknown code", "res .sendfile(path, fn) should invoke the callback when client already aborted", "app.router when given a regexp should populate req.params with the captures", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "app.router decode params should decode correct params", "app .use(middleware) should invoke middleware for all requests", "app .param(name, fn) should catch thrown secondary error", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "res .jsonp(object) should override previous Content-Types with callback", "app.router methods should reject numbers for app.unsubscribe", "config .set() \"etag\" should set \"etag fn\"", "resource GET /users/9 should respond with error", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "app .use(path, middleware) should reject number as middleware", "Router error should handle throwing in handler after async param", "mvc GET /user/:id when present should display the users pets", "req .accepts(types) should return the first acceptable type with canonical mime types", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "app should inherit from event emitter", "app.router methods should include MKCOL", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "resource GET /users/1..3 should respond with users 1 through 3", "route-separation GET / should respond with index", "app .VERB() should only call an error handling routing callback when an error is propagated", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "utils.isAbsolute() should support unices", "req .host should work with IPv6 Host and port", "res .append(field, val) should work with res.set(field, val) first", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .sendFile(path, fn) should invoke the callback without error when 304", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "utils.setCharset(type, charset) should override charset", "res.vary() when the value is present should not add it again", "app .param(name, fn) should catch thrown error", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "error-pages Accept: application/json GET /500 should respond with 500", "app.router methods should include GET", "app.router methods should reject numbers for app.move", "app.router :name? should populate the capture group", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "res .json(object) when given an object should respond with json", "Router should not stack overflow with many registered routes", "res \"etag\" setting when \"weak\" should send weak ETag", "app .param(name, fn) should defer all the param routes", "res \"etag\" setting when a function should send custom ETag", "app .render(name, fn) when the file does not exist should provide a helpful error", "OPTIONS should not respond if the path is not defined", "app .use(middleware) should accept multiple arrays of middleware", "res \"etag\" setting when a function should not send falsy ETag", "req .accepts(types) should return false when no match is made", "route-separation GET /user/:id/view should 404 on missing user", "app .use(middleware) should accept array of middleware", "app.router should allow literal \".\"", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "auth GET /login should render login form", "Router .param should call param function when routing middleware", "app .use(path, middleware) should reject null as middleware", "req .acceptsEncodingss should be false if encoding not accepted", "req .accepts(type) should return true when present", "app .use(path, middleware) should reject string as middleware", "req .hostname should return undefined otherwise", "res .redirect(url) should default to a 302 redirect", "Router error should handle throwing inside error handlers", "res .render(name) should expose app.locals", "params GET /users/0-2 should respond with three users", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "res .sendFile(path) should not error if the client aborts", "app .render(name, fn) caching should always lookup view without cache", "res .sendFile(path) should transfer a file with special characters in string", "app.router should be .use()able", "res .jsonp(object) when given primitives should respond with json for Number", "res .location(url) should set the header", "config .enable() should set the value to true", "res .send(String) should send as html", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should include LINK", "req .range(size) should accept any type", "req.is() when given type/* should return false when not matching", "res .sendfile(path) should not serve dotfiles", "vhost foo.example.com GET / should redirect to /foo", "req .baseUrl should be empty for top-level route", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "res .attachment() should Content-Disposition to attachment", "config .disabled() should return false when set", "route-map GET /users should respond with users", "req.is() when given type/* should ignore charset", "OPTIONS when error occurs in response handler should pass error to callback", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .clearCookie(name) should set a cookie passed expiry", "Router .multiple callbacks should throw if a callback is null", "res .format(obj) given .default should work when only .default is provided", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored", "res .jsonp(object) should not escape utf whitespace for json fallback", "req .hostname when \"trust proxy\" is enabled should default to Host", "app.router methods should include PATCH", "res.vary() with a string should set the value", "HEAD should output the same headers as GET requests", "app .param(name, fn) should call when values differ when using \"next\"", "app.route should not error on empty routes", "res .sendStatus(statusCode) should send the status code and message as body", "res when accepting html should include the redirect type", "app.router * should capture everything", "config .enabled() should return true when set", "app should be callable", "Route errors should handle throwing inside error handlers", "res .render(name, fn) should pass the resulting string", "app .use(path, middleware) should work if path has trailing slash", "res .sendfile(path) with a relative path should next(404) when not found", "Router .use should require middleware", "res .append(field, val) should get reset by res.set(field, val)", "res.vary() with no arguments should not set Vary", "req .baseUrl should contain full lower path", "app.mountpath should return the mounted path", "app.router methods should include OPTIONS", "app.router params should merge numeric indices req.params", "config .disable() should set the value to false", "res \"etag\" setting when enabled should send ETag", "utils.isAbsolute() should support windows unc", "req .stale should return false when the resource is not modified", "res .clearCookie(name, options) should set the given params", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "res .format(obj) in router should Vary: Accept", "req .path should return the parsed pathname", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "error-pages Accept: text/html GET /500 should respond with 500", "req .acceptsEncoding should be false if encoding not accepted", "req .subdomains when present should return an array", "auth POST /login should succeed with proper credentials", "app.router methods should include COPY", "cookies GET / should have a form", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "res .sendFile(path, fn) should invoke the callback on 404", "downloads GET / should have a link to amazing.txt", "app.router methods should reject numbers for app.lock", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res \"etag\" setting when \"strong\" should send strong ETag", "req .subdomains when subdomain offset is set otherwise should return an empty array", "Router .use should accept array of middleware", "app.router methods should include UNLOCK", "mvc GET /pet/0/edit should get pet edit page", "res .send() should set body to \"\"", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "route-separation GET /user/:id/edit should get a user to edit", "app.router methods should re-route when method is altered", "req .get(field) should special-case Referer", "res should work when mounted", "app.router case sensitivity should be disabled by default", "res .links(obj) should set Link header field for multiple calls", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "req .stale should return true when the resource is modified", "markdown GET /fail should respond with an error", "app.router methods should reject numbers for app.unlock", "res \"etag\" setting when enabled should send ETag in response to GET request", "res .send(code, number) should send number as json", "Router .param should only call once per request", "error-pages Accept: text/html GET /403 should respond with 403", "res .sendfile(path) with a relative path should serve relative to \"root\"", "Route .VERB should limit to just .VERB", "utils.etag(body, encoding) should support utf8 strings", "res .links(obj) should set Link header field", "params GET /user/9 should fail to find user", "res when accepting text should respond with text", "config .get() when mounted should given precedence to the child", "app.router methods should reject numbers for app.options", "res .send(String) should not override Content-Type", "resource GET /users should respond with all users", "Router FQDN should ignore FQDN in search", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "multi-router GET /api/v2/ should respond with APIv2 root handler", "res .format(obj) with parameters should set the correct charset for the Content-Type", "res .sendFile(path) with \"headers\" option should accept headers option", "req .query when \"query parser\" is a function should parse using function", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .json(object) when given primitives should respond with json for null", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "res .jsonp(object) when given primitives should respond with json for String", "app.router methods should include PROPFIND", "exports should expose Router", "res .render(name) should error without \"view engine\" set and no file extension", "middleware .next() should behave like connect", "req .host should strip port number", "res .json(object) when given primitives should respond with json for String", "app.router methods should reject numbers for app.copy", "app .use(app) should support dynamic routes", "req .xhr should return true when X-Requested-With is xmlhttprequest", "cookie-sessions GET / should display no views", "res .attachment(filename) should set the Content-Type", "app.router methods should reject numbers for app.report", "req .acceptsLanguage should be true if language accepted", "res .sendFile(path) should 404 when not found", "res .sendFile(path, options) should pass options to send module", "res .send(Buffer) should set ETag", "OPTIONS should forward requests down the middleware chain", "Router .multiple callbacks should throw if a callback is not a function", "app.all() should run the callback for a method just once", "req .acceptsLanguage when Accept-Language is not present should always return true", "res .sendfile(path, fn) should utilize the same options as express.static()", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "app .param(fn) should map app.param(name, ...) logic", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "config .get() should otherwise return the value", "web-service GET /api/repos with a valid api key should respond repos json", "res .render(name) should support index.<engine>", "req.is() when given a mime type should ignore charset", "cookies GET /forget should clear cookie", "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise", "req .query should default to parse complex keys", "res .jsonp(object) should respond with jsonp", "web-service GET /api/users without an api key should respond with 400 bad request", "error-pages Accept: text/plain GET /403 should respond with 403", "config .set() should set a value", "Router error should handle throwing inside routes with params", "config .set() should return the app", "req .range(size, options) with \"combine: true\" option should return combined ranges", "mvc PUT /user/:id should 500 on error", "app.router * should not be greedy immediately after param", "req .host should work with IPv6 Host", "res .render(name, option) should give precedence to res.render() locals over app.locals", "res \"etag\" setting when enabled should send ETag in response to COPY request", "content-negotiation GET / should accept to text/plain", "res should be chainable", "app.router methods should reject numbers for app.mkactivity", "app .locals.settings should expose app settings", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be undefined by default", "res .jsonp(object) should use first callback parameter with jsonp", "req .acceptsLanguages should be false if language not accepted", "res .send(String) should set ETag", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "res .sendfile(path) with a relative path should allow ../ when \"root\" is set", "res .type(str) should set the Content-Type with type/subtype", "app.router * should keep correct parameter indexes", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "app .param(name, fn) should only call once per request", "route-separation GET /users should list users", "multi-router GET /api/v1/ should respond with APIv1 root handler", "multi-router GET /api/v2/users should respond with users from APIv2", "Router .use should reject string as middleware", "downloads GET /files/missing.txt should respond with 404", "Router should support .use of other routers", "app.router methods should include HEAD", "app .render(name, fn) caching should cache with \"view cache\" setting", "app.router should run in order added", "res .jsonp(object) should include security header and prologue", "req .query should default to {}", "Router parallel requests should not mix requests", "res .attachment(utf8filename) should set the Content-Type", "res .send(code) should set .statusCode", "res .json(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to LINK request", "req .query when \"query parser fn\" is missing should act like \"extended\"", "res should not support jsonp callbacks", "mvc POST /user/:id/pet should create a pet for user"], "failed_tests": ["app .render(name, options, fn) caching when \"cacheKey\" option is given should render the template twice with different keys"], "skipped_tests": []}, "fix_patch_result": {"passed_count": 852, "failed_count": 0, "skipped_count": 0, "passed_tests": ["app should emit \"mount\" when mounted", "res .jsonp(object) when given primitives should respond with json", "res .sendfile(path) should accept dotfiles option", "req .accepts(types) should return the first acceptable type", "res .sendFile(path) should error missing path", "app.router methods should reject numbers for app.rebind", "res .json(object) should not support jsonp callbacks", "res .sendfile(path, fn) should invoke the callback when complete", "app.router * should denote a greedy capture group", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "app.router methods should include BIND", "req .query when \"query parser\" disabled should not parse complex keys", "Router .multiple callbacks should throw if a callback is undefined", "req.is() when given a mime type should return the type when matching", "Router .all should be called for any URL when \"*\"", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "req .accepts(type) should return false otherwise", "vhost example.com GET / should say hello", "multi-router GET / should respond with root handler", "req .host should return the Host when present", "auth GET /restricted should redirect to /login without cookie", "app .param(names, fn) should map the array", "app.router methods should reject numbers for app.search", "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to ACL request", "res .jsonp(object) should not override previous Content-Types with no callback", "auth POST /login should fail without proper username", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "utils.setCharset(type, charset) should keep charset if not given charset", "res .sendFile(path, fn) should invoke the callback when complete", "res .cookie(name, string, options) signed without secret should throw an error", "res \"etag\" setting when disabled should send ETag when manually set", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.bind", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app.router :name should match a single segment only", "app.router methods should include NOTIFY", "app .render(name, options, fn) should render the template", "req .acceptsEncoding should be true if encoding accepted", "res .format(obj) with parameters should allow wildcard type/subtypes", "app.router * should require a preceding /", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "utils.wetag(body, encoding) should support buffer", "res .format(obj) in router should default the Content-Type", "content-negotiation GET / should accept to application/json", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "res .send(Buffer) should not override ETag", "req .range(size) should cap to the given size", "req .fresh should return false without response headers", "res when accepting text should include the redirect type", "app.router methods should include PUT", "exports should permit modifying the .application prototype", "app.router methods should reject numbers for app.acl", "res .send(Buffer) should not override Content-Type", "app .param(name, fn) should work with encoded values", "app .render(name, fn) should expose app.locals", "Router .multiple callbacks should not throw if all callbacks are functions", "app.router methods should reject numbers for app.proppatch", "res .format(obj) in router when Accept is not present should invoke the first callback", "app.router methods should reject numbers for app.subscribe", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "route-map GET /users/:id/pets/:pid should get a users pet", "app.router methods should include DEL", "res .render(name) should support absolute paths", "Router should handle blank URL", "app.router methods should include UNBIND", "req .accepts(type) should return true when Accept is not present", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "res \"etag\" setting when enabled should send ETag for empty string response", "Router FQDN should adjust FQDN req.url with multiple handlers", "app.options() should override the default behavior", "Router .use should reject number as middleware", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.merge", "in development should disable \"view cache\"", "utils.etag(body, encoding) should support empty string", "Router .use should reject Date as middleware", "res .sendFile(path) should not override manual content-types", "Route errors should handle throw in .all", "app .use(path, middleware) should support array of paths", "res .render(name) when an error occurs should next(err)", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "req .accepts(types) should return the first when Accept is not present", "config .enabled() should default to false", "app.router methods should reject numbers for app.checkout", "cookie-sessions GET / should set a session cookie", "app.router methods should reject numbers for app.get", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "res .render(name, options, fn) should pass the resulting string", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "res \"etag\" setting when enabled should not override ETag when manually set", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "app.router decode params should not accept params in malformed paths", "app.router when given a regexp should match the pathname only", "error-pages Accept: application/json GET /404 should respond with 404", "app.router trailing slashes should be optional by default", "app.router methods should reject numbers for app.head", "res .sendfile(path, fn) should invoke the callback without error when HEAD", "app .render(name, options, fn) should give precedence to app.render() locals", "res should always check regardless of length", "req .hostname should work with IPv6 Host", "app.router decode params should work with unicode", "content-negotiation GET / should default to text/html", "app.router methods should include SUBSCRIBE", "res .sendFile(path) with \"root\" option should not transfer relative with without", "res .jsonp(status, object) should respond with json and set the .statusCode", "req.is() when given */subtype should return false when not matching", "ejs GET / should respond with html", "res .render(name, fn) when an error occurs should pass it to the callback", "utils.setCharset(type, charset) should return type if not given charset", "app.router methods should include MOVE", "app.router methods should reject numbers for app.unlink", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "app .VERB() should not get invoked without error handler on error", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router * should be optional", "req .fresh should return true when the resource is not modified", "res .jsonp(object) should disallow arbitrary js", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "res .render(name, option) should render the template", "res .json(object) should not override previous Content-Types", "app.router params should merge numeric indices req.params when parent has same number", "app.router methods should reject numbers for app.put", "req.is() when given an extension should lookup the mime type", "res .sendfile(path, fn) should invoke the callback on socket error", "utils.setCharset(type, charset) should set charset", "res .sendfile(path, fn) should invoke the callback without error when 304", "app .use(middleware) should accept nested arrays of middleware", "app .use(app) should mount the app", "app.router methods should reject numbers for app.mkcol", "app.router :name should work following a partial capture group", "res .sendfile(path) should accept headers option", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app.router params should restore req.params", "app.router should throw with notice", "app.router :name? should denote an optional capture group", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains with no host should return an empty array", "Router .all should support using .all to capture all http verbs", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "content-negotiation GET /users should accept to application/json", "HEAD should default to GET", "res .format(obj) with extnames should set the correct charset for the Content-Type", "res .format(obj) with parameters should Vary: Accept", "exports should permit modifying the .response prototype", "app.router decode params should not decode spaces", "res .cookie(name, string) should allow multiple calls", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "res .jsonp(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "req .param(name, default) should use the default value unless defined", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "mvc GET /users should display a list of users", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "cookie-sessions GET / should display 1 view on revisit", "app.router methods should reject numbers for app.trace", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "req .get(field) should return the header field value", "app.router methods should reject numbers for app.notify", "mvc GET /pet/0 should get pet", "mvc GET /user/:id when present should display the user", "req .hostname should work with IPv6 Host and port", "Route errors should handle throw", "Router FQDN should not obscure FQDNs", "app .use(path, middleware) should support array of paths with middleware array", "res .jsonp(object) when given an object should respond with json", "res \"etag\" setting when enabled should send ETag in response to BIND request", "req.is() when given type/* should return the full type when matching", "req .subdomains with trusted X-Forwarded-Host should return an array", "app .request should extend the request prototype", "throw after .end() should fail gracefully", "config .get() when mounted should default to the parent app", "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set", "app.router methods should include POST", "app.router * should allow naming", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "req should accept an argument list of type names", "app.parent should return the parent when mounted", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should include UNSUBSCRIBE", ".sendfile(path, options) should pass options to send module", "Router FQDN should adjust FQDN req.url", "res .sendfile(path) should transfer a directory index file", "error GET /next should respond with 500", "req .protocol should return the protocol string", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "res \"etag\" setting when enabled should send ETag in response to POST request", "Router error should skip non error middleware", "res when accepting html should escape the url", "res .sendfile(path) should transfer a file", "req .xhr should return false otherwise", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "utils.setCharset(type, charset) should do anything without type", "app.router methods should include DELETE", "res .sendFile(path, fn) should invoke the callback when client already aborted", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "app .use(app) should support mount-points", "res .cookie(name, string, options) maxAge should set max-age", "res .set(field, values) should throw when Content-Type is an array", "app .param(name, fn) should not invoke without route handler", "app .use(path, middleware) should invoke middleware for all requests starting with path", "res when the request method is HEAD should ignore the body", "res .append(field, val) should accept array of values", "res .send(code, body) should set .statusCode and body", "app .use(path, middleware) should strip path from req.url", "res .format(obj) in router should set the correct charset for the Content-Type", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "downloads GET /files/amazing.txt should have a download header", "res .type(str) should set the Content-Type based on a filename", "app.router :name should work in array of paths", "res .download(path, filename, options, fn) should invoke the callback", "app.router when next() is called should continue lookup", "res .redirect(url) should encode \"url\"", "res .sendfile(path, fn) should not override manual content-types", "app.router methods should include MERGE", "res .sendfile(path) with an absolute path should transfer the file", "req .ip when X-Forwarded-For is not present should return the remote address", "res .send(Buffer) should send as octet-stream", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "res .redirect(url, status) should set the response status", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "mvc GET /user/:id when not present should 404", "resource GET / should respond with instructions", "res .jsonp(object) should escape utf whitespace", "app .use(path, middleware) should support empty string path", "res should respond with 304 Not Modified when fresh", "in production should enable \"view cache\"", "route-separation GET /user/:id/view should get a user", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "app .param(name, fn) should defer to next route", "res .sendfile(path) should not error if the client aborts", "res .append(field, val) should append multiple headers", "utils.etag(body, encoding) should support buffer", "Route .VERB should allow fallthrough", "Route errors should handle single error handler", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app .render(name, fn) should support absolute paths", "OPTIONS should not be affected by app.all", "app.router * should decore the capture", "app.router should allow rewriting of the url", "app.router methods should include SOURCE", "utils.wetag(body, encoding) should support utf8 strings", "req .range(size) should cap to the given size when open-ended", "app .use(path, middleware) should reject Date as middleware", "app.router when next(err) is called should break out of app.router", "app.router * should eat everything after /", "app.router methods should include ACL", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "mvc PUT /user/:id should update the user", "req.is() when given */subtype should return the full type when matching", "app .param(name, fn) should call when values differ", "config .set() should return the app when undefined", "req .acceptsLanguages should be true if language accepted", "route-map GET /users/:id/pets should get a users pets", "res .location(url) should not touch already-encoded sequences in \"url\"", "app.router * should span multiple segments", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "app.path() should return the canonical", "Router .param should call param function when routing VERBS", "req .query when \"query parser\" is extended should parse complex keys", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "req .range(size) should return parsed ranges", "params GET /users/foo-bar should fail integer parsing", "OPTIONS should only include each method once", "Router .handle should dispatch", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "Route .all should stack", "req .acceptsLanguages when Accept-Language is not present should always return true", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "mvc PUT /pet/2 should update the pet", "app.router * should work with several", "res .format(obj) in router should utilize qvalues in negotiation", "app .engine(ext, fn) should map a template engine", "error-pages Accept: text/html GET /404 should respond with 404", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "req .param(name) should check req.body", "req .hostname should strip port number", "req.is() when content-type is not present should return false", "res .render(name, option) should give precedence to res.locals over app.locals", "res .format(obj) with parameters should default the Content-Type", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively", "error GET /missing should respond with 404", "route-separation GET /posts should get a list of posts", "res .sendfile(path) with a relative path with non-GET should still serve", "config .get() when mounted should prefer child \"trust proxy\" setting", "res .json(object) when given an array should respond with json", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "error-pages Accept: application/json GET /403 should respond with 403", "res .set(field, value) should set the response header field", "exports should expose the request prototype", "app .use(app) should support mounted app anywhere", "res .cookie(name, string, options) maxAge should not mutate the options object", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "res .set(field, values) should not set a charset of one is already set", "app .param(name, fn) should map logic for a single param", "auth GET /login should display login error", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "Router .param should call when values differ", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "res when accepting neither text or html should respond with an empty body", "app .render(name, options, fn) caching when \"cacheKey\" option is given should render the template once with the same keys", "req .range(size) should have a .type", "app.all() should add a router per method", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "app.route should return a new route", "markdown GET / should respond with html", "mvc GET /user/:id/edit should display the edit form", "app .use(path, middleware) should accept nested arrays of middleware", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "req .host when \"trust proxy\" is enabled should default to Host", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "res .format(obj) with canonicalized mime types should Vary: Accept", "app.route should all .VERB after .all", "res .jsonp(object) should allow []", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "app.router :name should denote a capture group", "vhost bar.example.com GET / should redirect to /bar", "app .use(path, middleware) should accept multiple arrays of middleware", "res .type(str) should default to application/octet-stream", "req .range(size) should return undefined if no range", "res .sendfile(path, fn) should invoke the callback on 403", "req .subdomains otherwise should return an empty array", "res .render(name, option) should expose res.locals", "req .xhr should case-insensitive", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "res .cookie(name, object) should generate a JSON cookie", "app.router methods should include PROPPATCH", "Router should handle missing URL", "app .engine(ext, fn) should work without leading \".\"", "req .subdomains when present should work with IPv4 address", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "app.router methods should include SEARCH", "app .engine(ext, fn) should work \"view engine\" setting", "res .send(body, code) should be supported for backwards compat", "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat", "resource GET /users/1 should respond with user 1", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "res .set(field, values) should coerce to an array of strings", "app .render(name, fn) should support absolute paths with \"view engine\"", "app .render(name, fn) should handle render error throws", "app.router methods should reject numbers for app.mkcalendar", "Route .all should add handler", "app.router methods should include CHECKOUT", "app.listen() should wrap with an HTTP server", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .send(String) should override charset in Content-Type", "Router .use should be called for any URL", "res \"etag\" setting when enabled should send ETag in response to PUT request", "res should not override previous Content-Types", "app.router methods should reject numbers for app.unbind", "app.router should allow escaped regexp", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "cookies POST / should set a cookie", "app.router methods should reject numbers for app.link", "req .baseUrl should travel through routers correctly", "res .sendfile(path, fn) should invoke the callback on 404", "req .subdomains when present should work with IPv6 address", "cookies POST / should no set cookie w/o reminder", "res .set(object) should coerce to a string", "req .stale should return true without response headers", "req .ips when X-Forwarded-For is not present should return []", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "req .acceptsLanguage should be false if language not accepted", "res .download(path, filename) should provide an alternate filename", "req .signedCookies should return a signed JSON cookie", "res .send(null) should set body to \"\"", "res .cookie(name, string, options) maxAge should set relative expires", "app should 404 without routes", "app.router * should work cross-segment", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "app.router .:name? should denote an optional format", "app.router methods should reject numbers for app.source", "res .render(name) should support absolute paths with \"view engine\"", "app.router params should allow merging existing req.params", "req .route should be the executed Route", "auth GET / should redirect to /login", "req .get(field) should throw missing header name", "auth GET /logout should redirect to /", "app .response should not be influenced by other app protos", "res .format(obj) given .default should be invoked instead of auto-responding", "res .jsonp(object) should ignore object callback parameter with jsonp", "res \"etag\" setting when enabled should not send ETag for res.send()", "config .get() when mounted should inherit \"trust proxy\" setting", "req .secure when X-Forwarded-Proto is missing should return false when http", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app .render(name, fn) when \"view engine\" is given should render the template", "res .format(obj) in router should allow wildcard type/subtypes", "app.router methods should include REPORT", "res .sendFile(path) should 404 for directory", "app .param(fn) should fail if not given fn", "Route should work without handlers", "app.router :name should work inside literal parenthesis", "req .host should return undefined otherwise", "res .download(path, fn) should invoke the callback", "params GET / should respond with instructions", "req .param(name) should check req.query", "res .jsonp(object) when given primitives should respond with json for null", "app .use(middleware) should accept multiple arguments", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "Router .use should reject null as middleware", "vhost example.com GET /foo should say foo", "auth POST /login should fail without proper password", "app.route should support dynamic routes", "app.router methods should include M-SEARCH", "route-separation GET /user/:id should get a user", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "res .jsonp(object) when given an array should respond with json", "Router FQDN should ignore FQDN in path", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "app .param(name, fn) should not call when values differ on error", "auth GET /restricted should succeed with proper cookie", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "route-map GET /users/:id should get a user", "req .acceptsCharset(type) when Accept-Charset is not present should return true when present", "app.router should restore req.params after leaving router", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .sendfile(path) with a relative path should transfer the file", "res .append(field, val) should work with cookies", "req .query when \"query parser\" an unknown value should throw", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "route-separation PUT /user/:id/edit should edit a user", "res .json(object) when given primitives should respond with json for Number", "Router should return a function with router methods", "without NODE_ENV should default to development", "exports should permit modifying the .request prototype", "app.router methods should include REBIND", "res .redirect(status, url) should set the response status", "res .render(name, option) should give precedence to res.render() locals over res.locals", "app.router methods should reject numbers for app.purge", "res .sendfile(path) should ignore headers option on 404", "res .send(undefined) should set body to \"\"", "res.vary() with an empty array should not set Vary", "app.router methods should include MKACTIVITY", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "Route .all should handle VERBS", "app .render(name, fn) should support index.<engine>", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "app .response should extend the response prototype", "app.router params should merge numeric indices req.params when more in parent", "route-map DELETE /users should delete users", "res .json(status, object) should respond with json and set the .statusCode", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "app.router methods should reject numbers for app.del", "req .fresh should return false when the resource is modified", "req .acceptsCharset(type) when Accept-Charset is not present should return true", "req.is() when given a mime type should return false when not matching", "res when accepting html should respond with html", "res .format(obj) with extnames should default the Content-Type", "app .use(path, middleware) should require middleware", "res \"etag\" setting when enabled should send ETag for long response", "req .accepts(types) should take quality into account", "params GET /user/0 should respond with a user", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include TRACE", "mvc GET / should redirect to /users", "req .xhr should return false when not present", "res .cookie(name, string, options) should set params", "web-service GET /api/users with a valid api key should respond users json", "res .send(Object) should send as application/json", "res .sendfile(path) should 404 for directory without trailing slash", "Route .VERB should support .get", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .render(name) should expose app.locals with `name` property", "cookies GET / should respond to cookie", "res .sendFile(path) should transfer a file", "content-negotiation GET /users should default to text/html", "res .download(path) should transfer as an attachment", "app .use(path, middleware) should accept multiple arguments", "req .hostname should return the Host when present", "req .query when \"query parser\" disabled should not parse query", "route-separation GET /user/:id should 404 on missing user", "req.is() when given */subtype should ignore charset", "app.router :name should allow several capture groups", "app .render(name, fn) when an error occurs should invoke the callback", "res on failure should remove Content-Disposition", "res .sendfile(path, fn) should invoke the callback when client aborts", "config .disabled() should default to true", "app .engine(ext, fn) should throw when the callback is missing", "app .use(path, middleware) should accept array of middleware", "res .render(name, option) should expose app.locals", "error GET / should respond with 500", "Router should support dynamic routes", "app.router methods should reject numbers for app.delete", "app.router methods should include MKCALENDAR", "app .render(name, options, fn) caching when \"cacheKey\" option is given should render the template twice with different keys", "app.router should be chainable", "utils.etag(body, encoding) should support strings", "req .subdomains when subdomain offset is set when present should return an array", "exports should throw on old middlewares", "cookies GET / should respond with no cookies", "req .param(name) should check req.params", "app.router * should work within arrays", "config .get() should return undefined when unset", "req .secure when X-Forwarded-Proto is present should return false when http", "app .use(app) should set the child's .parent", "res .format(obj) with canonicalized mime types should default the Content-Type", "res .json(object, status) should use status as second number for backwards compat", "res .render(name) when \"view engine\" is given should render the template", "res .format(obj) with extnames should Vary: Accept", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "app.router methods should reject numbers for app.m-search", "error-pages GET / should respond with page list", "error-pages Accept: text/plain GET /404 should respond with 404", "web-service when requesting an invalid route should respond with 404 json", "app.router methods should reject numbers for app.patch", "req .baseUrl should contain lower path", "error-pages Accept: text/plain GET /500 should respond with 500", "Route errors should handle errors via arity 4 functions", "res should not perform freshness check unless 2xx or 304", "app.del() should alias app.delete()", "res .locals should be empty by default", "resource DELETE /users/9 should fail", "app.router methods should reject numbers for app.post", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "app .locals(obj) should merge locals", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "res .status(code) should set the response .statusCode", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app .use(path, middleware) should support regexp path", "res .sendFile(path) should 304 when ETag matches", "res .sendFile(path, fn) should invoke the callback when client aborts", "resource DELETE /users/1 should delete user 1", "res .set(object) should set multiple fields", "app.router methods should include UNLINK", "res .location(url) should encode \"url\"", "content-negotiation GET /users should accept to text/plain", "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise", "res \"etag\" setting when disabled should send no ETag", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "res .jsonp(object, status) should use status as second number for backwards compat", "res .sendfile(path) with a relative path should disallow requesting out of \"root\"", "res .json(object, status) should respond with json and set the .statusCode for backwards compat", "res .attachment(utf8filename) should add the filename and filename* params", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "utils.wetag(body, encoding) should support empty string", "multi-router GET /api/v1/users should respond with users from APIv1", "res .format(obj) with parameters should utilize qvalues in negotiation", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "res .send(String) should keep charset in Content-Type for Buffers", "app.router params should ignore invalid incoming req.params", "res .render(name) when \"views\" is given should lookup the file in the path", "app.router when next(err) is called should call handler in same route, if exists", "exports should expose the response prototype", "res .format(obj) with extnames should utilize qvalues in negotiation", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "app.router methods should include PURGE", "req .get(field) should throw for non-string header name", "app.router params should overwrite existing req.params by default", "res when accepting text should encode the url", "app.router .:name should denote a format", "res .sendfile(path) should transfer a file with urlencoded name", "res .format(obj) with extnames should allow wildcard type/subtypes", "app.head() should override", "app.router methods should include LOCK", "res on failure should invoke the callback", "app .render(name, fn) when an extension is given should render the template", "app.router when next(\"router\") is called should jump out of router", "app .param(name, fn) should support altering req.params across routes", "res .set(field, values) should set multiple response header fields", "req .query when \"query parser\" is extended should parse parameters with dots", "res .sendFile(path) should include ETag", "config .set() \"etag\" should throw on bad value", "res .download(path, filename, fn) should invoke the callback", "utils.wetag(body, encoding) should support strings", "res .jsonp(object) should allow renaming callback", "app.router params should use params from router", "utils.isAbsolute() should support windows", "utils.flatten(arr) should flatten an array", "res .get(field) should get the response header field", "res.vary() with an array should set the values", "req .acceptsEncodingss should be true if encoding accepted", "app.router when next(\"route\") is called should jump to next route", "exports should expose the application prototype", "res .attachment(filename) should add the filename param", "res .set(field, value) should coerce to a string", "res .cookie(name, string) should set a cookie", "app.router methods should reject numbers for app.propfind", "res .sendStatus(statusCode) should work with unknown code", "res .sendfile(path, fn) should invoke the callback when client already aborted", "app.router when given a regexp should populate req.params with the captures", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "app.router decode params should decode correct params", "app .use(middleware) should invoke middleware for all requests", "app .param(name, fn) should catch thrown secondary error", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "res .jsonp(object) should override previous Content-Types with callback", "app.router methods should reject numbers for app.unsubscribe", "config .set() \"etag\" should set \"etag fn\"", "resource GET /users/9 should respond with error", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "app .use(path, middleware) should reject number as middleware", "Router error should handle throwing in handler after async param", "mvc GET /user/:id when present should display the users pets", "req .accepts(types) should return the first acceptable type with canonical mime types", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "app should inherit from event emitter", "app.router methods should include MKCOL", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "resource GET /users/1..3 should respond with users 1 through 3", "route-separation GET / should respond with index", "app .VERB() should only call an error handling routing callback when an error is propagated", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "utils.isAbsolute() should support unices", "req .host should work with IPv6 Host and port", "res .append(field, val) should work with res.set(field, val) first", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .sendFile(path, fn) should invoke the callback without error when 304", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "utils.setCharset(type, charset) should override charset", "res.vary() when the value is present should not add it again", "app .param(name, fn) should catch thrown error", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "error-pages Accept: application/json GET /500 should respond with 500", "app.router methods should include GET", "app.router methods should reject numbers for app.move", "app.router :name? should populate the capture group", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "res .json(object) when given an object should respond with json", "Router should not stack overflow with many registered routes", "res \"etag\" setting when \"weak\" should send weak ETag", "app .param(name, fn) should defer all the param routes", "res \"etag\" setting when a function should send custom ETag", "app .render(name, fn) when the file does not exist should provide a helpful error", "OPTIONS should not respond if the path is not defined", "app .use(middleware) should accept multiple arrays of middleware", "res \"etag\" setting when a function should not send falsy ETag", "req .accepts(types) should return false when no match is made", "route-separation GET /user/:id/view should 404 on missing user", "app .use(middleware) should accept array of middleware", "app.router should allow literal \".\"", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "auth GET /login should render login form", "Router .param should call param function when routing middleware", "app .use(path, middleware) should reject null as middleware", "req .acceptsEncodingss should be false if encoding not accepted", "req .accepts(type) should return true when present", "app .use(path, middleware) should reject string as middleware", "req .hostname should return undefined otherwise", "res .redirect(url) should default to a 302 redirect", "Router error should handle throwing inside error handlers", "res .render(name) should expose app.locals", "params GET /users/0-2 should respond with three users", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "res .sendFile(path) should not error if the client aborts", "app .render(name, fn) caching should always lookup view without cache", "res .sendFile(path) should transfer a file with special characters in string", "app.router should be .use()able", "res .jsonp(object) when given primitives should respond with json for Number", "res .location(url) should set the header", "config .enable() should set the value to true", "res .send(String) should send as html", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should include LINK", "req .range(size) should accept any type", "req.is() when given type/* should return false when not matching", "res .sendfile(path) should not serve dotfiles", "vhost foo.example.com GET / should redirect to /foo", "req .baseUrl should be empty for top-level route", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "res .attachment() should Content-Disposition to attachment", "config .disabled() should return false when set", "route-map GET /users should respond with users", "req.is() when given type/* should ignore charset", "OPTIONS when error occurs in response handler should pass error to callback", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .clearCookie(name) should set a cookie passed expiry", "Router .multiple callbacks should throw if a callback is null", "res .format(obj) given .default should work when only .default is provided", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored", "res .jsonp(object) should not escape utf whitespace for json fallback", "req .hostname when \"trust proxy\" is enabled should default to Host", "app.router methods should include PATCH", "res.vary() with a string should set the value", "HEAD should output the same headers as GET requests", "app .param(name, fn) should call when values differ when using \"next\"", "app.route should not error on empty routes", "res .sendStatus(statusCode) should send the status code and message as body", "res when accepting html should include the redirect type", "app.router * should capture everything", "config .enabled() should return true when set", "app should be callable", "Route errors should handle throwing inside error handlers", "res .render(name, fn) should pass the resulting string", "app .use(path, middleware) should work if path has trailing slash", "res .sendfile(path) with a relative path should next(404) when not found", "Router .use should require middleware", "res .append(field, val) should get reset by res.set(field, val)", "res.vary() with no arguments should not set Vary", "req .baseUrl should contain full lower path", "app.mountpath should return the mounted path", "app.router methods should include OPTIONS", "app.router params should merge numeric indices req.params", "config .disable() should set the value to false", "res \"etag\" setting when enabled should send ETag", "utils.isAbsolute() should support windows unc", "req .stale should return false when the resource is not modified", "res .clearCookie(name, options) should set the given params", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "res .format(obj) in router should Vary: Accept", "req .path should return the parsed pathname", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "error-pages Accept: text/html GET /500 should respond with 500", "req .acceptsEncoding should be false if encoding not accepted", "req .subdomains when present should return an array", "auth POST /login should succeed with proper credentials", "app.router methods should include COPY", "cookies GET / should have a form", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "res .sendFile(path, fn) should invoke the callback on 404", "downloads GET / should have a link to amazing.txt", "app.router methods should reject numbers for app.lock", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res \"etag\" setting when \"strong\" should send strong ETag", "req .subdomains when subdomain offset is set otherwise should return an empty array", "Router .use should accept array of middleware", "app.router methods should include UNLOCK", "mvc GET /pet/0/edit should get pet edit page", "res .send() should set body to \"\"", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "route-separation GET /user/:id/edit should get a user to edit", "app.router methods should re-route when method is altered", "req .get(field) should special-case Referer", "res should work when mounted", "app.router case sensitivity should be disabled by default", "res .links(obj) should set Link header field for multiple calls", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "req .stale should return true when the resource is modified", "markdown GET /fail should respond with an error", "app.router methods should reject numbers for app.unlock", "res \"etag\" setting when enabled should send ETag in response to GET request", "res .send(code, number) should send number as json", "Router .param should only call once per request", "error-pages Accept: text/html GET /403 should respond with 403", "res .sendfile(path) with a relative path should serve relative to \"root\"", "Route .VERB should limit to just .VERB", "utils.etag(body, encoding) should support utf8 strings", "res .links(obj) should set Link header field", "params GET /user/9 should fail to find user", "res when accepting text should respond with text", "config .get() when mounted should given precedence to the child", "app.router methods should reject numbers for app.options", "res .send(String) should not override Content-Type", "resource GET /users should respond with all users", "Router FQDN should ignore FQDN in search", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "multi-router GET /api/v2/ should respond with APIv2 root handler", "res .format(obj) with parameters should set the correct charset for the Content-Type", "res .sendFile(path) with \"headers\" option should accept headers option", "req .query when \"query parser\" is a function should parse using function", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .json(object) when given primitives should respond with json for null", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "res .jsonp(object) when given primitives should respond with json for String", "app.router methods should include PROPFIND", "exports should expose Router", "res .render(name) should error without \"view engine\" set and no file extension", "middleware .next() should behave like connect", "req .host should strip port number", "res .json(object) when given primitives should respond with json for String", "app.router methods should reject numbers for app.copy", "app .use(app) should support dynamic routes", "req .xhr should return true when X-Requested-With is xmlhttprequest", "cookie-sessions GET / should display no views", "res .attachment(filename) should set the Content-Type", "app.router methods should reject numbers for app.report", "req .acceptsLanguage should be true if language accepted", "res .sendFile(path) should 404 when not found", "res .sendFile(path, options) should pass options to send module", "res .send(Buffer) should set ETag", "OPTIONS should forward requests down the middleware chain", "Router .multiple callbacks should throw if a callback is not a function", "app.all() should run the callback for a method just once", "req .acceptsLanguage when Accept-Language is not present should always return true", "res .sendfile(path, fn) should utilize the same options as express.static()", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "app .param(fn) should map app.param(name, ...) logic", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "config .get() should otherwise return the value", "web-service GET /api/repos with a valid api key should respond repos json", "res .render(name) should support index.<engine>", "req.is() when given a mime type should ignore charset", "cookies GET /forget should clear cookie", "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise", "req .query should default to parse complex keys", "res .jsonp(object) should respond with jsonp", "web-service GET /api/users without an api key should respond with 400 bad request", "error-pages Accept: text/plain GET /403 should respond with 403", "config .set() should set a value", "Router error should handle throwing inside routes with params", "config .set() should return the app", "req .range(size, options) with \"combine: true\" option should return combined ranges", "mvc PUT /user/:id should 500 on error", "app.router * should not be greedy immediately after param", "req .host should work with IPv6 Host", "res .render(name, option) should give precedence to res.render() locals over app.locals", "res \"etag\" setting when enabled should send ETag in response to COPY request", "content-negotiation GET / should accept to text/plain", "res should be chainable", "app.router methods should reject numbers for app.mkactivity", "app .locals.settings should expose app settings", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be undefined by default", "res .jsonp(object) should use first callback parameter with jsonp", "req .acceptsLanguages should be false if language not accepted", "res .send(String) should set ETag", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "res .sendfile(path) with a relative path should allow ../ when \"root\" is set", "res .type(str) should set the Content-Type with type/subtype", "app.router * should keep correct parameter indexes", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "app .param(name, fn) should only call once per request", "route-separation GET /users should list users", "multi-router GET /api/v1/ should respond with APIv1 root handler", "multi-router GET /api/v2/users should respond with users from APIv2", "Router .use should reject string as middleware", "downloads GET /files/missing.txt should respond with 404", "Router should support .use of other routers", "app.router methods should include HEAD", "app .render(name, fn) caching should cache with \"view cache\" setting", "app.router should run in order added", "res .jsonp(object) should include security header and prologue", "req .query should default to {}", "Router parallel requests should not mix requests", "res .attachment(utf8filename) should set the Content-Type", "res .send(code) should set .statusCode", "res .json(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to LINK request", "req .query when \"query parser fn\" is missing should act like \"extended\"", "res should not support jsonp callbacks", "mvc POST /user/:id/pet should create a pet for user"], "failed_tests": [], "skipped_tests": []}, "instance_id": "expressjs__express-3870"}
{"org": "expressjs", "repo": "express", "number": 3695, "state": "closed", "title": "Add support for throwing in async handlers.", "body": "Adds support for throwing in async handlers without an unhandledPromiseRejectionError warning.\r\n\r\nTested on 8.10.x and made so tests still pass on 0.10.x.\r\n\r\ncloses #3696", "base": {"label": "expressjs:master", "ref": "master", "sha": "3ed5090ca91f6a387e66370d57ead94d886275e1"}, "resolved_issues": [{"number": 3696, "title": "Add support async handlers", "body": "Hi folks,\r\n\r\nI had an idea to support catching errors in an async function without an 'unhandledPromiseRejectionError'.\r\n\r\nThis gives developers the freedom to throw again but also means they don't have to do the following pattern.\r\n\r\n```javascript\r\nasync function (req, res, next) {\r\n  let result;\r\n  try {\r\n    result = await something();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n  res.send(result);\r\n}\r\n```\r\n\r\nThey can instead do:\r\n```javascript\r\nasync function (req, res, next) {\r\n  res.send(await something());\r\n}\r\n```\r\n\r\nPR done as an idea: #3695 \r\n"}], "fix_patch": "diff --git a/lib/router/layer.js b/lib/router/layer.js\nindex 4dc8e86d4f..dce3840dca 100644\n--- a/lib/router/layer.js\n+++ b/lib/router/layer.js\n@@ -67,6 +67,10 @@ Layer.prototype.handle_error = function handle_error(error, req, res, next) {\n     return next(error);\n   }\n \n+  if (fn.constructor.name === 'AsyncFunction') {\n+    return fn(error, req, res, next).catch(next)\n+  }\n+\n   try {\n     fn(error, req, res, next);\n   } catch (err) {\n@@ -90,6 +94,9 @@ Layer.prototype.handle_request = function handle(req, res, next) {\n     // not a standard request handler\n     return next();\n   }\n+  if (fn.constructor.name === 'AsyncFunction') {\n+    return fn(req, res, next).catch(next)\n+  }\n \n   try {\n     fn(req, res, next);\n", "test_patch": "diff --git a/test/Route.js b/test/Route.js\nindex 8f90152d8c..3f70f23de7 100644\n--- a/test/Route.js\n+++ b/test/Route.js\n@@ -1,6 +1,7 @@\n \n var after = require('after');\n var should = require('should');\n+var asyncFunctionsSupported = require('./support/utils').asyncFunctionsSupported;\n var express = require('../')\n   , Route = express.Route\n   , methods = require('methods')\n@@ -187,6 +188,53 @@ describe('Route', function(){\n         done();\n       });\n     });\n+    if (asyncFunctionsSupported()) {\n+      it('should handle throws in asyncFunction', function (done) {\n+        var req = {order: '', method: 'GET', url: '/'};\n+        var route = new Route('');\n+\n+        route.all(new Function([], \"return async function(req, res, next) { throw new Error('foobar') }\")());\n+\n+        route.all(function (req, res, next) {\n+          req.order += '0';\n+          next();\n+        });\n+\n+        route.all(function (err, req, res, next) {\n+          req.order += 'a';\n+          next(err);\n+        });\n+\n+        route.dispatch(req, {}, function (err) {\n+          should(err).be.ok()\n+          should(err.message).equal('foobar');\n+          req.order.should.equal('a');\n+          done();\n+        });\n+      });\n+\n+      it('should handle throwing inside async error handlers', function (done) {\n+        var req = {method: 'GET', url: '/'};\n+        var route = new Route('');\n+\n+        route.get(function (req, res, next) {\n+          throw new Error('boom!');\n+        });\n+\n+        route.get(new Function([], \"return async function(err, req, res, next) { throw new Error('oops') }\")());\n+\n+        route.get(function (err, req, res, next) {\n+          req.message = err.message;\n+          next();\n+        });\n+\n+        route.dispatch(req, {}, function (err) {\n+          if (err) return done(err);\n+          should(req.message).equal('oops');\n+          done();\n+        });\n+      });\n+    }\n \n     it('should handle throwing inside error handlers', function(done) {\n       var req = { method: 'GET', url: '/' };\ndiff --git a/test/support/utils.js b/test/support/utils.js\nindex ec6b801bc0..f7b5caa89e 100644\n--- a/test/support/utils.js\n+++ b/test/support/utils.js\n@@ -10,6 +10,7 @@ var assert = require('assert');\n  * @public\n  */\n exports.shouldNotHaveHeader = shouldNotHaveHeader;\n+exports.asyncFunctionsSupported = asyncFunctionsSupported;\n \n /**\n  * Assert that a supertest response does not have a header.\n@@ -22,3 +23,17 @@ function shouldNotHaveHeader(header) {\n     assert.ok(!(header.toLowerCase() in res.headers), 'should not have header ' + header);\n   };\n }\n+\n+/**\n+ * Determines whether or not current environment supports async/await\n+ *\n+ * @returns {boolean}\n+ */\n+function asyncFunctionsSupported() {\n+  try {\n+    new Function([],\"return async function(){}\");\n+    return true\n+  } catch(e) {\n+    return false\n+  }\n+}\n", "fixed_tests": {"Route errors should handle throws in asyncFunction": {"run": "NONE", "test": "FAIL", "fix": "PASS"}, "Route errors should handle throwing inside async error handlers": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "p2p_tests": {"app should emit \"mount\" when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should accept dotfiles option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first acceptable type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should error missing path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.rebind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) should not support jsonp callbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback when complete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should denote a greedy capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include BIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" disabled should not parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should return the type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .all should be called for any URL when \"*\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MOVE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost example.com GET / should say hello": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET / should respond with root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should return the Host when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /restricted should redirect to /login without cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(names, fn) should map the array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to ACL request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should not override previous Content-Types with no callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should fail without proper username": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should keep charset if not given charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when complete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) signed without secret should throw an error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when disabled should send ETag when manually set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should default to the routes defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.bind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should match a single segment only": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include NOTIFY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncoding should be true if encoding accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should require a preceding /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support buffer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should accept to application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match no slashes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should not override ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should cap to the given size": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return false without response headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should include the redirect type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PUT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .application prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.acl": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should not override Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should work with encoded values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should not throw if all callbacks are functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.proppatch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.subscribe": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKCOL request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id/pets/:pid should get a users pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include DEL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support absolute paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should handle blank URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNBIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return true when Accept is not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PATCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag for empty string response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url with multiple handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.options() should override the default behavior": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject number as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.merge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "in development should disable \"view cache\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support empty string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject Date as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should not override manual content-types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throw in .all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support array of paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when an error occurs should next(err)": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set location from \"Referer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNLINK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first when Accept is not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enabled() should default to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.checkout": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should set a session cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.get": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, options, fn) should pass the resulting string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to OPTIONS request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should not override ETag when manually set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should not accept params in malformed paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when given a regexp should match the pathname only": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes should be optional by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.head": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback without error when HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should give precedence to app.render() locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should always check regardless of length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should work with IPv6 Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should work with unicode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should default to text/html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SUBSCRIBE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should not transfer relative with without": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(status, object) should respond with json and set the .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "ejs GET / should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, fn) when an error occurs should pass it to the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should return type if not given charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MOVE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unlink": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .VERB() should not get invoked without error handler on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should default to http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should be optional": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return true when the resource is not modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should disallow arbitrary js": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) should not override previous Content-Types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params when parent has same number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.put": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given an extension should lookup the mime type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback on socket error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should set charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback without error when 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept nested arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should mount the app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkcol": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work following a partial capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should accept headers option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should restore req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should throw with notice": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name? should denote an optional capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is simple should not parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains with no host should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .all should support using .all to capture all http verbs": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should accept to application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "HEAD should default to GET": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should not decode spaces": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string) should allow multiple calls": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json escape\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name, default) should use the default value unless defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /users should display a list of users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should display 1 view on revisit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.trace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should return the header field value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.notify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /pet/0 should get pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when present should display the user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should work with IPv6 Host and port": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throw": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should not obscure FQDNs": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support array of paths with middleware array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given an object should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to BIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should return the full type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains with trusted X-Forwarded-Host should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .request should extend the request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "throw after .end() should fail gracefully": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should default to the parent app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include POST": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should allow naming": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SEARCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req should accept an argument list of type names": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.parent should return the parent when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) caching should cache with cache option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNSUBSCRIBE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, ".sendfile(path, options) should pass options to send module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should transfer a directory index file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET /next should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol should return the protocol string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to POST request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should skip non error middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should escape the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should transfer a file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should do anything without type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include DELETE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when client already aborted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support mount-points": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should set max-age": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should throw when Content-Type is an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should not invoke without route handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should invoke middleware for all requests starting with path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when the request method is HEAD should ignore the body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should accept array of values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(code, body) should set .statusCode and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should strip path from req.url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET /files/amazing.txt should have a download header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should set the Content-Type based on a filename": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work in array of paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next() is called should continue lookup": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should encode \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should not override manual content-types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MERGE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with an absolute path should transfer the file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is not present should return the remote address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should send as octet-stream": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback without error when HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url, status) should set the response status": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when not present should 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET / should respond with instructions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should escape utf whitespace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support empty string path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should respond with 304 Not Modified when fresh": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "in production should enable \"view cache\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/view should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should defer to next route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should not error if the client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should append multiple headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support buffer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should allow fallthrough": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle single error handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support absolute paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should not be affected by app.all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should decore the capture": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow rewriting of the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SOURCE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support utf8 strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should cap to the given size when open-ended": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject Date as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(err) is called should break out of app.router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should eat everything after /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include ACL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work \"view engine\" with leading \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) should allow options to res.sendFile()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /user/:id should update the user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should return the full type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should call when values differ": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should return the app when undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages should be true if language accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id/pets should get a users pets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should not touch already-encoded sequences in \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should span multiple segments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with a valid api key should respond user repos json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.path() should return the canonical": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call param function when routing VERBS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is extended should parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should return parsed ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /users/foo-bar should fail integer parsing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should only include each method once": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .handle should dispatch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should stack": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages when Accept-Language is not present should always return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /pet/2 should update the pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should work with several": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should map a template engine": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when a \"view\" constructor is given should create an instance of it": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name) should check req.body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should strip port number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when content-type is not present should return false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.locals over app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET /missing should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /posts should get a list of posts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path with non-GET should still serve": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should prefer child \"trust proxy\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given an array should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given when array of paths should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, value) should set the response header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support mounted app anywhere": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should not mutate the options object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should not set a charset of one is already set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should map logic for a single param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /login should display login error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call when values differ": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to NOTIFY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting neither text or html should respond with an empty body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should have a .type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.all() should add a router per method": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "markdown GET / should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should return a new route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id/edit should display the edit form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept nested arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should default to Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should all .VERB after .all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should allow []": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should denote a capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost bar.example.com GET / should redirect to /bar": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept multiple arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should default to application/octet-stream": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should return undefined if no range": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback on 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains otherwise should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should expose res.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should case-insensitive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, object) should generate a JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PROPPATCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should handle missing URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work without leading \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should work with IPv4 address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SEARCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work \"view engine\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(body, code) should be supported for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1 should respond with user 1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MERGE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should coerce to an array of strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support absolute paths with \"view engine\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should handle render error throws": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkcalendar": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should add handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include CHECKOUT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.listen() should wrap with an HTTP server": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should override charset in Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should be called for any URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PUT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not override previous Content-Types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unbind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow escaped regexp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"headers\" option should ignore headers option on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies POST / should set a cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.link": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should travel through routers correctly": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should work with IPv6 address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies POST / should no set cookie w/o reminder": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(object) should coerce to a string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return true without response headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is not present should return []": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set the header to \"/\" without referrer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguage should be false if language not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename) should provide an alternate filename": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .signedCookies should return a signed JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(null) should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should set relative expires": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should 404 without routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should work cross-segment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router .:name? should denote an optional format": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.source": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support absolute paths with \"view engine\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should allow merging existing req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .route should be the executed Route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET / should redirect to /login": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should throw missing header name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /logout should redirect to /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .response should not be influenced by other app protos": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) given .default should be invoked instead of auto-responding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should ignore object callback parameter with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should not send ETag for res.send()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should inherit \"trust proxy\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is missing should return false when http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation POST /user/:id/edit?_method=PUT should edit a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to HEAD request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"view engine\" is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include REPORT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 404 for directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(fn) should fail if not given fn": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route should work without handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work inside literal parenthesis": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should return undefined otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET / should respond with instructions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name) should check req.query": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json for null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept multiple arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject null as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost example.com GET /foo should say foo": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should fail without proper password": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include M-SEARCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"trust proxy\" should set \"trust proxy fn\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given an array should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should ignore FQDN in path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should not call when values differ on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /restricted should succeed with proper cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharset(type) when Accept-Charset is not present should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should restore req.params after leaving router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should transfer the file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should work with cookies": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" an unknown value should throw": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation PUT /user/:id/edit should edit a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for Number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should return a function with router methods": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "without NODE_ENV should default to development": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include REBIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(status, url) should set the response status": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.render() locals over res.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.purge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should ignore headers option on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(undefined) should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with an empty array should not set Vary": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKACTIVITY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should handle VERBS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support index.<engine>": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .response should extend the response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params when more in parent": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map DELETE /users should delete users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(status, object) should respond with json and set the .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SOURCE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.del": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return false when the resource is modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharset(type) when Accept-Charset is not present should return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should require middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag for long response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should take quality into account": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /user/0 should respond with a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include TRACE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET / should redirect to /users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return false when not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) should set params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users with a valid api key should respond users json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Object) should send as application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should 404 for directory without trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should support .get": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should expose app.locals with `name` property": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should respond to cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should transfer a file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should default to text/html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path) should transfer as an attachment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept multiple arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should return the Host when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" disabled should not parse query": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id should 404 on missing user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should allow several capture groups": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when an error occurs should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res on failure should remove Content-Disposition": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback when client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disabled() should default to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should throw when the callback is missing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET / should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.delete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKCALENDAR": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should be chainable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when present should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should throw on old middlewares": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should respond with no cookies": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name) should check req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should work within arrays": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() should return undefined when unset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return false when http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should set the child's .parent": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object, status) should use status as second number for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"view engine\" is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url with multiple routed handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should not touch already-encoded sequences in \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.m-search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages GET / should respond with page list": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service when requesting an invalid route should respond with 404 json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.patch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should contain lower path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle errors via arity 4 functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not perform freshness check unless 2xx or 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.del() should alias app.delete()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .locals should be empty by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource DELETE /users/9 should fail": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.post": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should error without \"view engine\" set and file extension to a non-engine module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .locals(obj) should merge locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1..3.json should respond with users 2 and 3 as json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .status(code) should set the response .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json spaces\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support regexp path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 304 when ETag matches": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource DELETE /users/1 should delete user 1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(object) should set multiple fields": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNLINK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should encode \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should accept to text/plain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when disabled should send no ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object, status) should use status as second number for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should disallow requesting out of \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object, status) should respond with json and set the .statusCode for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(utf8filename) should add the filename and filename* params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support empty string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v1/users should respond with users from APIv1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PROPFIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should keep charset in Content-Type for Buffers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should ignore invalid incoming req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(err) is called should call handler in same route, if exists": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PURGE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should throw for non-string header name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should overwrite existing req.params by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should encode the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router .:name should denote a format": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should transfer a file with urlencoded name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.head() should override": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include LOCK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res on failure should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when an extension is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(\"router\") is called should jump out of router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should support altering req.params across routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should set multiple response header fields": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is extended should parse parameters with dots": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should include ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"etag\" should throw on bad value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should allow renaming callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should use params from router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.isAbsolute() should support windows": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.flatten(arr) should flatten an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .get(field) should get the response header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with an array should set the values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncodingss should be true if encoding accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(\"route\") is called should jump to next route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the application prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(filename) should add the filename param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, value) should coerce to a string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string) should set a cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.propfind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendStatus(statusCode) should work with unknown code": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback when client already aborted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when given a regexp should populate req.params with the captures": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to REPORT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should decode correct params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should invoke middleware for all requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should catch thrown secondary error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should override previous Content-Types with callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unsubscribe": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"etag\" should set \"etag fn\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/9 should respond with error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to TRACE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject number as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing in handler after async param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when present should display the users pets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first acceptable type with canonical mime types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should inherit from event emitter": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKCOL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1..3 should respond with users 1 through 3": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET / should respond with index": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .VERB() should only call an error handling routing callback when an error is propagated": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.isAbsolute() should support unices": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should work with IPv6 Host and port": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should work with res.set(field, val) first": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback without error when 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNBIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should override charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() when the value is present should not add it again": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should catch thrown error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNLOCK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include GET": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.move": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name? should populate the capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given an object should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should not stack overflow with many registered routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when \"weak\" should send weak ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should defer all the param routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when a function should send custom ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when the file does not exist should provide a helpful error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should not respond if the path is not defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept multiple arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when a function should not send falsy ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return false when no match is made": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/view should 404 on missing user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow literal \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PURGE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /login should render login form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call param function when routing middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject null as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncodingss should be false if encoding not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject string as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should return undefined otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should default to a 302 redirect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing inside error handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /users/0-2 should respond with three users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to DELETE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should not error if the client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) caching should always lookup view without cache": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should transfer a file with special characters in string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should be .use()able": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json for Number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should set the header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enable() should set the value to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should send as html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include LINK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should accept any type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should not serve dotfiles": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost foo.example.com GET / should redirect to /foo": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should be empty for top-level route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to LOCK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment() should Content-Disposition to attachment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disabled() should return false when set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users should respond with users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS when error occurs in response handler should pass error to callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .clearCookie(name) should set a cookie passed expiry": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) given .default should work when only .default is provided": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should not escape utf whitespace for json fallback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should default to Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PATCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with a string should set the value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "HEAD should output the same headers as GET requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should call when values differ when using \"next\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should not error on empty routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendStatus(statusCode) should send the status code and message as body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should include the redirect type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should capture everything": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enabled() should return true when set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should be callable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throwing inside error handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, fn) should pass the resulting string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should work if path has trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should next(404) when not found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should require middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should get reset by res.set(field, val)": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with no arguments should not set Vary": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should contain full lower path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.mountpath should return the mounted path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include OPTIONS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disable() should set the value to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.isAbsolute() should support windows unc": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return false when the resource is not modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .clearCookie(name, options) should set the given params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .path should return the parsed pathname": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) signed should generate a signed JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncoding should be false if encoding not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should succeed with proper credentials": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include COPY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should have a form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should serve relative to \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET / should have a link to amazing.txt": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.lock": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when \"strong\" should send strong ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set otherwise should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNLOCK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /pet/0/edit should get pet edit page": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send() should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/edit should get a user to edit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should re-route when method is altered": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should special-case Referer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should work when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity should be disabled by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .links(obj) should set Link header field for multiple calls": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return true when the resource is modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "markdown GET /fail should respond with an error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unlock": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to GET request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(code, number) should send number as json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should only call once per request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should serve relative to \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should limit to just .VERB": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support utf8 strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .links(obj) should set Link header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /user/9 should fail to find user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should respond with text": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should given precedence to the child": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.options": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should not override Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users should respond with all users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should ignore FQDN in search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to REBIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v2/ should respond with APIv2 root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"headers\" option should accept headers option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is a function should parse using function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json for String": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PROPFIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose Router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should error without \"view engine\" set and no file extension": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "middleware .next() should behave like connect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should strip port number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for String": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.copy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return true when X-Requested-With is xmlhttprequest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should display no views": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(filename) should set the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.report": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguage should be true if language accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 404 when not found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, options) should pass options to send module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should set ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should forward requests down the middleware chain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is not a function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.all() should run the callback for a method just once": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguage when Accept-Language is not present should always return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should utilize the same options as express.static()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(fn) should map app.param(name, ...) logic": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set location from \"Referrer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() should otherwise return the value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos with a valid api key should respond repos json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support index.<engine>": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET /forget should clear cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query should default to parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should respond with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should set a value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing inside routes with params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should return the app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size, options) with \"combine: true\" option should return combined ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /user/:id should 500 on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should not be greedy immediately after param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should work with IPv6 Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.render() locals over app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to COPY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should accept to text/plain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should be chainable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkactivity": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .locals.settings should expose app settings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json spaces\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should use first callback parameter with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages should be false if language not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should set ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should allow ../ when \"root\" is set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should set the Content-Type with type/subtype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should keep correct parameter indexes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should prefer \"Referrer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should only call once per request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /users should list users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v1/ should respond with APIv1 root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v2/users should respond with users from APIv2": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject string as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET /files/missing.txt should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should support .use of other routers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) caching should cache with \"view cache\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should run in order added": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should include security header and prologue": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query should default to {}": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router parallel requests should not mix requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(utf8filename) should set the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(code) should set .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json escape\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to LINK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser fn\" is missing should act like \"extended\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not support jsonp callbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc POST /user/:id/pet should create a pet for user": {"run": "PASS", "test": "PASS", "fix": "PASS"}}, "f2p_tests": {"Route errors should handle throws in asyncFunction": {"run": "NONE", "test": "FAIL", "fix": "PASS"}, "Route errors should handle throwing inside async error handlers": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "s2p_tests": {}, "n2p_tests": {}, "run_result": {"passed_count": 850, "failed_count": 0, "skipped_count": 0, "passed_tests": ["app should emit \"mount\" when mounted", "res .jsonp(object) when given primitives should respond with json", "res .sendfile(path) should accept dotfiles option", "req .accepts(types) should return the first acceptable type", "res .sendFile(path) should error missing path", "app.router methods should reject numbers for app.rebind", "res .json(object) should not support jsonp callbacks", "res .sendfile(path, fn) should invoke the callback when complete", "app.router * should denote a greedy capture group", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "app.router methods should include BIND", "req .query when \"query parser\" disabled should not parse complex keys", "Router .multiple callbacks should throw if a callback is undefined", "req.is() when given a mime type should return the type when matching", "Router .all should be called for any URL when \"*\"", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "req .accepts(type) should return false otherwise", "vhost example.com GET / should say hello", "multi-router GET / should respond with root handler", "req .host should return the Host when present", "auth GET /restricted should redirect to /login without cookie", "app .param(names, fn) should map the array", "app.router methods should reject numbers for app.search", "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to ACL request", "res .jsonp(object) should not override previous Content-Types with no callback", "auth POST /login should fail without proper username", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "utils.setCharset(type, charset) should keep charset if not given charset", "res .sendFile(path, fn) should invoke the callback when complete", "res .cookie(name, string, options) signed without secret should throw an error", "res \"etag\" setting when disabled should send ETag when manually set", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.bind", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app.router :name should match a single segment only", "app.router methods should include NOTIFY", "app .render(name, options, fn) should render the template", "req .acceptsEncoding should be true if encoding accepted", "res .format(obj) with parameters should allow wildcard type/subtypes", "app.router * should require a preceding /", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "utils.wetag(body, encoding) should support buffer", "res .format(obj) in router should default the Content-Type", "content-negotiation GET / should accept to application/json", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "res .send(Buffer) should not override ETag", "req .range(size) should cap to the given size", "req .fresh should return false without response headers", "res when accepting text should include the redirect type", "app.router methods should include PUT", "exports should permit modifying the .application prototype", "app.router methods should reject numbers for app.acl", "res .send(Buffer) should not override Content-Type", "app .param(name, fn) should work with encoded values", "app .render(name, fn) should expose app.locals", "Router .multiple callbacks should not throw if all callbacks are functions", "app.router methods should reject numbers for app.proppatch", "res .format(obj) in router when Accept is not present should invoke the first callback", "app.router methods should reject numbers for app.subscribe", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "route-map GET /users/:id/pets/:pid should get a users pet", "app.router methods should include DEL", "res .render(name) should support absolute paths", "Router should handle blank URL", "app.router methods should include UNBIND", "req .accepts(type) should return true when Accept is not present", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "res \"etag\" setting when enabled should send ETag for empty string response", "Router FQDN should adjust FQDN req.url with multiple handlers", "app.options() should override the default behavior", "Router .use should reject number as middleware", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.merge", "in development should disable \"view cache\"", "utils.etag(body, encoding) should support empty string", "Router .use should reject Date as middleware", "res .sendFile(path) should not override manual content-types", "Route errors should handle throw in .all", "app .use(path, middleware) should support array of paths", "res .render(name) when an error occurs should next(err)", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "req .accepts(types) should return the first when Accept is not present", "config .enabled() should default to false", "app.router methods should reject numbers for app.checkout", "cookie-sessions GET / should set a session cookie", "app.router methods should reject numbers for app.get", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "res .render(name, options, fn) should pass the resulting string", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "res \"etag\" setting when enabled should not override ETag when manually set", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "app.router decode params should not accept params in malformed paths", "app.router when given a regexp should match the pathname only", "error-pages Accept: application/json GET /404 should respond with 404", "app.router trailing slashes should be optional by default", "app.router methods should reject numbers for app.head", "res .sendfile(path, fn) should invoke the callback without error when HEAD", "app .render(name, options, fn) should give precedence to app.render() locals", "res should always check regardless of length", "req .hostname should work with IPv6 Host", "app.router decode params should work with unicode", "content-negotiation GET / should default to text/html", "app.router methods should include SUBSCRIBE", "res .sendFile(path) with \"root\" option should not transfer relative with without", "res .jsonp(status, object) should respond with json and set the .statusCode", "req.is() when given */subtype should return false when not matching", "ejs GET / should respond with html", "res .render(name, fn) when an error occurs should pass it to the callback", "utils.setCharset(type, charset) should return type if not given charset", "app.router methods should include MOVE", "app.router methods should reject numbers for app.unlink", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "app .VERB() should not get invoked without error handler on error", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router * should be optional", "req .fresh should return true when the resource is not modified", "res .jsonp(object) should disallow arbitrary js", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "res .render(name, option) should render the template", "res .json(object) should not override previous Content-Types", "app.router params should merge numeric indices req.params when parent has same number", "app.router methods should reject numbers for app.put", "req.is() when given an extension should lookup the mime type", "res .sendfile(path, fn) should invoke the callback on socket error", "utils.setCharset(type, charset) should set charset", "res .sendfile(path, fn) should invoke the callback without error when 304", "app .use(middleware) should accept nested arrays of middleware", "app .use(app) should mount the app", "app.router methods should reject numbers for app.mkcol", "app.router :name should work following a partial capture group", "res .sendfile(path) should accept headers option", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app.router params should restore req.params", "app.router should throw with notice", "app.router :name? should denote an optional capture group", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains with no host should return an empty array", "Router .all should support using .all to capture all http verbs", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "content-negotiation GET /users should accept to application/json", "HEAD should default to GET", "res .format(obj) with extnames should set the correct charset for the Content-Type", "res .format(obj) with parameters should Vary: Accept", "exports should permit modifying the .response prototype", "app.router decode params should not decode spaces", "res .cookie(name, string) should allow multiple calls", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "res .jsonp(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "req .param(name, default) should use the default value unless defined", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "mvc GET /users should display a list of users", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "cookie-sessions GET / should display 1 view on revisit", "app.router methods should reject numbers for app.trace", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "req .get(field) should return the header field value", "app.router methods should reject numbers for app.notify", "mvc GET /pet/0 should get pet", "mvc GET /user/:id when present should display the user", "req .hostname should work with IPv6 Host and port", "Route errors should handle throw", "Router FQDN should not obscure FQDNs", "app .use(path, middleware) should support array of paths with middleware array", "res .jsonp(object) when given an object should respond with json", "res \"etag\" setting when enabled should send ETag in response to BIND request", "req.is() when given type/* should return the full type when matching", "req .subdomains with trusted X-Forwarded-Host should return an array", "app .request should extend the request prototype", "throw after .end() should fail gracefully", "config .get() when mounted should default to the parent app", "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set", "app.router methods should include POST", "app.router * should allow naming", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "req should accept an argument list of type names", "app.parent should return the parent when mounted", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should include UNSUBSCRIBE", ".sendfile(path, options) should pass options to send module", "Router FQDN should adjust FQDN req.url", "res .sendfile(path) should transfer a directory index file", "error GET /next should respond with 500", "req .protocol should return the protocol string", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "res \"etag\" setting when enabled should send ETag in response to POST request", "Router error should skip non error middleware", "res when accepting html should escape the url", "res .sendfile(path) should transfer a file", "req .xhr should return false otherwise", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "utils.setCharset(type, charset) should do anything without type", "app.router methods should include DELETE", "res .sendFile(path, fn) should invoke the callback when client already aborted", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "app .use(app) should support mount-points", "res .cookie(name, string, options) maxAge should set max-age", "res .set(field, values) should throw when Content-Type is an array", "app .param(name, fn) should not invoke without route handler", "app .use(path, middleware) should invoke middleware for all requests starting with path", "res when the request method is HEAD should ignore the body", "res .append(field, val) should accept array of values", "res .send(code, body) should set .statusCode and body", "app .use(path, middleware) should strip path from req.url", "res .format(obj) in router should set the correct charset for the Content-Type", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "downloads GET /files/amazing.txt should have a download header", "res .type(str) should set the Content-Type based on a filename", "app.router :name should work in array of paths", "res .download(path, filename, options, fn) should invoke the callback", "app.router when next() is called should continue lookup", "res .redirect(url) should encode \"url\"", "res .sendfile(path, fn) should not override manual content-types", "app.router methods should include MERGE", "res .sendfile(path) with an absolute path should transfer the file", "req .ip when X-Forwarded-For is not present should return the remote address", "res .send(Buffer) should send as octet-stream", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "res .redirect(url, status) should set the response status", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "mvc GET /user/:id when not present should 404", "resource GET / should respond with instructions", "res .jsonp(object) should escape utf whitespace", "app .use(path, middleware) should support empty string path", "res should respond with 304 Not Modified when fresh", "in production should enable \"view cache\"", "route-separation GET /user/:id/view should get a user", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "app .param(name, fn) should defer to next route", "res .sendfile(path) should not error if the client aborts", "res .append(field, val) should append multiple headers", "utils.etag(body, encoding) should support buffer", "Route .VERB should allow fallthrough", "Route errors should handle single error handler", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app .render(name, fn) should support absolute paths", "OPTIONS should not be affected by app.all", "app.router * should decore the capture", "app.router should allow rewriting of the url", "app.router methods should include SOURCE", "utils.wetag(body, encoding) should support utf8 strings", "req .range(size) should cap to the given size when open-ended", "app .use(path, middleware) should reject Date as middleware", "app.router when next(err) is called should break out of app.router", "app.router * should eat everything after /", "app.router methods should include ACL", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "mvc PUT /user/:id should update the user", "req.is() when given */subtype should return the full type when matching", "app .param(name, fn) should call when values differ", "config .set() should return the app when undefined", "req .acceptsLanguages should be true if language accepted", "route-map GET /users/:id/pets should get a users pets", "res .location(url) should not touch already-encoded sequences in \"url\"", "app.router * should span multiple segments", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "app.path() should return the canonical", "Router .param should call param function when routing VERBS", "req .query when \"query parser\" is extended should parse complex keys", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "req .range(size) should return parsed ranges", "params GET /users/foo-bar should fail integer parsing", "OPTIONS should only include each method once", "Router .handle should dispatch", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "Route .all should stack", "req .acceptsLanguages when Accept-Language is not present should always return true", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "mvc PUT /pet/2 should update the pet", "app.router * should work with several", "res .format(obj) in router should utilize qvalues in negotiation", "app .engine(ext, fn) should map a template engine", "error-pages Accept: text/html GET /404 should respond with 404", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "req .param(name) should check req.body", "req .hostname should strip port number", "req.is() when content-type is not present should return false", "res .render(name, option) should give precedence to res.locals over app.locals", "res .format(obj) with parameters should default the Content-Type", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively", "error GET /missing should respond with 404", "route-separation GET /posts should get a list of posts", "res .sendfile(path) with a relative path with non-GET should still serve", "config .get() when mounted should prefer child \"trust proxy\" setting", "res .json(object) when given an array should respond with json", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "error-pages Accept: application/json GET /403 should respond with 403", "res .set(field, value) should set the response header field", "exports should expose the request prototype", "app .use(app) should support mounted app anywhere", "res .cookie(name, string, options) maxAge should not mutate the options object", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "res .set(field, values) should not set a charset of one is already set", "app .param(name, fn) should map logic for a single param", "auth GET /login should display login error", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "Router .param should call when values differ", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "res when accepting neither text or html should respond with an empty body", "req .range(size) should have a .type", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "app.all() should add a router per method", "markdown GET / should respond with html", "app.route should return a new route", "mvc GET /user/:id/edit should display the edit form", "app .use(path, middleware) should accept nested arrays of middleware", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "req .host when \"trust proxy\" is enabled should default to Host", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "res .format(obj) with canonicalized mime types should Vary: Accept", "app.route should all .VERB after .all", "res .jsonp(object) should allow []", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "app.router :name should denote a capture group", "vhost bar.example.com GET / should redirect to /bar", "app .use(path, middleware) should accept multiple arrays of middleware", "res .type(str) should default to application/octet-stream", "req .range(size) should return undefined if no range", "res .sendfile(path, fn) should invoke the callback on 403", "req .subdomains otherwise should return an empty array", "res .render(name, option) should expose res.locals", "req .xhr should case-insensitive", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "res .cookie(name, object) should generate a JSON cookie", "app.router methods should include PROPPATCH", "Router should handle missing URL", "app .engine(ext, fn) should work without leading \".\"", "req .subdomains when present should work with IPv4 address", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "app.router methods should include SEARCH", "app .engine(ext, fn) should work \"view engine\" setting", "res .send(body, code) should be supported for backwards compat", "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat", "resource GET /users/1 should respond with user 1", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "res .set(field, values) should coerce to an array of strings", "app .render(name, fn) should support absolute paths with \"view engine\"", "app .render(name, fn) should handle render error throws", "app.router methods should reject numbers for app.mkcalendar", "Route .all should add handler", "app.router methods should include CHECKOUT", "app.listen() should wrap with an HTTP server", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .send(String) should override charset in Content-Type", "Router .use should be called for any URL", "res \"etag\" setting when enabled should send ETag in response to PUT request", "res should not override previous Content-Types", "app.router methods should reject numbers for app.unbind", "app.router should allow escaped regexp", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "cookies POST / should set a cookie", "app.router methods should reject numbers for app.link", "req .baseUrl should travel through routers correctly", "res .sendfile(path, fn) should invoke the callback on 404", "req .subdomains when present should work with IPv6 address", "cookies POST / should no set cookie w/o reminder", "res .set(object) should coerce to a string", "req .stale should return true without response headers", "req .ips when X-Forwarded-For is not present should return []", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "req .acceptsLanguage should be false if language not accepted", "res .download(path, filename) should provide an alternate filename", "req .signedCookies should return a signed JSON cookie", "res .send(null) should set body to \"\"", "res .cookie(name, string, options) maxAge should set relative expires", "app should 404 without routes", "app.router * should work cross-segment", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "app.router .:name? should denote an optional format", "app.router methods should reject numbers for app.source", "res .render(name) should support absolute paths with \"view engine\"", "app.router params should allow merging existing req.params", "req .route should be the executed Route", "auth GET / should redirect to /login", "req .get(field) should throw missing header name", "auth GET /logout should redirect to /", "app .response should not be influenced by other app protos", "res .format(obj) given .default should be invoked instead of auto-responding", "res .jsonp(object) should ignore object callback parameter with jsonp", "res \"etag\" setting when enabled should not send ETag for res.send()", "config .get() when mounted should inherit \"trust proxy\" setting", "req .secure when X-Forwarded-Proto is missing should return false when http", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app .render(name, fn) when \"view engine\" is given should render the template", "res .format(obj) in router should allow wildcard type/subtypes", "app.router methods should include REPORT", "res .sendFile(path) should 404 for directory", "app .param(fn) should fail if not given fn", "Route should work without handlers", "app.router :name should work inside literal parenthesis", "req .host should return undefined otherwise", "res .download(path, fn) should invoke the callback", "params GET / should respond with instructions", "req .param(name) should check req.query", "res .jsonp(object) when given primitives should respond with json for null", "app .use(middleware) should accept multiple arguments", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "Router .use should reject null as middleware", "vhost example.com GET /foo should say foo", "auth POST /login should fail without proper password", "app.route should support dynamic routes", "app.router methods should include M-SEARCH", "route-separation GET /user/:id should get a user", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "res .jsonp(object) when given an array should respond with json", "Router FQDN should ignore FQDN in path", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "app .param(name, fn) should not call when values differ on error", "auth GET /restricted should succeed with proper cookie", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "route-map GET /users/:id should get a user", "req .acceptsCharset(type) when Accept-Charset is not present should return true when present", "app.router should restore req.params after leaving router", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .sendfile(path) with a relative path should transfer the file", "res .append(field, val) should work with cookies", "req .query when \"query parser\" an unknown value should throw", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "route-separation PUT /user/:id/edit should edit a user", "res .json(object) when given primitives should respond with json for Number", "Router should return a function with router methods", "without NODE_ENV should default to development", "exports should permit modifying the .request prototype", "app.router methods should include REBIND", "res .redirect(status, url) should set the response status", "res .render(name, option) should give precedence to res.render() locals over res.locals", "app.router methods should reject numbers for app.purge", "res .sendfile(path) should ignore headers option on 404", "res .send(undefined) should set body to \"\"", "res.vary() with an empty array should not set Vary", "app.router methods should include MKACTIVITY", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "Route .all should handle VERBS", "app .render(name, fn) should support index.<engine>", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "app .response should extend the response prototype", "app.router params should merge numeric indices req.params when more in parent", "route-map DELETE /users should delete users", "res .json(status, object) should respond with json and set the .statusCode", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "app.router methods should reject numbers for app.del", "req .fresh should return false when the resource is modified", "req .acceptsCharset(type) when Accept-Charset is not present should return true", "req.is() when given a mime type should return false when not matching", "res when accepting html should respond with html", "res .format(obj) with extnames should default the Content-Type", "app .use(path, middleware) should require middleware", "res \"etag\" setting when enabled should send ETag for long response", "req .accepts(types) should take quality into account", "params GET /user/0 should respond with a user", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include TRACE", "mvc GET / should redirect to /users", "req .xhr should return false when not present", "res .cookie(name, string, options) should set params", "web-service GET /api/users with a valid api key should respond users json", "res .send(Object) should send as application/json", "res .sendfile(path) should 404 for directory without trailing slash", "Route .VERB should support .get", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .render(name) should expose app.locals with `name` property", "cookies GET / should respond to cookie", "res .sendFile(path) should transfer a file", "content-negotiation GET /users should default to text/html", "res .download(path) should transfer as an attachment", "app .use(path, middleware) should accept multiple arguments", "req .hostname should return the Host when present", "req .query when \"query parser\" disabled should not parse query", "route-separation GET /user/:id should 404 on missing user", "req.is() when given */subtype should ignore charset", "app.router :name should allow several capture groups", "app .render(name, fn) when an error occurs should invoke the callback", "res on failure should remove Content-Disposition", "res .sendfile(path, fn) should invoke the callback when client aborts", "config .disabled() should default to true", "app .engine(ext, fn) should throw when the callback is missing", "app .use(path, middleware) should accept array of middleware", "res .render(name, option) should expose app.locals", "error GET / should respond with 500", "Router should support dynamic routes", "app.router methods should reject numbers for app.delete", "app.router methods should include MKCALENDAR", "app.router should be chainable", "utils.etag(body, encoding) should support strings", "req .subdomains when subdomain offset is set when present should return an array", "exports should throw on old middlewares", "cookies GET / should respond with no cookies", "req .param(name) should check req.params", "app.router * should work within arrays", "config .get() should return undefined when unset", "req .secure when X-Forwarded-Proto is present should return false when http", "app .use(app) should set the child's .parent", "res .format(obj) with canonicalized mime types should default the Content-Type", "res .json(object, status) should use status as second number for backwards compat", "res .render(name) when \"view engine\" is given should render the template", "res .format(obj) with extnames should Vary: Accept", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "app.router methods should reject numbers for app.m-search", "error-pages GET / should respond with page list", "error-pages Accept: text/plain GET /404 should respond with 404", "web-service when requesting an invalid route should respond with 404 json", "app.router methods should reject numbers for app.patch", "req .baseUrl should contain lower path", "error-pages Accept: text/plain GET /500 should respond with 500", "Route errors should handle errors via arity 4 functions", "res should not perform freshness check unless 2xx or 304", "app.del() should alias app.delete()", "res .locals should be empty by default", "resource DELETE /users/9 should fail", "app.router methods should reject numbers for app.post", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "app .locals(obj) should merge locals", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "res .status(code) should set the response .statusCode", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app .use(path, middleware) should support regexp path", "res .sendFile(path) should 304 when ETag matches", "res .sendFile(path, fn) should invoke the callback when client aborts", "resource DELETE /users/1 should delete user 1", "res .set(object) should set multiple fields", "app.router methods should include UNLINK", "res .location(url) should encode \"url\"", "content-negotiation GET /users should accept to text/plain", "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise", "res \"etag\" setting when disabled should send no ETag", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "res .jsonp(object, status) should use status as second number for backwards compat", "res .sendfile(path) with a relative path should disallow requesting out of \"root\"", "res .json(object, status) should respond with json and set the .statusCode for backwards compat", "res .attachment(utf8filename) should add the filename and filename* params", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "utils.wetag(body, encoding) should support empty string", "multi-router GET /api/v1/users should respond with users from APIv1", "res .format(obj) with parameters should utilize qvalues in negotiation", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "res .send(String) should keep charset in Content-Type for Buffers", "app.router params should ignore invalid incoming req.params", "res .render(name) when \"views\" is given should lookup the file in the path", "app.router when next(err) is called should call handler in same route, if exists", "exports should expose the response prototype", "res .format(obj) with extnames should utilize qvalues in negotiation", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "app.router methods should include PURGE", "req .get(field) should throw for non-string header name", "app.router params should overwrite existing req.params by default", "res when accepting text should encode the url", "app.router .:name should denote a format", "res .sendfile(path) should transfer a file with urlencoded name", "res .format(obj) with extnames should allow wildcard type/subtypes", "app.head() should override", "app.router methods should include LOCK", "res on failure should invoke the callback", "app .render(name, fn) when an extension is given should render the template", "app.router when next(\"router\") is called should jump out of router", "app .param(name, fn) should support altering req.params across routes", "res .set(field, values) should set multiple response header fields", "req .query when \"query parser\" is extended should parse parameters with dots", "res .sendFile(path) should include ETag", "config .set() \"etag\" should throw on bad value", "res .download(path, filename, fn) should invoke the callback", "utils.wetag(body, encoding) should support strings", "res .jsonp(object) should allow renaming callback", "app.router params should use params from router", "utils.isAbsolute() should support windows", "utils.flatten(arr) should flatten an array", "res .get(field) should get the response header field", "res.vary() with an array should set the values", "req .acceptsEncodingss should be true if encoding accepted", "app.router when next(\"route\") is called should jump to next route", "exports should expose the application prototype", "res .attachment(filename) should add the filename param", "res .set(field, value) should coerce to a string", "res .cookie(name, string) should set a cookie", "app.router methods should reject numbers for app.propfind", "res .sendStatus(statusCode) should work with unknown code", "res .sendfile(path, fn) should invoke the callback when client already aborted", "app.router when given a regexp should populate req.params with the captures", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "app.router decode params should decode correct params", "app .use(middleware) should invoke middleware for all requests", "app .param(name, fn) should catch thrown secondary error", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "res .jsonp(object) should override previous Content-Types with callback", "app.router methods should reject numbers for app.unsubscribe", "config .set() \"etag\" should set \"etag fn\"", "resource GET /users/9 should respond with error", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "app .use(path, middleware) should reject number as middleware", "Router error should handle throwing in handler after async param", "mvc GET /user/:id when present should display the users pets", "req .accepts(types) should return the first acceptable type with canonical mime types", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "app should inherit from event emitter", "app.router methods should include MKCOL", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "resource GET /users/1..3 should respond with users 1 through 3", "route-separation GET / should respond with index", "app .VERB() should only call an error handling routing callback when an error is propagated", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "utils.isAbsolute() should support unices", "req .host should work with IPv6 Host and port", "res .append(field, val) should work with res.set(field, val) first", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .sendFile(path, fn) should invoke the callback without error when 304", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "utils.setCharset(type, charset) should override charset", "res.vary() when the value is present should not add it again", "app .param(name, fn) should catch thrown error", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "error-pages Accept: application/json GET /500 should respond with 500", "app.router methods should include GET", "app.router methods should reject numbers for app.move", "app.router :name? should populate the capture group", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "res .json(object) when given an object should respond with json", "Router should not stack overflow with many registered routes", "res \"etag\" setting when \"weak\" should send weak ETag", "app .param(name, fn) should defer all the param routes", "res \"etag\" setting when a function should send custom ETag", "app .render(name, fn) when the file does not exist should provide a helpful error", "OPTIONS should not respond if the path is not defined", "app .use(middleware) should accept multiple arrays of middleware", "res \"etag\" setting when a function should not send falsy ETag", "req .accepts(types) should return false when no match is made", "route-separation GET /user/:id/view should 404 on missing user", "app .use(middleware) should accept array of middleware", "app.router should allow literal \".\"", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "auth GET /login should render login form", "Router .param should call param function when routing middleware", "app .use(path, middleware) should reject null as middleware", "req .acceptsEncodingss should be false if encoding not accepted", "req .accepts(type) should return true when present", "app .use(path, middleware) should reject string as middleware", "req .hostname should return undefined otherwise", "res .redirect(url) should default to a 302 redirect", "Router error should handle throwing inside error handlers", "res .render(name) should expose app.locals", "params GET /users/0-2 should respond with three users", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "res .sendFile(path) should not error if the client aborts", "app .render(name, fn) caching should always lookup view without cache", "res .sendFile(path) should transfer a file with special characters in string", "app.router should be .use()able", "res .jsonp(object) when given primitives should respond with json for Number", "res .location(url) should set the header", "config .enable() should set the value to true", "res .send(String) should send as html", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should include LINK", "req .range(size) should accept any type", "req.is() when given type/* should return false when not matching", "res .sendfile(path) should not serve dotfiles", "vhost foo.example.com GET / should redirect to /foo", "req .baseUrl should be empty for top-level route", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "res .attachment() should Content-Disposition to attachment", "config .disabled() should return false when set", "route-map GET /users should respond with users", "req.is() when given type/* should ignore charset", "OPTIONS when error occurs in response handler should pass error to callback", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .clearCookie(name) should set a cookie passed expiry", "Router .multiple callbacks should throw if a callback is null", "res .format(obj) given .default should work when only .default is provided", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored", "res .jsonp(object) should not escape utf whitespace for json fallback", "req .hostname when \"trust proxy\" is enabled should default to Host", "app.router methods should include PATCH", "res.vary() with a string should set the value", "HEAD should output the same headers as GET requests", "app .param(name, fn) should call when values differ when using \"next\"", "app.route should not error on empty routes", "res .sendStatus(statusCode) should send the status code and message as body", "res when accepting html should include the redirect type", "app.router * should capture everything", "config .enabled() should return true when set", "app should be callable", "Route errors should handle throwing inside error handlers", "res .render(name, fn) should pass the resulting string", "app .use(path, middleware) should work if path has trailing slash", "res .sendfile(path) with a relative path should next(404) when not found", "Router .use should require middleware", "res .append(field, val) should get reset by res.set(field, val)", "res.vary() with no arguments should not set Vary", "req .baseUrl should contain full lower path", "app.mountpath should return the mounted path", "app.router methods should include OPTIONS", "app.router params should merge numeric indices req.params", "config .disable() should set the value to false", "res \"etag\" setting when enabled should send ETag", "utils.isAbsolute() should support windows unc", "req .stale should return false when the resource is not modified", "res .clearCookie(name, options) should set the given params", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "res .format(obj) in router should Vary: Accept", "req .path should return the parsed pathname", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "error-pages Accept: text/html GET /500 should respond with 500", "req .acceptsEncoding should be false if encoding not accepted", "req .subdomains when present should return an array", "auth POST /login should succeed with proper credentials", "app.router methods should include COPY", "cookies GET / should have a form", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "res .sendFile(path, fn) should invoke the callback on 404", "downloads GET / should have a link to amazing.txt", "app.router methods should reject numbers for app.lock", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res \"etag\" setting when \"strong\" should send strong ETag", "req .subdomains when subdomain offset is set otherwise should return an empty array", "Router .use should accept array of middleware", "app.router methods should include UNLOCK", "mvc GET /pet/0/edit should get pet edit page", "res .send() should set body to \"\"", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "route-separation GET /user/:id/edit should get a user to edit", "app.router methods should re-route when method is altered", "req .get(field) should special-case Referer", "res should work when mounted", "app.router case sensitivity should be disabled by default", "res .links(obj) should set Link header field for multiple calls", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "req .stale should return true when the resource is modified", "markdown GET /fail should respond with an error", "app.router methods should reject numbers for app.unlock", "res \"etag\" setting when enabled should send ETag in response to GET request", "res .send(code, number) should send number as json", "Router .param should only call once per request", "error-pages Accept: text/html GET /403 should respond with 403", "res .sendfile(path) with a relative path should serve relative to \"root\"", "Route .VERB should limit to just .VERB", "utils.etag(body, encoding) should support utf8 strings", "res .links(obj) should set Link header field", "params GET /user/9 should fail to find user", "res when accepting text should respond with text", "config .get() when mounted should given precedence to the child", "app.router methods should reject numbers for app.options", "res .send(String) should not override Content-Type", "resource GET /users should respond with all users", "Router FQDN should ignore FQDN in search", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "multi-router GET /api/v2/ should respond with APIv2 root handler", "res .format(obj) with parameters should set the correct charset for the Content-Type", "res .sendFile(path) with \"headers\" option should accept headers option", "req .query when \"query parser\" is a function should parse using function", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .json(object) when given primitives should respond with json for null", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "res .jsonp(object) when given primitives should respond with json for String", "app.router methods should include PROPFIND", "exports should expose Router", "res .render(name) should error without \"view engine\" set and no file extension", "middleware .next() should behave like connect", "req .host should strip port number", "res .json(object) when given primitives should respond with json for String", "app.router methods should reject numbers for app.copy", "app .use(app) should support dynamic routes", "req .xhr should return true when X-Requested-With is xmlhttprequest", "cookie-sessions GET / should display no views", "res .attachment(filename) should set the Content-Type", "app.router methods should reject numbers for app.report", "req .acceptsLanguage should be true if language accepted", "res .sendFile(path) should 404 when not found", "res .sendFile(path, options) should pass options to send module", "res .send(Buffer) should set ETag", "OPTIONS should forward requests down the middleware chain", "Router .multiple callbacks should throw if a callback is not a function", "app.all() should run the callback for a method just once", "req .acceptsLanguage when Accept-Language is not present should always return true", "res .sendfile(path, fn) should utilize the same options as express.static()", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "app .param(fn) should map app.param(name, ...) logic", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "config .get() should otherwise return the value", "web-service GET /api/repos with a valid api key should respond repos json", "res .render(name) should support index.<engine>", "req.is() when given a mime type should ignore charset", "cookies GET /forget should clear cookie", "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise", "req .query should default to parse complex keys", "res .jsonp(object) should respond with jsonp", "web-service GET /api/users without an api key should respond with 400 bad request", "error-pages Accept: text/plain GET /403 should respond with 403", "config .set() should set a value", "Router error should handle throwing inside routes with params", "config .set() should return the app", "req .range(size, options) with \"combine: true\" option should return combined ranges", "mvc PUT /user/:id should 500 on error", "app.router * should not be greedy immediately after param", "req .host should work with IPv6 Host", "res .render(name, option) should give precedence to res.render() locals over app.locals", "res \"etag\" setting when enabled should send ETag in response to COPY request", "content-negotiation GET / should accept to text/plain", "res should be chainable", "app.router methods should reject numbers for app.mkactivity", "app .locals.settings should expose app settings", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be undefined by default", "res .jsonp(object) should use first callback parameter with jsonp", "req .acceptsLanguages should be false if language not accepted", "res .send(String) should set ETag", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "res .sendfile(path) with a relative path should allow ../ when \"root\" is set", "res .type(str) should set the Content-Type with type/subtype", "app.router * should keep correct parameter indexes", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "app .param(name, fn) should only call once per request", "route-separation GET /users should list users", "multi-router GET /api/v1/ should respond with APIv1 root handler", "multi-router GET /api/v2/users should respond with users from APIv2", "Router .use should reject string as middleware", "downloads GET /files/missing.txt should respond with 404", "Router should support .use of other routers", "app.router methods should include HEAD", "app .render(name, fn) caching should cache with \"view cache\" setting", "app.router should run in order added", "res .jsonp(object) should include security header and prologue", "req .query should default to {}", "Router parallel requests should not mix requests", "res .attachment(utf8filename) should set the Content-Type", "res .send(code) should set .statusCode", "res .json(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to LINK request", "req .query when \"query parser fn\" is missing should act like \"extended\"", "res should not support jsonp callbacks", "mvc POST /user/:id/pet should create a pet for user"], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 850, "failed_count": 2, "skipped_count": 0, "passed_tests": ["app should emit \"mount\" when mounted", "res .jsonp(object) when given primitives should respond with json", "res .sendfile(path) should accept dotfiles option", "req .accepts(types) should return the first acceptable type", "res .sendFile(path) should error missing path", "app.router methods should reject numbers for app.rebind", "res .json(object) should not support jsonp callbacks", "res .sendfile(path, fn) should invoke the callback when complete", "app.router * should denote a greedy capture group", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "app.router methods should include BIND", "req .query when \"query parser\" disabled should not parse complex keys", "Router .multiple callbacks should throw if a callback is undefined", "req.is() when given a mime type should return the type when matching", "Router .all should be called for any URL when \"*\"", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "req .accepts(type) should return false otherwise", "vhost example.com GET / should say hello", "multi-router GET / should respond with root handler", "req .host should return the Host when present", "auth GET /restricted should redirect to /login without cookie", "app .param(names, fn) should map the array", "app.router methods should reject numbers for app.search", "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to ACL request", "res .jsonp(object) should not override previous Content-Types with no callback", "auth POST /login should fail without proper username", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "utils.setCharset(type, charset) should keep charset if not given charset", "res .sendFile(path, fn) should invoke the callback when complete", "res .cookie(name, string, options) signed without secret should throw an error", "res \"etag\" setting when disabled should send ETag when manually set", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.bind", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app.router :name should match a single segment only", "app.router methods should include NOTIFY", "app .render(name, options, fn) should render the template", "req .acceptsEncoding should be true if encoding accepted", "res .format(obj) with parameters should allow wildcard type/subtypes", "app.router * should require a preceding /", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "utils.wetag(body, encoding) should support buffer", "res .format(obj) in router should default the Content-Type", "content-negotiation GET / should accept to application/json", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "res .send(Buffer) should not override ETag", "req .range(size) should cap to the given size", "req .fresh should return false without response headers", "res when accepting text should include the redirect type", "app.router methods should include PUT", "exports should permit modifying the .application prototype", "app.router methods should reject numbers for app.acl", "res .send(Buffer) should not override Content-Type", "app .param(name, fn) should work with encoded values", "app .render(name, fn) should expose app.locals", "Router .multiple callbacks should not throw if all callbacks are functions", "app.router methods should reject numbers for app.proppatch", "res .format(obj) in router when Accept is not present should invoke the first callback", "app.router methods should reject numbers for app.subscribe", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "route-map GET /users/:id/pets/:pid should get a users pet", "app.router methods should include DEL", "res .render(name) should support absolute paths", "Router should handle blank URL", "app.router methods should include UNBIND", "req .accepts(type) should return true when Accept is not present", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "res \"etag\" setting when enabled should send ETag for empty string response", "Router FQDN should adjust FQDN req.url with multiple handlers", "app.options() should override the default behavior", "Router .use should reject number as middleware", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.merge", "in development should disable \"view cache\"", "utils.etag(body, encoding) should support empty string", "Router .use should reject Date as middleware", "res .sendFile(path) should not override manual content-types", "Route errors should handle throw in .all", "app .use(path, middleware) should support array of paths", "res .render(name) when an error occurs should next(err)", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "req .accepts(types) should return the first when Accept is not present", "config .enabled() should default to false", "app.router methods should reject numbers for app.checkout", "cookie-sessions GET / should set a session cookie", "app.router methods should reject numbers for app.get", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "res .render(name, options, fn) should pass the resulting string", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "res \"etag\" setting when enabled should not override ETag when manually set", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "app.router decode params should not accept params in malformed paths", "app.router when given a regexp should match the pathname only", "error-pages Accept: application/json GET /404 should respond with 404", "app.router trailing slashes should be optional by default", "app.router methods should reject numbers for app.head", "res .sendfile(path, fn) should invoke the callback without error when HEAD", "app .render(name, options, fn) should give precedence to app.render() locals", "res should always check regardless of length", "req .hostname should work with IPv6 Host", "app.router decode params should work with unicode", "content-negotiation GET / should default to text/html", "app.router methods should include SUBSCRIBE", "res .sendFile(path) with \"root\" option should not transfer relative with without", "res .jsonp(status, object) should respond with json and set the .statusCode", "req.is() when given */subtype should return false when not matching", "ejs GET / should respond with html", "res .render(name, fn) when an error occurs should pass it to the callback", "utils.setCharset(type, charset) should return type if not given charset", "app.router methods should include MOVE", "app.router methods should reject numbers for app.unlink", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "app .VERB() should not get invoked without error handler on error", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router * should be optional", "req .fresh should return true when the resource is not modified", "res .jsonp(object) should disallow arbitrary js", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "res .render(name, option) should render the template", "res .json(object) should not override previous Content-Types", "app.router params should merge numeric indices req.params when parent has same number", "app.router methods should reject numbers for app.put", "req.is() when given an extension should lookup the mime type", "res .sendfile(path, fn) should invoke the callback on socket error", "utils.setCharset(type, charset) should set charset", "res .sendfile(path, fn) should invoke the callback without error when 304", "app .use(middleware) should accept nested arrays of middleware", "app .use(app) should mount the app", "app.router methods should reject numbers for app.mkcol", "app.router :name should work following a partial capture group", "res .sendfile(path) should accept headers option", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app.router params should restore req.params", "app.router should throw with notice", "app.router :name? should denote an optional capture group", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains with no host should return an empty array", "Router .all should support using .all to capture all http verbs", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "content-negotiation GET /users should accept to application/json", "HEAD should default to GET", "res .format(obj) with extnames should set the correct charset for the Content-Type", "res .format(obj) with parameters should Vary: Accept", "exports should permit modifying the .response prototype", "app.router decode params should not decode spaces", "res .cookie(name, string) should allow multiple calls", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "res .jsonp(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "req .param(name, default) should use the default value unless defined", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "mvc GET /users should display a list of users", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "cookie-sessions GET / should display 1 view on revisit", "app.router methods should reject numbers for app.trace", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "req .get(field) should return the header field value", "app.router methods should reject numbers for app.notify", "mvc GET /pet/0 should get pet", "mvc GET /user/:id when present should display the user", "req .hostname should work with IPv6 Host and port", "Route errors should handle throw", "Router FQDN should not obscure FQDNs", "app .use(path, middleware) should support array of paths with middleware array", "res .jsonp(object) when given an object should respond with json", "res \"etag\" setting when enabled should send ETag in response to BIND request", "req.is() when given type/* should return the full type when matching", "req .subdomains with trusted X-Forwarded-Host should return an array", "app .request should extend the request prototype", "throw after .end() should fail gracefully", "config .get() when mounted should default to the parent app", "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set", "app.router methods should include POST", "app.router * should allow naming", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "req should accept an argument list of type names", "app.parent should return the parent when mounted", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should include UNSUBSCRIBE", ".sendfile(path, options) should pass options to send module", "Router FQDN should adjust FQDN req.url", "res .sendfile(path) should transfer a directory index file", "error GET /next should respond with 500", "req .protocol should return the protocol string", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "res \"etag\" setting when enabled should send ETag in response to POST request", "Router error should skip non error middleware", "res when accepting html should escape the url", "res .sendfile(path) should transfer a file", "req .xhr should return false otherwise", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "utils.setCharset(type, charset) should do anything without type", "app.router methods should include DELETE", "res .sendFile(path, fn) should invoke the callback when client already aborted", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "app .use(app) should support mount-points", "res .cookie(name, string, options) maxAge should set max-age", "res .set(field, values) should throw when Content-Type is an array", "app .param(name, fn) should not invoke without route handler", "app .use(path, middleware) should invoke middleware for all requests starting with path", "res when the request method is HEAD should ignore the body", "res .append(field, val) should accept array of values", "res .send(code, body) should set .statusCode and body", "app .use(path, middleware) should strip path from req.url", "res .format(obj) in router should set the correct charset for the Content-Type", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "downloads GET /files/amazing.txt should have a download header", "res .type(str) should set the Content-Type based on a filename", "app.router :name should work in array of paths", "res .download(path, filename, options, fn) should invoke the callback", "app.router when next() is called should continue lookup", "res .redirect(url) should encode \"url\"", "res .sendfile(path, fn) should not override manual content-types", "app.router methods should include MERGE", "res .sendfile(path) with an absolute path should transfer the file", "req .ip when X-Forwarded-For is not present should return the remote address", "res .send(Buffer) should send as octet-stream", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "res .redirect(url, status) should set the response status", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "mvc GET /user/:id when not present should 404", "resource GET / should respond with instructions", "res .jsonp(object) should escape utf whitespace", "app .use(path, middleware) should support empty string path", "res should respond with 304 Not Modified when fresh", "in production should enable \"view cache\"", "route-separation GET /user/:id/view should get a user", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "app .param(name, fn) should defer to next route", "res .sendfile(path) should not error if the client aborts", "res .append(field, val) should append multiple headers", "utils.etag(body, encoding) should support buffer", "Route .VERB should allow fallthrough", "Route errors should handle single error handler", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app .render(name, fn) should support absolute paths", "OPTIONS should not be affected by app.all", "app.router * should decore the capture", "app.router should allow rewriting of the url", "app.router methods should include SOURCE", "utils.wetag(body, encoding) should support utf8 strings", "req .range(size) should cap to the given size when open-ended", "app .use(path, middleware) should reject Date as middleware", "app.router when next(err) is called should break out of app.router", "app.router * should eat everything after /", "app.router methods should include ACL", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "mvc PUT /user/:id should update the user", "req.is() when given */subtype should return the full type when matching", "app .param(name, fn) should call when values differ", "config .set() should return the app when undefined", "req .acceptsLanguages should be true if language accepted", "route-map GET /users/:id/pets should get a users pets", "res .location(url) should not touch already-encoded sequences in \"url\"", "app.router * should span multiple segments", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "app.path() should return the canonical", "Router .param should call param function when routing VERBS", "req .query when \"query parser\" is extended should parse complex keys", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "req .range(size) should return parsed ranges", "params GET /users/foo-bar should fail integer parsing", "OPTIONS should only include each method once", "Router .handle should dispatch", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "Route .all should stack", "req .acceptsLanguages when Accept-Language is not present should always return true", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "mvc PUT /pet/2 should update the pet", "app.router * should work with several", "res .format(obj) in router should utilize qvalues in negotiation", "app .engine(ext, fn) should map a template engine", "error-pages Accept: text/html GET /404 should respond with 404", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "req .param(name) should check req.body", "req .hostname should strip port number", "req.is() when content-type is not present should return false", "res .render(name, option) should give precedence to res.locals over app.locals", "res .format(obj) with parameters should default the Content-Type", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively", "error GET /missing should respond with 404", "route-separation GET /posts should get a list of posts", "res .sendfile(path) with a relative path with non-GET should still serve", "config .get() when mounted should prefer child \"trust proxy\" setting", "res .json(object) when given an array should respond with json", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "error-pages Accept: application/json GET /403 should respond with 403", "res .set(field, value) should set the response header field", "exports should expose the request prototype", "app .use(app) should support mounted app anywhere", "res .cookie(name, string, options) maxAge should not mutate the options object", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "res .set(field, values) should not set a charset of one is already set", "app .param(name, fn) should map logic for a single param", "auth GET /login should display login error", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "Router .param should call when values differ", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "res when accepting neither text or html should respond with an empty body", "req .range(size) should have a .type", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "app.all() should add a router per method", "markdown GET / should respond with html", "app.route should return a new route", "mvc GET /user/:id/edit should display the edit form", "app .use(path, middleware) should accept nested arrays of middleware", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "req .host when \"trust proxy\" is enabled should default to Host", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "res .format(obj) with canonicalized mime types should Vary: Accept", "app.route should all .VERB after .all", "res .jsonp(object) should allow []", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "app.router :name should denote a capture group", "vhost bar.example.com GET / should redirect to /bar", "app .use(path, middleware) should accept multiple arrays of middleware", "res .type(str) should default to application/octet-stream", "req .range(size) should return undefined if no range", "res .sendfile(path, fn) should invoke the callback on 403", "req .subdomains otherwise should return an empty array", "res .render(name, option) should expose res.locals", "req .xhr should case-insensitive", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "res .cookie(name, object) should generate a JSON cookie", "app.router methods should include PROPPATCH", "Router should handle missing URL", "app .engine(ext, fn) should work without leading \".\"", "req .subdomains when present should work with IPv4 address", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "app.router methods should include SEARCH", "app .engine(ext, fn) should work \"view engine\" setting", "res .send(body, code) should be supported for backwards compat", "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat", "resource GET /users/1 should respond with user 1", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "res .set(field, values) should coerce to an array of strings", "app .render(name, fn) should support absolute paths with \"view engine\"", "app .render(name, fn) should handle render error throws", "app.router methods should reject numbers for app.mkcalendar", "Route .all should add handler", "app.router methods should include CHECKOUT", "app.listen() should wrap with an HTTP server", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .send(String) should override charset in Content-Type", "Router .use should be called for any URL", "res \"etag\" setting when enabled should send ETag in response to PUT request", "res should not override previous Content-Types", "app.router methods should reject numbers for app.unbind", "app.router should allow escaped regexp", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "cookies POST / should set a cookie", "app.router methods should reject numbers for app.link", "req .baseUrl should travel through routers correctly", "res .sendfile(path, fn) should invoke the callback on 404", "req .subdomains when present should work with IPv6 address", "cookies POST / should no set cookie w/o reminder", "res .set(object) should coerce to a string", "req .stale should return true without response headers", "req .ips when X-Forwarded-For is not present should return []", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "req .acceptsLanguage should be false if language not accepted", "res .download(path, filename) should provide an alternate filename", "req .signedCookies should return a signed JSON cookie", "res .send(null) should set body to \"\"", "res .cookie(name, string, options) maxAge should set relative expires", "app should 404 without routes", "app.router * should work cross-segment", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "app.router .:name? should denote an optional format", "app.router methods should reject numbers for app.source", "res .render(name) should support absolute paths with \"view engine\"", "app.router params should allow merging existing req.params", "req .route should be the executed Route", "auth GET / should redirect to /login", "req .get(field) should throw missing header name", "auth GET /logout should redirect to /", "app .response should not be influenced by other app protos", "res .format(obj) given .default should be invoked instead of auto-responding", "res .jsonp(object) should ignore object callback parameter with jsonp", "res \"etag\" setting when enabled should not send ETag for res.send()", "config .get() when mounted should inherit \"trust proxy\" setting", "req .secure when X-Forwarded-Proto is missing should return false when http", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app .render(name, fn) when \"view engine\" is given should render the template", "res .format(obj) in router should allow wildcard type/subtypes", "app.router methods should include REPORT", "res .sendFile(path) should 404 for directory", "app .param(fn) should fail if not given fn", "Route should work without handlers", "app.router :name should work inside literal parenthesis", "req .host should return undefined otherwise", "res .download(path, fn) should invoke the callback", "params GET / should respond with instructions", "req .param(name) should check req.query", "res .jsonp(object) when given primitives should respond with json for null", "app .use(middleware) should accept multiple arguments", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "Router .use should reject null as middleware", "vhost example.com GET /foo should say foo", "auth POST /login should fail without proper password", "app.route should support dynamic routes", "app.router methods should include M-SEARCH", "route-separation GET /user/:id should get a user", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "res .jsonp(object) when given an array should respond with json", "Router FQDN should ignore FQDN in path", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "app .param(name, fn) should not call when values differ on error", "auth GET /restricted should succeed with proper cookie", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "route-map GET /users/:id should get a user", "req .acceptsCharset(type) when Accept-Charset is not present should return true when present", "app.router should restore req.params after leaving router", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .sendfile(path) with a relative path should transfer the file", "res .append(field, val) should work with cookies", "req .query when \"query parser\" an unknown value should throw", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "route-separation PUT /user/:id/edit should edit a user", "res .json(object) when given primitives should respond with json for Number", "Router should return a function with router methods", "without NODE_ENV should default to development", "exports should permit modifying the .request prototype", "app.router methods should include REBIND", "res .redirect(status, url) should set the response status", "res .render(name, option) should give precedence to res.render() locals over res.locals", "app.router methods should reject numbers for app.purge", "res .sendfile(path) should ignore headers option on 404", "res .send(undefined) should set body to \"\"", "res.vary() with an empty array should not set Vary", "app.router methods should include MKACTIVITY", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "Route .all should handle VERBS", "app .render(name, fn) should support index.<engine>", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "app .response should extend the response prototype", "app.router params should merge numeric indices req.params when more in parent", "route-map DELETE /users should delete users", "res .json(status, object) should respond with json and set the .statusCode", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "app.router methods should reject numbers for app.del", "req .fresh should return false when the resource is modified", "req .acceptsCharset(type) when Accept-Charset is not present should return true", "req.is() when given a mime type should return false when not matching", "res when accepting html should respond with html", "res .format(obj) with extnames should default the Content-Type", "app .use(path, middleware) should require middleware", "res \"etag\" setting when enabled should send ETag for long response", "req .accepts(types) should take quality into account", "params GET /user/0 should respond with a user", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include TRACE", "mvc GET / should redirect to /users", "req .xhr should return false when not present", "res .cookie(name, string, options) should set params", "web-service GET /api/users with a valid api key should respond users json", "res .send(Object) should send as application/json", "res .sendfile(path) should 404 for directory without trailing slash", "Route .VERB should support .get", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .render(name) should expose app.locals with `name` property", "cookies GET / should respond to cookie", "res .sendFile(path) should transfer a file", "content-negotiation GET /users should default to text/html", "res .download(path) should transfer as an attachment", "app .use(path, middleware) should accept multiple arguments", "req .hostname should return the Host when present", "req .query when \"query parser\" disabled should not parse query", "route-separation GET /user/:id should 404 on missing user", "req.is() when given */subtype should ignore charset", "app.router :name should allow several capture groups", "app .render(name, fn) when an error occurs should invoke the callback", "res on failure should remove Content-Disposition", "res .sendfile(path, fn) should invoke the callback when client aborts", "config .disabled() should default to true", "app .engine(ext, fn) should throw when the callback is missing", "app .use(path, middleware) should accept array of middleware", "res .render(name, option) should expose app.locals", "error GET / should respond with 500", "Router should support dynamic routes", "app.router methods should reject numbers for app.delete", "app.router methods should include MKCALENDAR", "app.router should be chainable", "utils.etag(body, encoding) should support strings", "req .subdomains when subdomain offset is set when present should return an array", "exports should throw on old middlewares", "cookies GET / should respond with no cookies", "req .param(name) should check req.params", "app.router * should work within arrays", "config .get() should return undefined when unset", "req .secure when X-Forwarded-Proto is present should return false when http", "app .use(app) should set the child's .parent", "res .format(obj) with canonicalized mime types should default the Content-Type", "res .json(object, status) should use status as second number for backwards compat", "res .render(name) when \"view engine\" is given should render the template", "res .format(obj) with extnames should Vary: Accept", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "app.router methods should reject numbers for app.m-search", "error-pages GET / should respond with page list", "error-pages Accept: text/plain GET /404 should respond with 404", "web-service when requesting an invalid route should respond with 404 json", "app.router methods should reject numbers for app.patch", "req .baseUrl should contain lower path", "error-pages Accept: text/plain GET /500 should respond with 500", "Route errors should handle errors via arity 4 functions", "res should not perform freshness check unless 2xx or 304", "app.del() should alias app.delete()", "res .locals should be empty by default", "resource DELETE /users/9 should fail", "app.router methods should reject numbers for app.post", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "app .locals(obj) should merge locals", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "res .status(code) should set the response .statusCode", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app .use(path, middleware) should support regexp path", "res .sendFile(path) should 304 when ETag matches", "res .sendFile(path, fn) should invoke the callback when client aborts", "resource DELETE /users/1 should delete user 1", "res .set(object) should set multiple fields", "app.router methods should include UNLINK", "res .location(url) should encode \"url\"", "content-negotiation GET /users should accept to text/plain", "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise", "res \"etag\" setting when disabled should send no ETag", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "res .jsonp(object, status) should use status as second number for backwards compat", "res .sendfile(path) with a relative path should disallow requesting out of \"root\"", "res .json(object, status) should respond with json and set the .statusCode for backwards compat", "res .attachment(utf8filename) should add the filename and filename* params", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "utils.wetag(body, encoding) should support empty string", "multi-router GET /api/v1/users should respond with users from APIv1", "res .format(obj) with parameters should utilize qvalues in negotiation", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "res .send(String) should keep charset in Content-Type for Buffers", "app.router params should ignore invalid incoming req.params", "res .render(name) when \"views\" is given should lookup the file in the path", "app.router when next(err) is called should call handler in same route, if exists", "exports should expose the response prototype", "res .format(obj) with extnames should utilize qvalues in negotiation", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "app.router methods should include PURGE", "req .get(field) should throw for non-string header name", "app.router params should overwrite existing req.params by default", "res when accepting text should encode the url", "app.router .:name should denote a format", "res .sendfile(path) should transfer a file with urlencoded name", "res .format(obj) with extnames should allow wildcard type/subtypes", "app.head() should override", "app.router methods should include LOCK", "res on failure should invoke the callback", "app .render(name, fn) when an extension is given should render the template", "app.router when next(\"router\") is called should jump out of router", "app .param(name, fn) should support altering req.params across routes", "res .set(field, values) should set multiple response header fields", "req .query when \"query parser\" is extended should parse parameters with dots", "res .sendFile(path) should include ETag", "config .set() \"etag\" should throw on bad value", "res .download(path, filename, fn) should invoke the callback", "utils.wetag(body, encoding) should support strings", "res .jsonp(object) should allow renaming callback", "app.router params should use params from router", "utils.isAbsolute() should support windows", "utils.flatten(arr) should flatten an array", "res .get(field) should get the response header field", "res.vary() with an array should set the values", "req .acceptsEncodingss should be true if encoding accepted", "app.router when next(\"route\") is called should jump to next route", "exports should expose the application prototype", "res .attachment(filename) should add the filename param", "res .set(field, value) should coerce to a string", "res .cookie(name, string) should set a cookie", "app.router methods should reject numbers for app.propfind", "res .sendStatus(statusCode) should work with unknown code", "res .sendfile(path, fn) should invoke the callback when client already aborted", "app.router when given a regexp should populate req.params with the captures", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "app.router decode params should decode correct params", "app .use(middleware) should invoke middleware for all requests", "app .param(name, fn) should catch thrown secondary error", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "res .jsonp(object) should override previous Content-Types with callback", "app.router methods should reject numbers for app.unsubscribe", "config .set() \"etag\" should set \"etag fn\"", "resource GET /users/9 should respond with error", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "app .use(path, middleware) should reject number as middleware", "Router error should handle throwing in handler after async param", "mvc GET /user/:id when present should display the users pets", "req .accepts(types) should return the first acceptable type with canonical mime types", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "app should inherit from event emitter", "app.router methods should include MKCOL", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "resource GET /users/1..3 should respond with users 1 through 3", "route-separation GET / should respond with index", "app .VERB() should only call an error handling routing callback when an error is propagated", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "utils.isAbsolute() should support unices", "req .host should work with IPv6 Host and port", "res .append(field, val) should work with res.set(field, val) first", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .sendFile(path, fn) should invoke the callback without error when 304", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "utils.setCharset(type, charset) should override charset", "res.vary() when the value is present should not add it again", "app .param(name, fn) should catch thrown error", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "error-pages Accept: application/json GET /500 should respond with 500", "app.router methods should include GET", "app.router methods should reject numbers for app.move", "app.router :name? should populate the capture group", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "res .json(object) when given an object should respond with json", "Router should not stack overflow with many registered routes", "res \"etag\" setting when \"weak\" should send weak ETag", "app .param(name, fn) should defer all the param routes", "res \"etag\" setting when a function should send custom ETag", "app .render(name, fn) when the file does not exist should provide a helpful error", "OPTIONS should not respond if the path is not defined", "app .use(middleware) should accept multiple arrays of middleware", "res \"etag\" setting when a function should not send falsy ETag", "req .accepts(types) should return false when no match is made", "route-separation GET /user/:id/view should 404 on missing user", "app .use(middleware) should accept array of middleware", "app.router should allow literal \".\"", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "auth GET /login should render login form", "Router .param should call param function when routing middleware", "app .use(path, middleware) should reject null as middleware", "req .acceptsEncodingss should be false if encoding not accepted", "req .accepts(type) should return true when present", "app .use(path, middleware) should reject string as middleware", "req .hostname should return undefined otherwise", "res .redirect(url) should default to a 302 redirect", "Router error should handle throwing inside error handlers", "res .render(name) should expose app.locals", "params GET /users/0-2 should respond with three users", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "res .sendFile(path) should not error if the client aborts", "app .render(name, fn) caching should always lookup view without cache", "res .sendFile(path) should transfer a file with special characters in string", "app.router should be .use()able", "res .jsonp(object) when given primitives should respond with json for Number", "res .location(url) should set the header", "config .enable() should set the value to true", "res .send(String) should send as html", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should include LINK", "req .range(size) should accept any type", "req.is() when given type/* should return false when not matching", "res .sendfile(path) should not serve dotfiles", "vhost foo.example.com GET / should redirect to /foo", "req .baseUrl should be empty for top-level route", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "res .attachment() should Content-Disposition to attachment", "config .disabled() should return false when set", "route-map GET /users should respond with users", "req.is() when given type/* should ignore charset", "OPTIONS when error occurs in response handler should pass error to callback", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .clearCookie(name) should set a cookie passed expiry", "Router .multiple callbacks should throw if a callback is null", "res .format(obj) given .default should work when only .default is provided", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored", "res .jsonp(object) should not escape utf whitespace for json fallback", "req .hostname when \"trust proxy\" is enabled should default to Host", "app.router methods should include PATCH", "res.vary() with a string should set the value", "HEAD should output the same headers as GET requests", "app .param(name, fn) should call when values differ when using \"next\"", "app.route should not error on empty routes", "res .sendStatus(statusCode) should send the status code and message as body", "res when accepting html should include the redirect type", "app.router * should capture everything", "config .enabled() should return true when set", "app should be callable", "Route errors should handle throwing inside error handlers", "res .render(name, fn) should pass the resulting string", "app .use(path, middleware) should work if path has trailing slash", "res .sendfile(path) with a relative path should next(404) when not found", "Router .use should require middleware", "res .append(field, val) should get reset by res.set(field, val)", "res.vary() with no arguments should not set Vary", "req .baseUrl should contain full lower path", "app.mountpath should return the mounted path", "app.router methods should include OPTIONS", "app.router params should merge numeric indices req.params", "config .disable() should set the value to false", "res \"etag\" setting when enabled should send ETag", "utils.isAbsolute() should support windows unc", "req .stale should return false when the resource is not modified", "res .clearCookie(name, options) should set the given params", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "res .format(obj) in router should Vary: Accept", "req .path should return the parsed pathname", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "error-pages Accept: text/html GET /500 should respond with 500", "req .acceptsEncoding should be false if encoding not accepted", "req .subdomains when present should return an array", "auth POST /login should succeed with proper credentials", "app.router methods should include COPY", "cookies GET / should have a form", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "res .sendFile(path, fn) should invoke the callback on 404", "downloads GET / should have a link to amazing.txt", "app.router methods should reject numbers for app.lock", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res \"etag\" setting when \"strong\" should send strong ETag", "req .subdomains when subdomain offset is set otherwise should return an empty array", "Router .use should accept array of middleware", "app.router methods should include UNLOCK", "mvc GET /pet/0/edit should get pet edit page", "res .send() should set body to \"\"", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "route-separation GET /user/:id/edit should get a user to edit", "app.router methods should re-route when method is altered", "req .get(field) should special-case Referer", "res should work when mounted", "app.router case sensitivity should be disabled by default", "res .links(obj) should set Link header field for multiple calls", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "req .stale should return true when the resource is modified", "markdown GET /fail should respond with an error", "app.router methods should reject numbers for app.unlock", "res \"etag\" setting when enabled should send ETag in response to GET request", "res .send(code, number) should send number as json", "Router .param should only call once per request", "error-pages Accept: text/html GET /403 should respond with 403", "res .sendfile(path) with a relative path should serve relative to \"root\"", "Route .VERB should limit to just .VERB", "utils.etag(body, encoding) should support utf8 strings", "res .links(obj) should set Link header field", "params GET /user/9 should fail to find user", "res when accepting text should respond with text", "config .get() when mounted should given precedence to the child", "app.router methods should reject numbers for app.options", "res .send(String) should not override Content-Type", "resource GET /users should respond with all users", "Router FQDN should ignore FQDN in search", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "multi-router GET /api/v2/ should respond with APIv2 root handler", "res .format(obj) with parameters should set the correct charset for the Content-Type", "res .sendFile(path) with \"headers\" option should accept headers option", "req .query when \"query parser\" is a function should parse using function", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .json(object) when given primitives should respond with json for null", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "res .jsonp(object) when given primitives should respond with json for String", "app.router methods should include PROPFIND", "exports should expose Router", "res .render(name) should error without \"view engine\" set and no file extension", "middleware .next() should behave like connect", "req .host should strip port number", "res .json(object) when given primitives should respond with json for String", "app.router methods should reject numbers for app.copy", "app .use(app) should support dynamic routes", "req .xhr should return true when X-Requested-With is xmlhttprequest", "cookie-sessions GET / should display no views", "res .attachment(filename) should set the Content-Type", "app.router methods should reject numbers for app.report", "req .acceptsLanguage should be true if language accepted", "res .sendFile(path) should 404 when not found", "res .sendFile(path, options) should pass options to send module", "res .send(Buffer) should set ETag", "OPTIONS should forward requests down the middleware chain", "Router .multiple callbacks should throw if a callback is not a function", "app.all() should run the callback for a method just once", "req .acceptsLanguage when Accept-Language is not present should always return true", "res .sendfile(path, fn) should utilize the same options as express.static()", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "app .param(fn) should map app.param(name, ...) logic", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "config .get() should otherwise return the value", "web-service GET /api/repos with a valid api key should respond repos json", "res .render(name) should support index.<engine>", "req.is() when given a mime type should ignore charset", "cookies GET /forget should clear cookie", "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise", "req .query should default to parse complex keys", "res .jsonp(object) should respond with jsonp", "web-service GET /api/users without an api key should respond with 400 bad request", "error-pages Accept: text/plain GET /403 should respond with 403", "config .set() should set a value", "Router error should handle throwing inside routes with params", "config .set() should return the app", "req .range(size, options) with \"combine: true\" option should return combined ranges", "mvc PUT /user/:id should 500 on error", "app.router * should not be greedy immediately after param", "req .host should work with IPv6 Host", "res .render(name, option) should give precedence to res.render() locals over app.locals", "res \"etag\" setting when enabled should send ETag in response to COPY request", "content-negotiation GET / should accept to text/plain", "res should be chainable", "app.router methods should reject numbers for app.mkactivity", "app .locals.settings should expose app settings", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be undefined by default", "res .jsonp(object) should use first callback parameter with jsonp", "req .acceptsLanguages should be false if language not accepted", "res .send(String) should set ETag", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "res .sendfile(path) with a relative path should allow ../ when \"root\" is set", "res .type(str) should set the Content-Type with type/subtype", "app.router * should keep correct parameter indexes", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "app .param(name, fn) should only call once per request", "route-separation GET /users should list users", "multi-router GET /api/v1/ should respond with APIv1 root handler", "multi-router GET /api/v2/users should respond with users from APIv2", "Router .use should reject string as middleware", "downloads GET /files/missing.txt should respond with 404", "Router should support .use of other routers", "app.router methods should include HEAD", "app .render(name, fn) caching should cache with \"view cache\" setting", "app.router should run in order added", "res .jsonp(object) should include security header and prologue", "req .query should default to {}", "Router parallel requests should not mix requests", "res .attachment(utf8filename) should set the Content-Type", "res .send(code) should set .statusCode", "res .json(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to LINK request", "req .query when \"query parser fn\" is missing should act like \"extended\"", "res should not support jsonp callbacks", "mvc POST /user/:id/pet should create a pet for user"], "failed_tests": ["Route errors should handle throwing inside async error handlers", "Route errors should handle throws in asyncFunction"], "skipped_tests": []}, "fix_patch_result": {"passed_count": 852, "failed_count": 0, "skipped_count": 0, "passed_tests": ["app should emit \"mount\" when mounted", "res .jsonp(object) when given primitives should respond with json", "res .sendfile(path) should accept dotfiles option", "req .accepts(types) should return the first acceptable type", "res .sendFile(path) should error missing path", "app.router methods should reject numbers for app.rebind", "res .json(object) should not support jsonp callbacks", "res .sendfile(path, fn) should invoke the callback when complete", "app.router * should denote a greedy capture group", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "app.router methods should include BIND", "req .query when \"query parser\" disabled should not parse complex keys", "Router .multiple callbacks should throw if a callback is undefined", "req.is() when given a mime type should return the type when matching", "Router .all should be called for any URL when \"*\"", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "req .accepts(type) should return false otherwise", "vhost example.com GET / should say hello", "multi-router GET / should respond with root handler", "req .host should return the Host when present", "auth GET /restricted should redirect to /login without cookie", "app .param(names, fn) should map the array", "app.router methods should reject numbers for app.search", "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to ACL request", "res .jsonp(object) should not override previous Content-Types with no callback", "auth POST /login should fail without proper username", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "utils.setCharset(type, charset) should keep charset if not given charset", "res .sendFile(path, fn) should invoke the callback when complete", "res .cookie(name, string, options) signed without secret should throw an error", "res \"etag\" setting when disabled should send ETag when manually set", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.bind", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app.router :name should match a single segment only", "app.router methods should include NOTIFY", "app .render(name, options, fn) should render the template", "req .acceptsEncoding should be true if encoding accepted", "res .format(obj) with parameters should allow wildcard type/subtypes", "app.router * should require a preceding /", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "utils.wetag(body, encoding) should support buffer", "res .format(obj) in router should default the Content-Type", "content-negotiation GET / should accept to application/json", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "res .send(Buffer) should not override ETag", "req .range(size) should cap to the given size", "req .fresh should return false without response headers", "res when accepting text should include the redirect type", "app.router methods should include PUT", "exports should permit modifying the .application prototype", "app.router methods should reject numbers for app.acl", "res .send(Buffer) should not override Content-Type", "app .param(name, fn) should work with encoded values", "app .render(name, fn) should expose app.locals", "Router .multiple callbacks should not throw if all callbacks are functions", "app.router methods should reject numbers for app.proppatch", "res .format(obj) in router when Accept is not present should invoke the first callback", "app.router methods should reject numbers for app.subscribe", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "route-map GET /users/:id/pets/:pid should get a users pet", "app.router methods should include DEL", "res .render(name) should support absolute paths", "Router should handle blank URL", "app.router methods should include UNBIND", "req .accepts(type) should return true when Accept is not present", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "res \"etag\" setting when enabled should send ETag for empty string response", "Router FQDN should adjust FQDN req.url with multiple handlers", "app.options() should override the default behavior", "Router .use should reject number as middleware", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.merge", "in development should disable \"view cache\"", "utils.etag(body, encoding) should support empty string", "Router .use should reject Date as middleware", "res .sendFile(path) should not override manual content-types", "Route errors should handle throw in .all", "app .use(path, middleware) should support array of paths", "res .render(name) when an error occurs should next(err)", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "req .accepts(types) should return the first when Accept is not present", "config .enabled() should default to false", "app.router methods should reject numbers for app.checkout", "cookie-sessions GET / should set a session cookie", "app.router methods should reject numbers for app.get", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "res .render(name, options, fn) should pass the resulting string", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "res \"etag\" setting when enabled should not override ETag when manually set", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "app.router decode params should not accept params in malformed paths", "app.router when given a regexp should match the pathname only", "error-pages Accept: application/json GET /404 should respond with 404", "app.router trailing slashes should be optional by default", "app.router methods should reject numbers for app.head", "res .sendfile(path, fn) should invoke the callback without error when HEAD", "app .render(name, options, fn) should give precedence to app.render() locals", "res should always check regardless of length", "req .hostname should work with IPv6 Host", "app.router decode params should work with unicode", "content-negotiation GET / should default to text/html", "app.router methods should include SUBSCRIBE", "res .sendFile(path) with \"root\" option should not transfer relative with without", "res .jsonp(status, object) should respond with json and set the .statusCode", "req.is() when given */subtype should return false when not matching", "ejs GET / should respond with html", "res .render(name, fn) when an error occurs should pass it to the callback", "utils.setCharset(type, charset) should return type if not given charset", "app.router methods should include MOVE", "app.router methods should reject numbers for app.unlink", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "app .VERB() should not get invoked without error handler on error", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router * should be optional", "req .fresh should return true when the resource is not modified", "res .jsonp(object) should disallow arbitrary js", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "res .render(name, option) should render the template", "res .json(object) should not override previous Content-Types", "app.router params should merge numeric indices req.params when parent has same number", "app.router methods should reject numbers for app.put", "req.is() when given an extension should lookup the mime type", "res .sendfile(path, fn) should invoke the callback on socket error", "utils.setCharset(type, charset) should set charset", "res .sendfile(path, fn) should invoke the callback without error when 304", "app .use(middleware) should accept nested arrays of middleware", "app .use(app) should mount the app", "app.router methods should reject numbers for app.mkcol", "app.router :name should work following a partial capture group", "res .sendfile(path) should accept headers option", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app.router params should restore req.params", "app.router should throw with notice", "app.router :name? should denote an optional capture group", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains with no host should return an empty array", "Router .all should support using .all to capture all http verbs", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "content-negotiation GET /users should accept to application/json", "HEAD should default to GET", "res .format(obj) with extnames should set the correct charset for the Content-Type", "res .format(obj) with parameters should Vary: Accept", "exports should permit modifying the .response prototype", "app.router decode params should not decode spaces", "res .cookie(name, string) should allow multiple calls", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "res .jsonp(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "req .param(name, default) should use the default value unless defined", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "mvc GET /users should display a list of users", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "cookie-sessions GET / should display 1 view on revisit", "app.router methods should reject numbers for app.trace", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "req .get(field) should return the header field value", "app.router methods should reject numbers for app.notify", "mvc GET /pet/0 should get pet", "mvc GET /user/:id when present should display the user", "req .hostname should work with IPv6 Host and port", "Route errors should handle throw", "Router FQDN should not obscure FQDNs", "app .use(path, middleware) should support array of paths with middleware array", "res .jsonp(object) when given an object should respond with json", "res \"etag\" setting when enabled should send ETag in response to BIND request", "req.is() when given type/* should return the full type when matching", "req .subdomains with trusted X-Forwarded-Host should return an array", "app .request should extend the request prototype", "throw after .end() should fail gracefully", "config .get() when mounted should default to the parent app", "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set", "app.router methods should include POST", "app.router * should allow naming", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "req should accept an argument list of type names", "app.parent should return the parent when mounted", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should include UNSUBSCRIBE", ".sendfile(path, options) should pass options to send module", "Router FQDN should adjust FQDN req.url", "res .sendfile(path) should transfer a directory index file", "error GET /next should respond with 500", "req .protocol should return the protocol string", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "res \"etag\" setting when enabled should send ETag in response to POST request", "Router error should skip non error middleware", "res when accepting html should escape the url", "res .sendfile(path) should transfer a file", "req .xhr should return false otherwise", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "utils.setCharset(type, charset) should do anything without type", "app.router methods should include DELETE", "res .sendFile(path, fn) should invoke the callback when client already aborted", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "app .use(app) should support mount-points", "res .cookie(name, string, options) maxAge should set max-age", "res .set(field, values) should throw when Content-Type is an array", "app .param(name, fn) should not invoke without route handler", "app .use(path, middleware) should invoke middleware for all requests starting with path", "res when the request method is HEAD should ignore the body", "res .append(field, val) should accept array of values", "res .send(code, body) should set .statusCode and body", "app .use(path, middleware) should strip path from req.url", "res .format(obj) in router should set the correct charset for the Content-Type", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "downloads GET /files/amazing.txt should have a download header", "res .type(str) should set the Content-Type based on a filename", "app.router :name should work in array of paths", "res .download(path, filename, options, fn) should invoke the callback", "app.router when next() is called should continue lookup", "res .redirect(url) should encode \"url\"", "res .sendfile(path, fn) should not override manual content-types", "app.router methods should include MERGE", "res .sendfile(path) with an absolute path should transfer the file", "req .ip when X-Forwarded-For is not present should return the remote address", "res .send(Buffer) should send as octet-stream", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "res .redirect(url, status) should set the response status", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "mvc GET /user/:id when not present should 404", "resource GET / should respond with instructions", "res .jsonp(object) should escape utf whitespace", "app .use(path, middleware) should support empty string path", "res should respond with 304 Not Modified when fresh", "in production should enable \"view cache\"", "route-separation GET /user/:id/view should get a user", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "app .param(name, fn) should defer to next route", "res .sendfile(path) should not error if the client aborts", "res .append(field, val) should append multiple headers", "utils.etag(body, encoding) should support buffer", "Route .VERB should allow fallthrough", "Route errors should handle single error handler", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app .render(name, fn) should support absolute paths", "OPTIONS should not be affected by app.all", "app.router * should decore the capture", "app.router should allow rewriting of the url", "app.router methods should include SOURCE", "utils.wetag(body, encoding) should support utf8 strings", "req .range(size) should cap to the given size when open-ended", "app .use(path, middleware) should reject Date as middleware", "app.router when next(err) is called should break out of app.router", "app.router * should eat everything after /", "app.router methods should include ACL", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "mvc PUT /user/:id should update the user", "req.is() when given */subtype should return the full type when matching", "app .param(name, fn) should call when values differ", "config .set() should return the app when undefined", "req .acceptsLanguages should be true if language accepted", "route-map GET /users/:id/pets should get a users pets", "res .location(url) should not touch already-encoded sequences in \"url\"", "app.router * should span multiple segments", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "app.path() should return the canonical", "Router .param should call param function when routing VERBS", "req .query when \"query parser\" is extended should parse complex keys", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "req .range(size) should return parsed ranges", "params GET /users/foo-bar should fail integer parsing", "OPTIONS should only include each method once", "Router .handle should dispatch", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "Route .all should stack", "req .acceptsLanguages when Accept-Language is not present should always return true", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "mvc PUT /pet/2 should update the pet", "app.router * should work with several", "res .format(obj) in router should utilize qvalues in negotiation", "app .engine(ext, fn) should map a template engine", "error-pages Accept: text/html GET /404 should respond with 404", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "req .param(name) should check req.body", "req .hostname should strip port number", "req.is() when content-type is not present should return false", "res .render(name, option) should give precedence to res.locals over app.locals", "res .format(obj) with parameters should default the Content-Type", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively", "error GET /missing should respond with 404", "route-separation GET /posts should get a list of posts", "res .sendfile(path) with a relative path with non-GET should still serve", "config .get() when mounted should prefer child \"trust proxy\" setting", "res .json(object) when given an array should respond with json", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "error-pages Accept: application/json GET /403 should respond with 403", "res .set(field, value) should set the response header field", "exports should expose the request prototype", "app .use(app) should support mounted app anywhere", "res .cookie(name, string, options) maxAge should not mutate the options object", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "res .set(field, values) should not set a charset of one is already set", "app .param(name, fn) should map logic for a single param", "auth GET /login should display login error", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "Router .param should call when values differ", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "res when accepting neither text or html should respond with an empty body", "req .range(size) should have a .type", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "app.all() should add a router per method", "markdown GET / should respond with html", "app.route should return a new route", "mvc GET /user/:id/edit should display the edit form", "app .use(path, middleware) should accept nested arrays of middleware", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "req .host when \"trust proxy\" is enabled should default to Host", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "res .format(obj) with canonicalized mime types should Vary: Accept", "app.route should all .VERB after .all", "res .jsonp(object) should allow []", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "app.router :name should denote a capture group", "vhost bar.example.com GET / should redirect to /bar", "app .use(path, middleware) should accept multiple arrays of middleware", "res .type(str) should default to application/octet-stream", "req .range(size) should return undefined if no range", "res .sendfile(path, fn) should invoke the callback on 403", "req .subdomains otherwise should return an empty array", "res .render(name, option) should expose res.locals", "req .xhr should case-insensitive", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "res .cookie(name, object) should generate a JSON cookie", "app.router methods should include PROPPATCH", "Router should handle missing URL", "app .engine(ext, fn) should work without leading \".\"", "req .subdomains when present should work with IPv4 address", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "app.router methods should include SEARCH", "app .engine(ext, fn) should work \"view engine\" setting", "res .send(body, code) should be supported for backwards compat", "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat", "resource GET /users/1 should respond with user 1", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "res .set(field, values) should coerce to an array of strings", "app .render(name, fn) should support absolute paths with \"view engine\"", "app .render(name, fn) should handle render error throws", "Route errors should handle throws in asyncFunction", "app.router methods should reject numbers for app.mkcalendar", "Route .all should add handler", "app.router methods should include CHECKOUT", "app.listen() should wrap with an HTTP server", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .send(String) should override charset in Content-Type", "Router .use should be called for any URL", "res \"etag\" setting when enabled should send ETag in response to PUT request", "res should not override previous Content-Types", "app.router methods should reject numbers for app.unbind", "app.router should allow escaped regexp", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "cookies POST / should set a cookie", "app.router methods should reject numbers for app.link", "req .baseUrl should travel through routers correctly", "res .sendfile(path, fn) should invoke the callback on 404", "req .subdomains when present should work with IPv6 address", "cookies POST / should no set cookie w/o reminder", "Route errors should handle throwing inside async error handlers", "res .set(object) should coerce to a string", "req .stale should return true without response headers", "req .ips when X-Forwarded-For is not present should return []", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "req .acceptsLanguage should be false if language not accepted", "res .download(path, filename) should provide an alternate filename", "req .signedCookies should return a signed JSON cookie", "res .send(null) should set body to \"\"", "res .cookie(name, string, options) maxAge should set relative expires", "app should 404 without routes", "app.router * should work cross-segment", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "app.router .:name? should denote an optional format", "app.router methods should reject numbers for app.source", "res .render(name) should support absolute paths with \"view engine\"", "app.router params should allow merging existing req.params", "req .route should be the executed Route", "auth GET / should redirect to /login", "req .get(field) should throw missing header name", "auth GET /logout should redirect to /", "app .response should not be influenced by other app protos", "res .format(obj) given .default should be invoked instead of auto-responding", "res .jsonp(object) should ignore object callback parameter with jsonp", "res \"etag\" setting when enabled should not send ETag for res.send()", "config .get() when mounted should inherit \"trust proxy\" setting", "req .secure when X-Forwarded-Proto is missing should return false when http", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app .render(name, fn) when \"view engine\" is given should render the template", "res .format(obj) in router should allow wildcard type/subtypes", "app.router methods should include REPORT", "res .sendFile(path) should 404 for directory", "app .param(fn) should fail if not given fn", "Route should work without handlers", "app.router :name should work inside literal parenthesis", "req .host should return undefined otherwise", "res .download(path, fn) should invoke the callback", "params GET / should respond with instructions", "req .param(name) should check req.query", "res .jsonp(object) when given primitives should respond with json for null", "app .use(middleware) should accept multiple arguments", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "Router .use should reject null as middleware", "vhost example.com GET /foo should say foo", "auth POST /login should fail without proper password", "app.route should support dynamic routes", "app.router methods should include M-SEARCH", "route-separation GET /user/:id should get a user", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "res .jsonp(object) when given an array should respond with json", "Router FQDN should ignore FQDN in path", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "app .param(name, fn) should not call when values differ on error", "auth GET /restricted should succeed with proper cookie", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "route-map GET /users/:id should get a user", "req .acceptsCharset(type) when Accept-Charset is not present should return true when present", "app.router should restore req.params after leaving router", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .sendfile(path) with a relative path should transfer the file", "res .append(field, val) should work with cookies", "req .query when \"query parser\" an unknown value should throw", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "route-separation PUT /user/:id/edit should edit a user", "res .json(object) when given primitives should respond with json for Number", "Router should return a function with router methods", "without NODE_ENV should default to development", "exports should permit modifying the .request prototype", "app.router methods should include REBIND", "res .redirect(status, url) should set the response status", "res .render(name, option) should give precedence to res.render() locals over res.locals", "app.router methods should reject numbers for app.purge", "res .sendfile(path) should ignore headers option on 404", "res .send(undefined) should set body to \"\"", "res.vary() with an empty array should not set Vary", "app.router methods should include MKACTIVITY", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "Route .all should handle VERBS", "app .render(name, fn) should support index.<engine>", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "app .response should extend the response prototype", "app.router params should merge numeric indices req.params when more in parent", "route-map DELETE /users should delete users", "res .json(status, object) should respond with json and set the .statusCode", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "app.router methods should reject numbers for app.del", "req .fresh should return false when the resource is modified", "req .acceptsCharset(type) when Accept-Charset is not present should return true", "req.is() when given a mime type should return false when not matching", "res when accepting html should respond with html", "res .format(obj) with extnames should default the Content-Type", "app .use(path, middleware) should require middleware", "res \"etag\" setting when enabled should send ETag for long response", "req .accepts(types) should take quality into account", "params GET /user/0 should respond with a user", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include TRACE", "mvc GET / should redirect to /users", "req .xhr should return false when not present", "res .cookie(name, string, options) should set params", "web-service GET /api/users with a valid api key should respond users json", "res .send(Object) should send as application/json", "res .sendfile(path) should 404 for directory without trailing slash", "Route .VERB should support .get", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .render(name) should expose app.locals with `name` property", "cookies GET / should respond to cookie", "res .sendFile(path) should transfer a file", "content-negotiation GET /users should default to text/html", "res .download(path) should transfer as an attachment", "app .use(path, middleware) should accept multiple arguments", "req .hostname should return the Host when present", "req .query when \"query parser\" disabled should not parse query", "route-separation GET /user/:id should 404 on missing user", "req.is() when given */subtype should ignore charset", "app.router :name should allow several capture groups", "app .render(name, fn) when an error occurs should invoke the callback", "res on failure should remove Content-Disposition", "res .sendfile(path, fn) should invoke the callback when client aborts", "config .disabled() should default to true", "app .engine(ext, fn) should throw when the callback is missing", "app .use(path, middleware) should accept array of middleware", "res .render(name, option) should expose app.locals", "error GET / should respond with 500", "Router should support dynamic routes", "app.router methods should reject numbers for app.delete", "app.router methods should include MKCALENDAR", "app.router should be chainable", "utils.etag(body, encoding) should support strings", "req .subdomains when subdomain offset is set when present should return an array", "exports should throw on old middlewares", "cookies GET / should respond with no cookies", "req .param(name) should check req.params", "app.router * should work within arrays", "config .get() should return undefined when unset", "req .secure when X-Forwarded-Proto is present should return false when http", "app .use(app) should set the child's .parent", "res .format(obj) with canonicalized mime types should default the Content-Type", "res .json(object, status) should use status as second number for backwards compat", "res .render(name) when \"view engine\" is given should render the template", "res .format(obj) with extnames should Vary: Accept", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "app.router methods should reject numbers for app.m-search", "error-pages GET / should respond with page list", "error-pages Accept: text/plain GET /404 should respond with 404", "web-service when requesting an invalid route should respond with 404 json", "app.router methods should reject numbers for app.patch", "req .baseUrl should contain lower path", "error-pages Accept: text/plain GET /500 should respond with 500", "Route errors should handle errors via arity 4 functions", "res should not perform freshness check unless 2xx or 304", "app.del() should alias app.delete()", "res .locals should be empty by default", "resource DELETE /users/9 should fail", "app.router methods should reject numbers for app.post", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "app .locals(obj) should merge locals", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "res .status(code) should set the response .statusCode", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app .use(path, middleware) should support regexp path", "res .sendFile(path) should 304 when ETag matches", "res .sendFile(path, fn) should invoke the callback when client aborts", "resource DELETE /users/1 should delete user 1", "res .set(object) should set multiple fields", "app.router methods should include UNLINK", "res .location(url) should encode \"url\"", "content-negotiation GET /users should accept to text/plain", "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise", "res \"etag\" setting when disabled should send no ETag", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "res .jsonp(object, status) should use status as second number for backwards compat", "res .sendfile(path) with a relative path should disallow requesting out of \"root\"", "res .json(object, status) should respond with json and set the .statusCode for backwards compat", "res .attachment(utf8filename) should add the filename and filename* params", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "utils.wetag(body, encoding) should support empty string", "multi-router GET /api/v1/users should respond with users from APIv1", "res .format(obj) with parameters should utilize qvalues in negotiation", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "res .send(String) should keep charset in Content-Type for Buffers", "app.router params should ignore invalid incoming req.params", "res .render(name) when \"views\" is given should lookup the file in the path", "app.router when next(err) is called should call handler in same route, if exists", "exports should expose the response prototype", "res .format(obj) with extnames should utilize qvalues in negotiation", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "app.router methods should include PURGE", "req .get(field) should throw for non-string header name", "app.router params should overwrite existing req.params by default", "res when accepting text should encode the url", "app.router .:name should denote a format", "res .sendfile(path) should transfer a file with urlencoded name", "res .format(obj) with extnames should allow wildcard type/subtypes", "app.head() should override", "app.router methods should include LOCK", "res on failure should invoke the callback", "app .render(name, fn) when an extension is given should render the template", "app.router when next(\"router\") is called should jump out of router", "app .param(name, fn) should support altering req.params across routes", "res .set(field, values) should set multiple response header fields", "req .query when \"query parser\" is extended should parse parameters with dots", "res .sendFile(path) should include ETag", "config .set() \"etag\" should throw on bad value", "res .download(path, filename, fn) should invoke the callback", "utils.wetag(body, encoding) should support strings", "res .jsonp(object) should allow renaming callback", "app.router params should use params from router", "utils.isAbsolute() should support windows", "utils.flatten(arr) should flatten an array", "res .get(field) should get the response header field", "res.vary() with an array should set the values", "req .acceptsEncodingss should be true if encoding accepted", "app.router when next(\"route\") is called should jump to next route", "exports should expose the application prototype", "res .attachment(filename) should add the filename param", "res .set(field, value) should coerce to a string", "res .cookie(name, string) should set a cookie", "app.router methods should reject numbers for app.propfind", "res .sendStatus(statusCode) should work with unknown code", "res .sendfile(path, fn) should invoke the callback when client already aborted", "app.router when given a regexp should populate req.params with the captures", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "app.router decode params should decode correct params", "app .use(middleware) should invoke middleware for all requests", "app .param(name, fn) should catch thrown secondary error", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "res .jsonp(object) should override previous Content-Types with callback", "app.router methods should reject numbers for app.unsubscribe", "config .set() \"etag\" should set \"etag fn\"", "resource GET /users/9 should respond with error", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "app .use(path, middleware) should reject number as middleware", "Router error should handle throwing in handler after async param", "mvc GET /user/:id when present should display the users pets", "req .accepts(types) should return the first acceptable type with canonical mime types", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "app should inherit from event emitter", "app.router methods should include MKCOL", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "resource GET /users/1..3 should respond with users 1 through 3", "route-separation GET / should respond with index", "app .VERB() should only call an error handling routing callback when an error is propagated", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "utils.isAbsolute() should support unices", "req .host should work with IPv6 Host and port", "res .append(field, val) should work with res.set(field, val) first", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .sendFile(path, fn) should invoke the callback without error when 304", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "utils.setCharset(type, charset) should override charset", "res.vary() when the value is present should not add it again", "app .param(name, fn) should catch thrown error", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "error-pages Accept: application/json GET /500 should respond with 500", "app.router methods should include GET", "app.router methods should reject numbers for app.move", "app.router :name? should populate the capture group", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "res .json(object) when given an object should respond with json", "Router should not stack overflow with many registered routes", "res \"etag\" setting when \"weak\" should send weak ETag", "app .param(name, fn) should defer all the param routes", "res \"etag\" setting when a function should send custom ETag", "app .render(name, fn) when the file does not exist should provide a helpful error", "OPTIONS should not respond if the path is not defined", "app .use(middleware) should accept multiple arrays of middleware", "res \"etag\" setting when a function should not send falsy ETag", "req .accepts(types) should return false when no match is made", "route-separation GET /user/:id/view should 404 on missing user", "app .use(middleware) should accept array of middleware", "app.router should allow literal \".\"", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "auth GET /login should render login form", "Router .param should call param function when routing middleware", "app .use(path, middleware) should reject null as middleware", "req .acceptsEncodingss should be false if encoding not accepted", "req .accepts(type) should return true when present", "app .use(path, middleware) should reject string as middleware", "req .hostname should return undefined otherwise", "res .redirect(url) should default to a 302 redirect", "Router error should handle throwing inside error handlers", "res .render(name) should expose app.locals", "params GET /users/0-2 should respond with three users", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "res .sendFile(path) should not error if the client aborts", "app .render(name, fn) caching should always lookup view without cache", "res .sendFile(path) should transfer a file with special characters in string", "app.router should be .use()able", "res .jsonp(object) when given primitives should respond with json for Number", "res .location(url) should set the header", "config .enable() should set the value to true", "res .send(String) should send as html", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should include LINK", "req .range(size) should accept any type", "req.is() when given type/* should return false when not matching", "res .sendfile(path) should not serve dotfiles", "vhost foo.example.com GET / should redirect to /foo", "req .baseUrl should be empty for top-level route", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "res .attachment() should Content-Disposition to attachment", "config .disabled() should return false when set", "route-map GET /users should respond with users", "req.is() when given type/* should ignore charset", "OPTIONS when error occurs in response handler should pass error to callback", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .clearCookie(name) should set a cookie passed expiry", "Router .multiple callbacks should throw if a callback is null", "res .format(obj) given .default should work when only .default is provided", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored", "res .jsonp(object) should not escape utf whitespace for json fallback", "req .hostname when \"trust proxy\" is enabled should default to Host", "app.router methods should include PATCH", "res.vary() with a string should set the value", "HEAD should output the same headers as GET requests", "app .param(name, fn) should call when values differ when using \"next\"", "app.route should not error on empty routes", "res .sendStatus(statusCode) should send the status code and message as body", "res when accepting html should include the redirect type", "app.router * should capture everything", "config .enabled() should return true when set", "app should be callable", "Route errors should handle throwing inside error handlers", "res .render(name, fn) should pass the resulting string", "app .use(path, middleware) should work if path has trailing slash", "res .sendfile(path) with a relative path should next(404) when not found", "Router .use should require middleware", "res .append(field, val) should get reset by res.set(field, val)", "res.vary() with no arguments should not set Vary", "req .baseUrl should contain full lower path", "app.mountpath should return the mounted path", "app.router methods should include OPTIONS", "app.router params should merge numeric indices req.params", "config .disable() should set the value to false", "res \"etag\" setting when enabled should send ETag", "utils.isAbsolute() should support windows unc", "req .stale should return false when the resource is not modified", "res .clearCookie(name, options) should set the given params", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "res .format(obj) in router should Vary: Accept", "req .path should return the parsed pathname", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "error-pages Accept: text/html GET /500 should respond with 500", "req .acceptsEncoding should be false if encoding not accepted", "req .subdomains when present should return an array", "auth POST /login should succeed with proper credentials", "app.router methods should include COPY", "cookies GET / should have a form", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "res .sendFile(path, fn) should invoke the callback on 404", "downloads GET / should have a link to amazing.txt", "app.router methods should reject numbers for app.lock", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res \"etag\" setting when \"strong\" should send strong ETag", "req .subdomains when subdomain offset is set otherwise should return an empty array", "Router .use should accept array of middleware", "app.router methods should include UNLOCK", "mvc GET /pet/0/edit should get pet edit page", "res .send() should set body to \"\"", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "route-separation GET /user/:id/edit should get a user to edit", "app.router methods should re-route when method is altered", "req .get(field) should special-case Referer", "res should work when mounted", "app.router case sensitivity should be disabled by default", "res .links(obj) should set Link header field for multiple calls", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "req .stale should return true when the resource is modified", "markdown GET /fail should respond with an error", "app.router methods should reject numbers for app.unlock", "res \"etag\" setting when enabled should send ETag in response to GET request", "res .send(code, number) should send number as json", "Router .param should only call once per request", "error-pages Accept: text/html GET /403 should respond with 403", "res .sendfile(path) with a relative path should serve relative to \"root\"", "Route .VERB should limit to just .VERB", "utils.etag(body, encoding) should support utf8 strings", "res .links(obj) should set Link header field", "params GET /user/9 should fail to find user", "res when accepting text should respond with text", "config .get() when mounted should given precedence to the child", "app.router methods should reject numbers for app.options", "res .send(String) should not override Content-Type", "resource GET /users should respond with all users", "Router FQDN should ignore FQDN in search", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "multi-router GET /api/v2/ should respond with APIv2 root handler", "res .format(obj) with parameters should set the correct charset for the Content-Type", "res .sendFile(path) with \"headers\" option should accept headers option", "req .query when \"query parser\" is a function should parse using function", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .json(object) when given primitives should respond with json for null", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "res .jsonp(object) when given primitives should respond with json for String", "app.router methods should include PROPFIND", "exports should expose Router", "res .render(name) should error without \"view engine\" set and no file extension", "middleware .next() should behave like connect", "req .host should strip port number", "res .json(object) when given primitives should respond with json for String", "app.router methods should reject numbers for app.copy", "app .use(app) should support dynamic routes", "req .xhr should return true when X-Requested-With is xmlhttprequest", "cookie-sessions GET / should display no views", "res .attachment(filename) should set the Content-Type", "app.router methods should reject numbers for app.report", "req .acceptsLanguage should be true if language accepted", "res .sendFile(path) should 404 when not found", "res .sendFile(path, options) should pass options to send module", "res .send(Buffer) should set ETag", "OPTIONS should forward requests down the middleware chain", "Router .multiple callbacks should throw if a callback is not a function", "app.all() should run the callback for a method just once", "req .acceptsLanguage when Accept-Language is not present should always return true", "res .sendfile(path, fn) should utilize the same options as express.static()", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "app .param(fn) should map app.param(name, ...) logic", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "config .get() should otherwise return the value", "web-service GET /api/repos with a valid api key should respond repos json", "res .render(name) should support index.<engine>", "req.is() when given a mime type should ignore charset", "cookies GET /forget should clear cookie", "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise", "req .query should default to parse complex keys", "res .jsonp(object) should respond with jsonp", "web-service GET /api/users without an api key should respond with 400 bad request", "error-pages Accept: text/plain GET /403 should respond with 403", "config .set() should set a value", "Router error should handle throwing inside routes with params", "config .set() should return the app", "req .range(size, options) with \"combine: true\" option should return combined ranges", "mvc PUT /user/:id should 500 on error", "app.router * should not be greedy immediately after param", "req .host should work with IPv6 Host", "res .render(name, option) should give precedence to res.render() locals over app.locals", "res \"etag\" setting when enabled should send ETag in response to COPY request", "content-negotiation GET / should accept to text/plain", "res should be chainable", "app.router methods should reject numbers for app.mkactivity", "app .locals.settings should expose app settings", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be undefined by default", "res .jsonp(object) should use first callback parameter with jsonp", "req .acceptsLanguages should be false if language not accepted", "res .send(String) should set ETag", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "res .sendfile(path) with a relative path should allow ../ when \"root\" is set", "res .type(str) should set the Content-Type with type/subtype", "app.router * should keep correct parameter indexes", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "app .param(name, fn) should only call once per request", "route-separation GET /users should list users", "multi-router GET /api/v1/ should respond with APIv1 root handler", "multi-router GET /api/v2/users should respond with users from APIv2", "Router .use should reject string as middleware", "downloads GET /files/missing.txt should respond with 404", "Router should support .use of other routers", "app.router methods should include HEAD", "app .render(name, fn) caching should cache with \"view cache\" setting", "app.router should run in order added", "res .jsonp(object) should include security header and prologue", "req .query should default to {}", "Router parallel requests should not mix requests", "res .attachment(utf8filename) should set the Content-Type", "res .send(code) should set .statusCode", "res .json(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to LINK request", "req .query when \"query parser fn\" is missing should act like \"extended\"", "res should not support jsonp callbacks", "mvc POST /user/:id/pet should create a pet for user"], "failed_tests": [], "skipped_tests": []}, "instance_id": "expressjs__express-3695"}
{"org": "expressjs", "repo": "express", "number": 3495, "state": "closed", "title": "req.hostname: check first comma-delimited host", "body": "Fixes #3494 ", "base": {"label": "expressjs:4.17", "ref": "4.17", "sha": "8da51108e7bb501344c537d3f1f846a7477ae329"}, "resolved_issues": [{"number": 3494, "title": "req.hostname: check first comma-delimited host", "body": "I have a nodejs application using express that is deployed on Openshift that brings a HAProxy LB that adds `X-Forwarded` headers and an Apache HTTP that acts as WAF (web application firewall - mod_security) in front of app. The Apache extends the `X-Forwarded` headers so I end up with:\r\n```\r\n'x-forwarded-host': 'first.example.com:3000, second.example.com:3000'\r\n```\r\nBut this doesn't work with `req.hostname` as it currently assumes there's only one proxy.\r\n\r\nSee also #1646"}], "fix_patch": "diff --git a/History.md b/History.md\nindex 35147d390d..c29a4490bd 100644\n--- a/History.md\n+++ b/History.md\n@@ -3,6 +3,7 @@ unreleased\n \n   * Improve error message for non-strings to `res.sendFile`\n   * Improve error message for `null`/`undefined` to `res.status`\n+  * Support multiple hosts in `X-Forwarded-Host`\n \n 4.16.4 / 2018-10-10\n ===================\ndiff --git a/lib/request.js b/lib/request.js\nindex 8bb86a9acc..a9400ef99d 100644\n--- a/lib/request.js\n+++ b/lib/request.js\n@@ -430,6 +430,10 @@ defineGetter(req, 'hostname', function hostname(){\n \n   if (!host || !trust(this.connection.remoteAddress, 0)) {\n     host = this.get('Host');\n+  } else if (host.indexOf(',') !== -1) {\n+    // Note: X-Forwarded-Host is normally only ever a\n+    //       single value, but this is to be safe.\n+    host = host.substring(0, host.indexOf(',')).trimRight()\n   }\n \n   if (!host) return;\n", "test_patch": "diff --git a/test/req.hostname.js b/test/req.hostname.js\nindex 816cd59799..09bfb89989 100644\n--- a/test/req.hostname.js\n+++ b/test/req.hostname.js\n@@ -116,6 +116,56 @@ describe('req', function(){\n         .set('Host', 'example.com')\n         .expect('example.com', done);\n       })\n+\n+      describe('when multiple X-Forwarded-Host', function () {\n+        it('should use the first value', function (done) {\n+          var app = express()\n+\n+          app.enable('trust proxy')\n+\n+          app.use(function (req, res) {\n+            res.send(req.hostname)\n+          })\n+\n+          request(app)\n+          .get('/')\n+          .set('Host', 'localhost')\n+          .set('X-Forwarded-Host', 'example.com, foobar.com')\n+          .expect(200, 'example.com', done)\n+        })\n+\n+        it('should remove OWS around comma', function (done) {\n+          var app = express()\n+\n+          app.enable('trust proxy')\n+\n+          app.use(function (req, res) {\n+            res.send(req.hostname)\n+          })\n+\n+          request(app)\n+          .get('/')\n+          .set('Host', 'localhost')\n+          .set('X-Forwarded-Host', 'example.com , foobar.com')\n+          .expect(200, 'example.com', done)\n+        })\n+\n+        it('should strip port number', function (done) {\n+          var app = express()\n+\n+          app.enable('trust proxy')\n+\n+          app.use(function (req, res) {\n+            res.send(req.hostname)\n+          })\n+\n+          request(app)\n+          .get('/')\n+          .set('Host', 'localhost')\n+          .set('X-Forwarded-Host', 'example.com:8080 , foobar.com:8888')\n+          .expect(200, 'example.com', done)\n+        })\n+      })\n     })\n \n     describe('when \"trust proxy\" is disabled', function(){\n", "fixed_tests": {"req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should remove OWS around comma": {"run": "NONE", "test": "FAIL", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should use the first value": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "p2p_tests": {"app should emit \"mount\" when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should accept dotfiles option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first acceptable type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should error missing path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.rebind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) should not support jsonp callbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback when complete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should denote a greedy capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include BIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" disabled should not parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should return the type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .all should be called for any URL when \"*\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MOVE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost example.com GET / should say hello": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET / should respond with root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should return the Host when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /restricted should redirect to /login without cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(names, fn) should map the array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to ACL request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should not override previous Content-Types with no callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should fail without proper username": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should keep charset if not given charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when complete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) signed without secret should throw an error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when disabled should send ETag when manually set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should default to the routes defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.bind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should match a single segment only": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include NOTIFY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncoding should be true if encoding accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should require a preceding /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support buffer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should accept to application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match no slashes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should not override ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should cap to the given size": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return false without response headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should include the redirect type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PUT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .application prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.acl": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should not override Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should work with encoded values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should not throw if all callbacks are functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.proppatch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.subscribe": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKCOL request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id/pets/:pid should get a users pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include DEL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support absolute paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should handle blank URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNBIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return true when Accept is not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PATCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag for empty string response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url with multiple handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.options() should override the default behavior": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject number as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.merge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "in development should disable \"view cache\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support empty string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject Date as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should not override manual content-types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throw in .all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support array of paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when an error occurs should next(err)": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set location from \"Referer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNLINK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first when Accept is not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enabled() should default to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.checkout": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should set a session cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should strip port number": {"run": "NONE", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.get": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, options, fn) should pass the resulting string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to OPTIONS request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should not override ETag when manually set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should not accept params in malformed paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when given a regexp should match the pathname only": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes should be optional by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.head": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback without error when HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) should give precedence to app.render() locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should always check regardless of length": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should work with IPv6 Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should work with unicode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should default to text/html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SUBSCRIBE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should not transfer relative with without": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(status, object) should respond with json and set the .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "ejs GET / should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, fn) when an error occurs should pass it to the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should return type if not given charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MOVE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unlink": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .VERB() should not get invoked without error handler on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should default to http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should be optional": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return true when the resource is not modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should disallow arbitrary js": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) should not override previous Content-Types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params when parent has same number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.put": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given an extension should lookup the mime type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback on socket error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should set charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback without error when 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept nested arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should mount the app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkcol": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work following a partial capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should accept headers option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should restore req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should throw with notice": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name? should denote an optional capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is simple should not parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains with no host should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .all should support using .all to capture all http verbs": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should accept to application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "HEAD should default to GET": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should not decode spaces": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string) should allow multiple calls": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json escape\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name, default) should use the default value unless defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /users should display a list of users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should display 1 view on revisit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.trace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should return the header field value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.notify": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /pet/0 should get pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when present should display the user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should work with IPv6 Host and port": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throw": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should not obscure FQDNs": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support array of paths with middleware array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given an object should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to BIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should return the full type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains with trusted X-Forwarded-Host should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .request should extend the request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "throw after .end() should fail gracefully": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should default to the parent app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include POST": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should allow naming": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SEARCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req should accept an argument list of type names": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.parent should return the parent when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, options, fn) caching should cache with cache option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNSUBSCRIBE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, ".sendfile(path, options) should pass options to send module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should transfer a directory index file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET /next should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol should return the protocol string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to POST request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should skip non error middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should escape the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should transfer a file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should do anything without type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include DELETE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when client already aborted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support mount-points": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should set max-age": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should throw when Content-Type is an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should not invoke without route handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should invoke middleware for all requests starting with path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when the request method is HEAD should ignore the body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should accept array of values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(code, body) should set .statusCode and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should strip path from req.url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET /files/amazing.txt should have a download header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should set the Content-Type based on a filename": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work in array of paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next() is called should continue lookup": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should encode \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should not override manual content-types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MERGE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with an absolute path should transfer the file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is not present should return the remote address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should send as octet-stream": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback without error when HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url, status) should set the response status": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when not present should 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET / should respond with instructions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should escape utf whitespace": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support empty string path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should respond with 304 Not Modified when fresh": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "in production should enable \"view cache\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/view should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should defer to next route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should not error if the client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should append multiple headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support buffer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should allow fallthrough": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle single error handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support absolute paths": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should not be affected by app.all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should decore the capture": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow rewriting of the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SOURCE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support utf8 strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should cap to the given size when open-ended": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject Date as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(err) is called should break out of app.router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should eat everything after /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include ACL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work \"view engine\" with leading \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) should allow options to res.sendFile()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /user/:id should update the user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should return the full type when matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should call when values differ": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should return the app when undefined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages should be true if language accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id/pets should get a users pets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should not touch already-encoded sequences in \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should span multiple segments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with a valid api key should respond user repos json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.path() should return the canonical": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call param function when routing VERBS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is extended should parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should return parsed ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /users/foo-bar should fail integer parsing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should only include each method once": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .handle should dispatch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should stack": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages when Accept-Language is not present should always return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /pet/2 should update the pet": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should work with several": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should map a template engine": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when a \"view\" constructor is given should create an instance of it": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name) should check req.body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should strip port number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when content-type is not present should return false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.locals over app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET /missing should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /posts should get a list of posts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path with non-GET should still serve": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should prefer child \"trust proxy\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given an array should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given when array of paths should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, value) should set the response header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support mounted app anywhere": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should not mutate the options object": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should not set a charset of one is already set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should map logic for a single param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .status(code) when code is undefined should throw a TypeError": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /login should display login error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call when values differ": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to NOTIFY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting neither text or html should respond with an empty body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should have a .type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.all() should add a router per method": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "markdown GET / should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should return a new route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id/edit should display the edit form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept nested arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should default to Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should all .VERB after .all": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should allow []": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should denote a capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost bar.example.com GET / should redirect to /bar": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept multiple arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should default to application/octet-stream": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should return undefined if no range": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback on 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains otherwise should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should expose res.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should case-insensitive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, object) should generate a JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PROPPATCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should handle missing URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work without leading \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should work with IPv4 address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include SEARCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should work \"view engine\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(body, code) should be supported for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1 should respond with user 1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MERGE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should coerce to an array of strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support absolute paths with \"view engine\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should handle render error throws": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkcalendar": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should add handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include CHECKOUT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.listen() should wrap with an HTTP server": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router when no match is made should should respond with 406 not acceptable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should override charset in Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should be called for any URL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PUT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not override previous Content-Types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unbind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow escaped regexp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"headers\" option should ignore headers option on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies POST / should set a cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.link": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should travel through routers correctly": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should work with IPv6 address": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies POST / should no set cookie w/o reminder": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .status(code) when code is null should throw a TypeError": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(object) should coerce to a string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return true without response headers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is not present should return []": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set the header to \"/\" without referrer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguage should be false if language not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename) should provide an alternate filename": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .signedCookies should return a signed JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(null) should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) maxAge should set relative expires": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should 404 without routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should work cross-segment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router .:name? should denote an optional format": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.source": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support absolute paths with \"view engine\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should allow merging existing req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .route should be the executed Route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET / should redirect to /login": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should throw missing header name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /logout should redirect to /": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .response should not be influenced by other app protos": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) given .default should be invoked instead of auto-responding": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should ignore object callback parameter with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should not send ETag for res.send()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should inherit \"trust proxy\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is missing should return false when http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation POST /user/:id/edit?_method=PUT should edit a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to HEAD request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"view engine\" is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include REPORT": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 404 for directory": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(fn) should fail if not given fn": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route should work without handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should work inside literal parenthesis": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should return undefined otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET / should respond with instructions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name) should check req.query": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json for null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept multiple arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject null as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost example.com GET /foo should say foo": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should fail without proper password": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include M-SEARCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"trust proxy\" should set \"trust proxy fn\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given an array should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should ignore FQDN in path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should not call when values differ on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /restricted should succeed with proper cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users/:id should get a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharset(type) when Accept-Charset is not present should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should restore req.params after leaving router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should transfer the file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should work with cookies": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" an unknown value should throw": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation PUT /user/:id/edit should edit a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for Number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should return a function with router methods": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "without NODE_ENV should default to development": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should permit modifying the .request prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include REBIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(status, url) should set the response status": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.render() locals over res.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.purge": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should ignore headers option on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(undefined) should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with an empty array should not set Vary": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKACTIVITY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .all should handle VERBS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) should support index.<engine>": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .response should extend the response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params when more in parent": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map DELETE /users should delete users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(status, object) should respond with json and set the .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to SOURCE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.del": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .fresh should return false when the resource is modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharset(type) when Accept-Charset is not present should return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should respond with html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should require middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag for long response": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should take quality into account": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /user/0 should respond with a user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include TRACE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET / should redirect to /users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return false when not present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) should set params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users with a valid api key should respond users json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Object) should send as application/json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should 404 for directory without trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should support .get": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should expose app.locals with `name` property": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should respond to cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should transfer a file": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should default to text/html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path) should transfer as an attachment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept multiple arguments": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should return the Host when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" disabled should not parse query": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id should 404 on missing user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given */subtype should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name should allow several capture groups": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when an error occurs should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res on failure should remove Content-Disposition": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback when client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disabled() should default to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .engine(ext, fn) should throw when the callback is missing": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error GET / should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.delete": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKCALENDAR": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should be chainable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set when present should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should throw on old middlewares": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should respond with no cookies": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .param(name) should check req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should work within arrays": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() should return undefined when unset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return false when http": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should set the child's .parent": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should default the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object, status) should use status as second number for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"view engine\" is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should adjust FQDN req.url with multiple routed handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should not touch already-encoded sequences in \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.m-search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages GET / should respond with page list": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /404 should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service when requesting an invalid route should respond with 404 json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.patch": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should contain lower path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should error for non-string path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle errors via arity 4 functions": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not perform freshness check unless 2xx or 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.del() should alias app.delete()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .locals should be empty by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource DELETE /users/9 should fail": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.post": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should error without \"view engine\" set and file extension to a non-engine module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .locals(obj) should merge locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1..3.json should respond with users 2 and 3 as json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users with an invalid api key should respond with 401 unauthorized": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .status(code) should set the response .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) \"json spaces\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should support regexp path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 304 when ETag matches": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback when client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource DELETE /users/1 should delete user 1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(object) should set multiple fields": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNLINK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should encode \"url\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET /users should accept to text/plain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when disabled should send no ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object, status) should use status as second number for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should disallow requesting out of \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object, status) should respond with json and set the .statusCode for backwards compat": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(utf8filename) should add the filename and filename* params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support empty string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v1/users should respond with users from APIv1": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PROPFIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should keep charset in Content-Type for Buffers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should ignore invalid incoming req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) when \"views\" is given should lookup the file in the path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(err) is called should call handler in same route, if exists": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the response prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should utilize qvalues in negotiation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PURGE": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should throw for non-string header name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should overwrite existing req.params by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should encode the url": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router .:name should denote a format": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should transfer a file with urlencoded name": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with extnames should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.head() should override": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include LOCK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res on failure should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when an extension is given should render the template": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(\"router\") is called should jump out of router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should support altering req.params across routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, values) should set multiple response header fields": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is extended should parse parameters with dots": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should include ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"etag\" should throw on bad value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, fn) should invoke the callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.wetag(body, encoding) should support strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should allow renaming callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should use params from router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.isAbsolute() should support windows": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.flatten(arr) should flatten an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .get(field) should get the response header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with an array should set the values": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncodingss should be true if encoding accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when next(\"route\") is called should jump to next route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose the application prototype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(filename) should add the filename param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .set(field, value) should coerce to a string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string) should set a cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.propfind": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendStatus(statusCode) should work with unknown code": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should invoke the callback when client already aborted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router when given a regexp should populate req.params with the captures": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to REPORT request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router decode params should decode correct params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should invoke middleware for all requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should catch thrown secondary error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should override previous Content-Types with callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unsubscribe": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() \"etag\" should set \"etag fn\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/9 should respond with error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to TRACE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject number as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing in handler after async param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /user/:id when present should display the users pets": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return the first acceptable type with canonical mime types": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharsets(type) when Accept-Charset is not present should return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should inherit from event emitter": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include MKCOL": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users/1..3 should respond with users 1 through 3": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET / should respond with index": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .VERB() should only call an error handling routing callback when an error is propagated": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.isAbsolute() should support unices": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should work with IPv6 Host and port": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should work with res.set(field, val) first": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback without error when 304": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNBIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.setCharset(type, charset) should override charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() when the value is present should not add it again": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should catch thrown error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNLOCK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: application/json GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include GET": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.move": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router :name? should populate the capture group": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given an object should respond with json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should not stack overflow with many registered routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when \"weak\" should send weak ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should defer all the param routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when a function should send custom ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) when the file does not exist should provide a helpful error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should not respond if the path is not defined": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept multiple arrays of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when a function should not send falsy ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(types) should return false when no match is made": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/view should 404 on missing user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(middleware) should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should allow literal \".\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to PURGE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth GET /login should render login form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should call param function when routing middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject null as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncodingss should be false if encoding not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .accepts(type) should return true when present": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should reject string as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname should return undefined otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .redirect(url) should default to a 302 redirect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing inside error handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should expose app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /users/0-2 should respond with three users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to DELETE request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should not error if the client aborts": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) caching should always lookup view without cache": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should transfer a file with special characters in string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should be .use()able": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json for Number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) should set the header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enable() should set the value to true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should send as html": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include LINK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size) should accept any type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should return false when not matching": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) should not serve dotfiles": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "vhost foo.example.com GET / should redirect to /foo": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should be empty for top-level route": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to LOCK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment() should Content-Disposition to attachment": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disabled() should return false when set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-map GET /users should respond with users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given type/* should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS when error occurs in response handler should pass error to callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .clearCookie(name) should set a cookie passed expiry": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) given .default should work when only .default is provided": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should not escape utf whitespace for json fallback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should default to Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PATCH": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with a string should set the value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "HEAD should output the same headers as GET requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should call when values differ when using \"next\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.route should not error on empty routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendStatus(statusCode) should send the status code and message as body": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting html should include the redirect type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should capture everything": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .enabled() should return true when set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app should be callable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route errors should handle throwing inside error handlers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, fn) should pass the resulting string": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(path, middleware) should work if path has trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should next(404) when not found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should require middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .append(field, val) should get reset by res.set(field, val)": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res.vary() with no arguments should not set Vary": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .baseUrl should contain full lower path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.mountpath should return the mounted path": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include OPTIONS": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router params should merge numeric indices req.params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .disable() should set the value to false": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.isAbsolute() should support windows unc": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return false when the resource is not modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .clearCookie(name, options) should set the given params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) in router should Vary: Accept": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .path should return the parsed pathname": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .cookie(name, string, options) signed should generate a signed JSON cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /500 should respond with 500": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsEncoding should be false if encoding not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when present should return an array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "auth POST /login should succeed with proper credentials": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include COPY": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET / should have a form": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"root\" option should serve relative to \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, fn) should invoke the callback on 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET / should have a link to amazing.txt": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.lock": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when \"strong\" should send strong ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .subdomains when subdomain offset is set otherwise should return an empty array": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should accept array of middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include UNLOCK": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc GET /pet/0/edit should get pet edit page": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send() should set body to \"\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /user/:id/edit should get a user to edit": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should re-route when method is altered": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .get(field) should special-case Referer": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should work when mounted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router case sensitivity should be disabled by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .links(obj) should set Link header field for multiple calls": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .stale should return true when the resource is modified": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "markdown GET /fail should respond with an error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.unlock": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to GET request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(code, number) should send number as json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .param should only call once per request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/html GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should serve relative to \"root\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Route .VERB should limit to just .VERB": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "utils.etag(body, encoding) should support utf8 strings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .links(obj) should set Link header field": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "params GET /user/9 should fail to find user": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res when accepting text should respond with text": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() when mounted should given precedence to the child": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.options": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should not override Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "resource GET /users should respond with all users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router FQDN should ignore FQDN in search": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to REBIND request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v2/ should respond with APIv2 root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with parameters should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) with \"headers\" option should accept headers option": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser\" is a function should parse using function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for null": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router trailing slashes when \"strict routing\" is enabled should match middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) when given primitives should respond with json for String": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include PROPFIND": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "exports should expose Router": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should error without \"view engine\" set and no file extension": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "middleware .next() should behave like connect": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should strip port number": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) when given primitives should respond with json for String": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.copy": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .use(app) should support dynamic routes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .xhr should return true when X-Requested-With is xmlhttprequest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookie-sessions GET / should display no views": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(filename) should set the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.report": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguage should be true if language accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path) should 404 when not found": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendFile(path, options) should pass options to send module": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(Buffer) should set ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "OPTIONS should forward requests down the middleware chain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .multiple callbacks should throw if a callback is not a function": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.all() should run the callback for a method just once": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguage when Accept-Language is not present should always return true": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path, fn) should utilize the same options as express.static()": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(fn) should map app.param(name, ...) logic": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should set location from \"Referrer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .get() should otherwise return the value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/repos with a valid api key should respond repos json": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name) should support index.<engine>": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req.is() when given a mime type should ignore charset": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "cookies GET /forget should clear cookie": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query should default to parse complex keys": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should respond with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "web-service GET /api/users without an api key should respond with 400 bad request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "error-pages Accept: text/plain GET /403 should respond with 403": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should set a value": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router error should handle throwing inside routes with params": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "config .set() should return the app": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .range(size, options) with \"combine: true\" option should return combined ranges": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc PUT /user/:id should 500 on error": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should not be greedy immediately after param": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host should work with IPv6 Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .render(name, option) should give precedence to res.render() locals over app.locals": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to COPY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "content-negotiation GET / should accept to text/plain": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should be chainable": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should reject numbers for app.mkactivity": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .locals.settings should expose app settings": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json spaces\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should use first callback parameter with jsonp": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .acceptsLanguages should be false if language not accepted": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(String) should set ETag": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .sendfile(path) with a relative path should allow ../ when \"root\" is set": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .type(str) should set the Content-Type with type/subtype": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router * should keep correct parameter indexes": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .location(url) when url is \"back\" should prefer \"Referrer\" header": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .param(name, fn) should only call once per request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "route-separation GET /users should list users": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v1/ should respond with APIv1 root handler": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "multi-router GET /api/v2/users should respond with users from APIv2": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router .use should reject string as middleware": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "downloads GET /files/missing.txt should respond with 404": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router should support .use of other routers": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router methods should include HEAD": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app .render(name, fn) caching should cache with \"view cache\" setting": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "app.router should run in order added": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .jsonp(object) should include security header and prologue": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query should default to {}": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "Router parallel requests should not mix requests": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .attachment(utf8filename) should set the Content-Type": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .send(code) should set .statusCode": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res .json(object) \"json escape\" setting should be undefined by default": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res \"etag\" setting when enabled should send ETag in response to LINK request": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "req .query when \"query parser fn\" is missing should act like \"extended\"": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "res should not support jsonp callbacks": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "mvc POST /user/:id/pet should create a pet for user": {"run": "PASS", "test": "PASS", "fix": "PASS"}}, "f2p_tests": {"req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should remove OWS around comma": {"run": "NONE", "test": "FAIL", "fix": "PASS"}, "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should use the first value": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "s2p_tests": {}, "n2p_tests": {}, "run_result": {"passed_count": 853, "failed_count": 0, "skipped_count": 0, "passed_tests": ["app should emit \"mount\" when mounted", "res .jsonp(object) when given primitives should respond with json", "res .sendfile(path) should accept dotfiles option", "req .accepts(types) should return the first acceptable type", "res .sendFile(path) should error missing path", "app.router methods should reject numbers for app.rebind", "res .json(object) should not support jsonp callbacks", "res .sendfile(path, fn) should invoke the callback when complete", "app.router * should denote a greedy capture group", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "app.router methods should include BIND", "req .query when \"query parser\" disabled should not parse complex keys", "Router .multiple callbacks should throw if a callback is undefined", "req.is() when given a mime type should return the type when matching", "Router .all should be called for any URL when \"*\"", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "req .accepts(type) should return false otherwise", "vhost example.com GET / should say hello", "multi-router GET / should respond with root handler", "req .host should return the Host when present", "auth GET /restricted should redirect to /login without cookie", "app .param(names, fn) should map the array", "app.router methods should reject numbers for app.search", "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to ACL request", "res .jsonp(object) should not override previous Content-Types with no callback", "auth POST /login should fail without proper username", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "utils.setCharset(type, charset) should keep charset if not given charset", "res .sendFile(path, fn) should invoke the callback when complete", "res .cookie(name, string, options) signed without secret should throw an error", "res \"etag\" setting when disabled should send ETag when manually set", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.bind", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app.router :name should match a single segment only", "app.router methods should include NOTIFY", "app .render(name, options, fn) should render the template", "req .acceptsEncoding should be true if encoding accepted", "res .format(obj) with parameters should allow wildcard type/subtypes", "app.router * should require a preceding /", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "utils.wetag(body, encoding) should support buffer", "res .format(obj) in router should default the Content-Type", "content-negotiation GET / should accept to application/json", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "res .send(Buffer) should not override ETag", "req .range(size) should cap to the given size", "req .fresh should return false without response headers", "res when accepting text should include the redirect type", "app.router methods should include PUT", "exports should permit modifying the .application prototype", "app.router methods should reject numbers for app.acl", "res .send(Buffer) should not override Content-Type", "app .param(name, fn) should work with encoded values", "app .render(name, fn) should expose app.locals", "Router .multiple callbacks should not throw if all callbacks are functions", "app.router methods should reject numbers for app.proppatch", "res .format(obj) in router when Accept is not present should invoke the first callback", "app.router methods should reject numbers for app.subscribe", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "route-map GET /users/:id/pets/:pid should get a users pet", "app.router methods should include DEL", "res .render(name) should support absolute paths", "Router should handle blank URL", "app.router methods should include UNBIND", "req .accepts(type) should return true when Accept is not present", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "res \"etag\" setting when enabled should send ETag for empty string response", "Router FQDN should adjust FQDN req.url with multiple handlers", "app.options() should override the default behavior", "Router .use should reject number as middleware", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.merge", "in development should disable \"view cache\"", "utils.etag(body, encoding) should support empty string", "Router .use should reject Date as middleware", "res .sendFile(path) should not override manual content-types", "Route errors should handle throw in .all", "app .use(path, middleware) should support array of paths", "res .render(name) when an error occurs should next(err)", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "req .accepts(types) should return the first when Accept is not present", "config .enabled() should default to false", "app.router methods should reject numbers for app.checkout", "cookie-sessions GET / should set a session cookie", "app.router methods should reject numbers for app.get", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "res .render(name, options, fn) should pass the resulting string", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "res \"etag\" setting when enabled should not override ETag when manually set", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "app.router decode params should not accept params in malformed paths", "app.router when given a regexp should match the pathname only", "error-pages Accept: application/json GET /404 should respond with 404", "app.router trailing slashes should be optional by default", "app.router methods should reject numbers for app.head", "res .sendfile(path, fn) should invoke the callback without error when HEAD", "app .render(name, options, fn) should give precedence to app.render() locals", "res should always check regardless of length", "req .hostname should work with IPv6 Host", "app.router decode params should work with unicode", "content-negotiation GET / should default to text/html", "app.router methods should include SUBSCRIBE", "res .sendFile(path) with \"root\" option should not transfer relative with without", "res .jsonp(status, object) should respond with json and set the .statusCode", "req.is() when given */subtype should return false when not matching", "ejs GET / should respond with html", "res .render(name, fn) when an error occurs should pass it to the callback", "utils.setCharset(type, charset) should return type if not given charset", "app.router methods should include MOVE", "app.router methods should reject numbers for app.unlink", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "app .VERB() should not get invoked without error handler on error", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router * should be optional", "req .fresh should return true when the resource is not modified", "res .jsonp(object) should disallow arbitrary js", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "res .render(name, option) should render the template", "res .json(object) should not override previous Content-Types", "app.router params should merge numeric indices req.params when parent has same number", "app.router methods should reject numbers for app.put", "req.is() when given an extension should lookup the mime type", "res .sendfile(path, fn) should invoke the callback on socket error", "utils.setCharset(type, charset) should set charset", "res .sendfile(path, fn) should invoke the callback without error when 304", "app .use(middleware) should accept nested arrays of middleware", "app .use(app) should mount the app", "app.router methods should reject numbers for app.mkcol", "app.router :name should work following a partial capture group", "res .sendfile(path) should accept headers option", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app.router params should restore req.params", "app.router should throw with notice", "app.router :name? should denote an optional capture group", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains with no host should return an empty array", "Router .all should support using .all to capture all http verbs", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "content-negotiation GET /users should accept to application/json", "HEAD should default to GET", "res .format(obj) with extnames should set the correct charset for the Content-Type", "res .format(obj) with parameters should Vary: Accept", "exports should permit modifying the .response prototype", "app.router decode params should not decode spaces", "res .cookie(name, string) should allow multiple calls", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "res .jsonp(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "req .param(name, default) should use the default value unless defined", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "mvc GET /users should display a list of users", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "cookie-sessions GET / should display 1 view on revisit", "app.router methods should reject numbers for app.trace", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "req .get(field) should return the header field value", "app.router methods should reject numbers for app.notify", "mvc GET /pet/0 should get pet", "mvc GET /user/:id when present should display the user", "req .hostname should work with IPv6 Host and port", "Route errors should handle throw", "Router FQDN should not obscure FQDNs", "app .use(path, middleware) should support array of paths with middleware array", "res .jsonp(object) when given an object should respond with json", "res \"etag\" setting when enabled should send ETag in response to BIND request", "req.is() when given type/* should return the full type when matching", "req .subdomains with trusted X-Forwarded-Host should return an array", "app .request should extend the request prototype", "throw after .end() should fail gracefully", "config .get() when mounted should default to the parent app", "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set", "app.router methods should include POST", "app.router * should allow naming", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "req should accept an argument list of type names", "app.parent should return the parent when mounted", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should include UNSUBSCRIBE", ".sendfile(path, options) should pass options to send module", "Router FQDN should adjust FQDN req.url", "res .sendfile(path) should transfer a directory index file", "error GET /next should respond with 500", "req .protocol should return the protocol string", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "res \"etag\" setting when enabled should send ETag in response to POST request", "Router error should skip non error middleware", "res when accepting html should escape the url", "res .sendfile(path) should transfer a file", "req .xhr should return false otherwise", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "utils.setCharset(type, charset) should do anything without type", "app.router methods should include DELETE", "res .sendFile(path, fn) should invoke the callback when client already aborted", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "app .use(app) should support mount-points", "res .cookie(name, string, options) maxAge should set max-age", "res .set(field, values) should throw when Content-Type is an array", "app .param(name, fn) should not invoke without route handler", "app .use(path, middleware) should invoke middleware for all requests starting with path", "res when the request method is HEAD should ignore the body", "res .append(field, val) should accept array of values", "res .send(code, body) should set .statusCode and body", "app .use(path, middleware) should strip path from req.url", "res .format(obj) in router should set the correct charset for the Content-Type", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "downloads GET /files/amazing.txt should have a download header", "res .type(str) should set the Content-Type based on a filename", "app.router :name should work in array of paths", "res .download(path, filename, options, fn) should invoke the callback", "app.router when next() is called should continue lookup", "res .redirect(url) should encode \"url\"", "res .sendfile(path, fn) should not override manual content-types", "app.router methods should include MERGE", "res .sendfile(path) with an absolute path should transfer the file", "req .ip when X-Forwarded-For is not present should return the remote address", "res .send(Buffer) should send as octet-stream", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "res .redirect(url, status) should set the response status", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "mvc GET /user/:id when not present should 404", "resource GET / should respond with instructions", "res .jsonp(object) should escape utf whitespace", "app .use(path, middleware) should support empty string path", "res should respond with 304 Not Modified when fresh", "in production should enable \"view cache\"", "route-separation GET /user/:id/view should get a user", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "app .param(name, fn) should defer to next route", "res .sendfile(path) should not error if the client aborts", "res .append(field, val) should append multiple headers", "utils.etag(body, encoding) should support buffer", "Route .VERB should allow fallthrough", "Route errors should handle single error handler", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app .render(name, fn) should support absolute paths", "OPTIONS should not be affected by app.all", "app.router * should decore the capture", "app.router should allow rewriting of the url", "app.router methods should include SOURCE", "utils.wetag(body, encoding) should support utf8 strings", "req .range(size) should cap to the given size when open-ended", "app .use(path, middleware) should reject Date as middleware", "app.router when next(err) is called should break out of app.router", "app.router * should eat everything after /", "app.router methods should include ACL", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "mvc PUT /user/:id should update the user", "req.is() when given */subtype should return the full type when matching", "app .param(name, fn) should call when values differ", "config .set() should return the app when undefined", "req .acceptsLanguages should be true if language accepted", "route-map GET /users/:id/pets should get a users pets", "res .location(url) should not touch already-encoded sequences in \"url\"", "app.router * should span multiple segments", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "app.path() should return the canonical", "Router .param should call param function when routing VERBS", "req .query when \"query parser\" is extended should parse complex keys", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "req .range(size) should return parsed ranges", "params GET /users/foo-bar should fail integer parsing", "OPTIONS should only include each method once", "Router .handle should dispatch", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "Route .all should stack", "req .acceptsLanguages when Accept-Language is not present should always return true", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "mvc PUT /pet/2 should update the pet", "app.router * should work with several", "res .format(obj) in router should utilize qvalues in negotiation", "app .engine(ext, fn) should map a template engine", "error-pages Accept: text/html GET /404 should respond with 404", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "req .param(name) should check req.body", "req .hostname should strip port number", "req.is() when content-type is not present should return false", "res .render(name, option) should give precedence to res.locals over app.locals", "res .format(obj) with parameters should default the Content-Type", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively", "error GET /missing should respond with 404", "route-separation GET /posts should get a list of posts", "res .sendfile(path) with a relative path with non-GET should still serve", "config .get() when mounted should prefer child \"trust proxy\" setting", "res .json(object) when given an array should respond with json", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "error-pages Accept: application/json GET /403 should respond with 403", "res .set(field, value) should set the response header field", "exports should expose the request prototype", "app .use(app) should support mounted app anywhere", "res .cookie(name, string, options) maxAge should not mutate the options object", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "res .set(field, values) should not set a charset of one is already set", "app .param(name, fn) should map logic for a single param", "res .status(code) when code is undefined should throw a TypeError", "auth GET /login should display login error", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "Router .param should call when values differ", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "res when accepting neither text or html should respond with an empty body", "req .range(size) should have a .type", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "app.all() should add a router per method", "markdown GET / should respond with html", "app.route should return a new route", "mvc GET /user/:id/edit should display the edit form", "app .use(path, middleware) should accept nested arrays of middleware", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "req .host when \"trust proxy\" is enabled should default to Host", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "res .format(obj) with canonicalized mime types should Vary: Accept", "app.route should all .VERB after .all", "res .jsonp(object) should allow []", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "app.router :name should denote a capture group", "vhost bar.example.com GET / should redirect to /bar", "app .use(path, middleware) should accept multiple arrays of middleware", "res .type(str) should default to application/octet-stream", "req .range(size) should return undefined if no range", "res .sendfile(path, fn) should invoke the callback on 403", "req .subdomains otherwise should return an empty array", "res .render(name, option) should expose res.locals", "req .xhr should case-insensitive", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "res .cookie(name, object) should generate a JSON cookie", "app.router methods should include PROPPATCH", "Router should handle missing URL", "app .engine(ext, fn) should work without leading \".\"", "req .subdomains when present should work with IPv4 address", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "app.router methods should include SEARCH", "app .engine(ext, fn) should work \"view engine\" setting", "res .send(body, code) should be supported for backwards compat", "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat", "resource GET /users/1 should respond with user 1", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "res .set(field, values) should coerce to an array of strings", "app .render(name, fn) should support absolute paths with \"view engine\"", "app .render(name, fn) should handle render error throws", "app.router methods should reject numbers for app.mkcalendar", "Route .all should add handler", "app.router methods should include CHECKOUT", "app.listen() should wrap with an HTTP server", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .send(String) should override charset in Content-Type", "Router .use should be called for any URL", "res \"etag\" setting when enabled should send ETag in response to PUT request", "res should not override previous Content-Types", "app.router methods should reject numbers for app.unbind", "app.router should allow escaped regexp", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "cookies POST / should set a cookie", "app.router methods should reject numbers for app.link", "req .baseUrl should travel through routers correctly", "res .sendfile(path, fn) should invoke the callback on 404", "req .subdomains when present should work with IPv6 address", "cookies POST / should no set cookie w/o reminder", "res .status(code) when code is null should throw a TypeError", "res .set(object) should coerce to a string", "req .stale should return true without response headers", "req .ips when X-Forwarded-For is not present should return []", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "req .acceptsLanguage should be false if language not accepted", "res .download(path, filename) should provide an alternate filename", "req .signedCookies should return a signed JSON cookie", "res .send(null) should set body to \"\"", "res .cookie(name, string, options) maxAge should set relative expires", "app should 404 without routes", "app.router * should work cross-segment", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "app.router .:name? should denote an optional format", "app.router methods should reject numbers for app.source", "res .render(name) should support absolute paths with \"view engine\"", "app.router params should allow merging existing req.params", "req .route should be the executed Route", "auth GET / should redirect to /login", "req .get(field) should throw missing header name", "auth GET /logout should redirect to /", "app .response should not be influenced by other app protos", "res .format(obj) given .default should be invoked instead of auto-responding", "res .jsonp(object) should ignore object callback parameter with jsonp", "res \"etag\" setting when enabled should not send ETag for res.send()", "config .get() when mounted should inherit \"trust proxy\" setting", "req .secure when X-Forwarded-Proto is missing should return false when http", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app .render(name, fn) when \"view engine\" is given should render the template", "res .format(obj) in router should allow wildcard type/subtypes", "app.router methods should include REPORT", "res .sendFile(path) should 404 for directory", "app .param(fn) should fail if not given fn", "Route should work without handlers", "app.router :name should work inside literal parenthesis", "req .host should return undefined otherwise", "res .download(path, fn) should invoke the callback", "params GET / should respond with instructions", "req .param(name) should check req.query", "res .jsonp(object) when given primitives should respond with json for null", "app .use(middleware) should accept multiple arguments", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "Router .use should reject null as middleware", "vhost example.com GET /foo should say foo", "auth POST /login should fail without proper password", "app.route should support dynamic routes", "app.router methods should include M-SEARCH", "route-separation GET /user/:id should get a user", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "res .jsonp(object) when given an array should respond with json", "Router FQDN should ignore FQDN in path", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "app .param(name, fn) should not call when values differ on error", "auth GET /restricted should succeed with proper cookie", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "route-map GET /users/:id should get a user", "req .acceptsCharset(type) when Accept-Charset is not present should return true when present", "app.router should restore req.params after leaving router", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .sendfile(path) with a relative path should transfer the file", "res .append(field, val) should work with cookies", "req .query when \"query parser\" an unknown value should throw", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "route-separation PUT /user/:id/edit should edit a user", "res .json(object) when given primitives should respond with json for Number", "Router should return a function with router methods", "without NODE_ENV should default to development", "exports should permit modifying the .request prototype", "app.router methods should include REBIND", "res .redirect(status, url) should set the response status", "res .render(name, option) should give precedence to res.render() locals over res.locals", "app.router methods should reject numbers for app.purge", "res .sendfile(path) should ignore headers option on 404", "res .send(undefined) should set body to \"\"", "res.vary() with an empty array should not set Vary", "app.router methods should include MKACTIVITY", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "Route .all should handle VERBS", "app .render(name, fn) should support index.<engine>", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "app .response should extend the response prototype", "app.router params should merge numeric indices req.params when more in parent", "route-map DELETE /users should delete users", "res .json(status, object) should respond with json and set the .statusCode", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "app.router methods should reject numbers for app.del", "req .fresh should return false when the resource is modified", "req .acceptsCharset(type) when Accept-Charset is not present should return true", "req.is() when given a mime type should return false when not matching", "res when accepting html should respond with html", "res .format(obj) with extnames should default the Content-Type", "app .use(path, middleware) should require middleware", "res \"etag\" setting when enabled should send ETag for long response", "req .accepts(types) should take quality into account", "params GET /user/0 should respond with a user", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include TRACE", "mvc GET / should redirect to /users", "req .xhr should return false when not present", "res .cookie(name, string, options) should set params", "web-service GET /api/users with a valid api key should respond users json", "res .send(Object) should send as application/json", "res .sendfile(path) should 404 for directory without trailing slash", "Route .VERB should support .get", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .render(name) should expose app.locals with `name` property", "cookies GET / should respond to cookie", "res .sendFile(path) should transfer a file", "content-negotiation GET /users should default to text/html", "res .download(path) should transfer as an attachment", "app .use(path, middleware) should accept multiple arguments", "req .hostname should return the Host when present", "req .query when \"query parser\" disabled should not parse query", "route-separation GET /user/:id should 404 on missing user", "req.is() when given */subtype should ignore charset", "app.router :name should allow several capture groups", "app .render(name, fn) when an error occurs should invoke the callback", "res on failure should remove Content-Disposition", "res .sendfile(path, fn) should invoke the callback when client aborts", "config .disabled() should default to true", "app .engine(ext, fn) should throw when the callback is missing", "app .use(path, middleware) should accept array of middleware", "res .render(name, option) should expose app.locals", "error GET / should respond with 500", "Router should support dynamic routes", "app.router methods should reject numbers for app.delete", "app.router methods should include MKCALENDAR", "app.router should be chainable", "utils.etag(body, encoding) should support strings", "req .subdomains when subdomain offset is set when present should return an array", "exports should throw on old middlewares", "cookies GET / should respond with no cookies", "req .param(name) should check req.params", "app.router * should work within arrays", "config .get() should return undefined when unset", "req .secure when X-Forwarded-Proto is present should return false when http", "app .use(app) should set the child's .parent", "res .format(obj) with canonicalized mime types should default the Content-Type", "res .json(object, status) should use status as second number for backwards compat", "res .render(name) when \"view engine\" is given should render the template", "res .format(obj) with extnames should Vary: Accept", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "app.router methods should reject numbers for app.m-search", "error-pages GET / should respond with page list", "error-pages Accept: text/plain GET /404 should respond with 404", "web-service when requesting an invalid route should respond with 404 json", "app.router methods should reject numbers for app.patch", "req .baseUrl should contain lower path", "error-pages Accept: text/plain GET /500 should respond with 500", "res .sendFile(path) should error for non-string path", "Route errors should handle errors via arity 4 functions", "res should not perform freshness check unless 2xx or 304", "app.del() should alias app.delete()", "res .locals should be empty by default", "resource DELETE /users/9 should fail", "app.router methods should reject numbers for app.post", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "app .locals(obj) should merge locals", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "res .status(code) should set the response .statusCode", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app .use(path, middleware) should support regexp path", "res .sendFile(path) should 304 when ETag matches", "res .sendFile(path, fn) should invoke the callback when client aborts", "resource DELETE /users/1 should delete user 1", "res .set(object) should set multiple fields", "app.router methods should include UNLINK", "res .location(url) should encode \"url\"", "content-negotiation GET /users should accept to text/plain", "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise", "res \"etag\" setting when disabled should send no ETag", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "res .jsonp(object, status) should use status as second number for backwards compat", "res .sendfile(path) with a relative path should disallow requesting out of \"root\"", "res .json(object, status) should respond with json and set the .statusCode for backwards compat", "res .attachment(utf8filename) should add the filename and filename* params", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "utils.wetag(body, encoding) should support empty string", "multi-router GET /api/v1/users should respond with users from APIv1", "res .format(obj) with parameters should utilize qvalues in negotiation", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "res .send(String) should keep charset in Content-Type for Buffers", "app.router params should ignore invalid incoming req.params", "res .render(name) when \"views\" is given should lookup the file in the path", "app.router when next(err) is called should call handler in same route, if exists", "exports should expose the response prototype", "res .format(obj) with extnames should utilize qvalues in negotiation", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "app.router methods should include PURGE", "req .get(field) should throw for non-string header name", "app.router params should overwrite existing req.params by default", "res when accepting text should encode the url", "app.router .:name should denote a format", "res .sendfile(path) should transfer a file with urlencoded name", "res .format(obj) with extnames should allow wildcard type/subtypes", "app.head() should override", "app.router methods should include LOCK", "res on failure should invoke the callback", "app .render(name, fn) when an extension is given should render the template", "app.router when next(\"router\") is called should jump out of router", "app .param(name, fn) should support altering req.params across routes", "res .set(field, values) should set multiple response header fields", "req .query when \"query parser\" is extended should parse parameters with dots", "res .sendFile(path) should include ETag", "config .set() \"etag\" should throw on bad value", "res .download(path, filename, fn) should invoke the callback", "utils.wetag(body, encoding) should support strings", "res .jsonp(object) should allow renaming callback", "app.router params should use params from router", "utils.isAbsolute() should support windows", "utils.flatten(arr) should flatten an array", "res .get(field) should get the response header field", "res.vary() with an array should set the values", "req .acceptsEncodingss should be true if encoding accepted", "app.router when next(\"route\") is called should jump to next route", "exports should expose the application prototype", "res .attachment(filename) should add the filename param", "res .set(field, value) should coerce to a string", "res .cookie(name, string) should set a cookie", "app.router methods should reject numbers for app.propfind", "res .sendStatus(statusCode) should work with unknown code", "res .sendfile(path, fn) should invoke the callback when client already aborted", "app.router when given a regexp should populate req.params with the captures", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "app.router decode params should decode correct params", "app .use(middleware) should invoke middleware for all requests", "app .param(name, fn) should catch thrown secondary error", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "res .jsonp(object) should override previous Content-Types with callback", "app.router methods should reject numbers for app.unsubscribe", "config .set() \"etag\" should set \"etag fn\"", "resource GET /users/9 should respond with error", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "app .use(path, middleware) should reject number as middleware", "Router error should handle throwing in handler after async param", "mvc GET /user/:id when present should display the users pets", "req .accepts(types) should return the first acceptable type with canonical mime types", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "app should inherit from event emitter", "app.router methods should include MKCOL", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "resource GET /users/1..3 should respond with users 1 through 3", "route-separation GET / should respond with index", "app .VERB() should only call an error handling routing callback when an error is propagated", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "utils.isAbsolute() should support unices", "req .host should work with IPv6 Host and port", "res .append(field, val) should work with res.set(field, val) first", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .sendFile(path, fn) should invoke the callback without error when 304", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "utils.setCharset(type, charset) should override charset", "res.vary() when the value is present should not add it again", "app .param(name, fn) should catch thrown error", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "error-pages Accept: application/json GET /500 should respond with 500", "app.router methods should include GET", "app.router methods should reject numbers for app.move", "app.router :name? should populate the capture group", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "res .json(object) when given an object should respond with json", "Router should not stack overflow with many registered routes", "res \"etag\" setting when \"weak\" should send weak ETag", "app .param(name, fn) should defer all the param routes", "res \"etag\" setting when a function should send custom ETag", "app .render(name, fn) when the file does not exist should provide a helpful error", "OPTIONS should not respond if the path is not defined", "app .use(middleware) should accept multiple arrays of middleware", "res \"etag\" setting when a function should not send falsy ETag", "req .accepts(types) should return false when no match is made", "route-separation GET /user/:id/view should 404 on missing user", "app .use(middleware) should accept array of middleware", "app.router should allow literal \".\"", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "auth GET /login should render login form", "Router .param should call param function when routing middleware", "app .use(path, middleware) should reject null as middleware", "req .acceptsEncodingss should be false if encoding not accepted", "req .accepts(type) should return true when present", "app .use(path, middleware) should reject string as middleware", "req .hostname should return undefined otherwise", "res .redirect(url) should default to a 302 redirect", "Router error should handle throwing inside error handlers", "res .render(name) should expose app.locals", "params GET /users/0-2 should respond with three users", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "res .sendFile(path) should not error if the client aborts", "app .render(name, fn) caching should always lookup view without cache", "res .sendFile(path) should transfer a file with special characters in string", "app.router should be .use()able", "res .jsonp(object) when given primitives should respond with json for Number", "res .location(url) should set the header", "config .enable() should set the value to true", "res .send(String) should send as html", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should include LINK", "req .range(size) should accept any type", "req.is() when given type/* should return false when not matching", "res .sendfile(path) should not serve dotfiles", "vhost foo.example.com GET / should redirect to /foo", "req .baseUrl should be empty for top-level route", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "res .attachment() should Content-Disposition to attachment", "config .disabled() should return false when set", "route-map GET /users should respond with users", "req.is() when given type/* should ignore charset", "OPTIONS when error occurs in response handler should pass error to callback", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .clearCookie(name) should set a cookie passed expiry", "Router .multiple callbacks should throw if a callback is null", "res .format(obj) given .default should work when only .default is provided", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored", "res .jsonp(object) should not escape utf whitespace for json fallback", "req .hostname when \"trust proxy\" is enabled should default to Host", "app.router methods should include PATCH", "res.vary() with a string should set the value", "HEAD should output the same headers as GET requests", "app .param(name, fn) should call when values differ when using \"next\"", "app.route should not error on empty routes", "res .sendStatus(statusCode) should send the status code and message as body", "res when accepting html should include the redirect type", "app.router * should capture everything", "config .enabled() should return true when set", "app should be callable", "Route errors should handle throwing inside error handlers", "res .render(name, fn) should pass the resulting string", "app .use(path, middleware) should work if path has trailing slash", "res .sendfile(path) with a relative path should next(404) when not found", "Router .use should require middleware", "res .append(field, val) should get reset by res.set(field, val)", "res.vary() with no arguments should not set Vary", "req .baseUrl should contain full lower path", "app.mountpath should return the mounted path", "app.router methods should include OPTIONS", "app.router params should merge numeric indices req.params", "config .disable() should set the value to false", "res \"etag\" setting when enabled should send ETag", "utils.isAbsolute() should support windows unc", "req .stale should return false when the resource is not modified", "res .clearCookie(name, options) should set the given params", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "res .format(obj) in router should Vary: Accept", "req .path should return the parsed pathname", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "error-pages Accept: text/html GET /500 should respond with 500", "req .acceptsEncoding should be false if encoding not accepted", "req .subdomains when present should return an array", "auth POST /login should succeed with proper credentials", "app.router methods should include COPY", "cookies GET / should have a form", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "res .sendFile(path, fn) should invoke the callback on 404", "downloads GET / should have a link to amazing.txt", "app.router methods should reject numbers for app.lock", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res \"etag\" setting when \"strong\" should send strong ETag", "req .subdomains when subdomain offset is set otherwise should return an empty array", "Router .use should accept array of middleware", "app.router methods should include UNLOCK", "mvc GET /pet/0/edit should get pet edit page", "res .send() should set body to \"\"", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "route-separation GET /user/:id/edit should get a user to edit", "app.router methods should re-route when method is altered", "req .get(field) should special-case Referer", "res should work when mounted", "app.router case sensitivity should be disabled by default", "res .links(obj) should set Link header field for multiple calls", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "req .stale should return true when the resource is modified", "markdown GET /fail should respond with an error", "app.router methods should reject numbers for app.unlock", "res \"etag\" setting when enabled should send ETag in response to GET request", "res .send(code, number) should send number as json", "Router .param should only call once per request", "error-pages Accept: text/html GET /403 should respond with 403", "res .sendfile(path) with a relative path should serve relative to \"root\"", "Route .VERB should limit to just .VERB", "utils.etag(body, encoding) should support utf8 strings", "res .links(obj) should set Link header field", "params GET /user/9 should fail to find user", "res when accepting text should respond with text", "config .get() when mounted should given precedence to the child", "app.router methods should reject numbers for app.options", "res .send(String) should not override Content-Type", "resource GET /users should respond with all users", "Router FQDN should ignore FQDN in search", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "multi-router GET /api/v2/ should respond with APIv2 root handler", "res .format(obj) with parameters should set the correct charset for the Content-Type", "res .sendFile(path) with \"headers\" option should accept headers option", "req .query when \"query parser\" is a function should parse using function", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .json(object) when given primitives should respond with json for null", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "res .jsonp(object) when given primitives should respond with json for String", "app.router methods should include PROPFIND", "exports should expose Router", "res .render(name) should error without \"view engine\" set and no file extension", "middleware .next() should behave like connect", "req .host should strip port number", "res .json(object) when given primitives should respond with json for String", "app.router methods should reject numbers for app.copy", "app .use(app) should support dynamic routes", "req .xhr should return true when X-Requested-With is xmlhttprequest", "cookie-sessions GET / should display no views", "res .attachment(filename) should set the Content-Type", "app.router methods should reject numbers for app.report", "req .acceptsLanguage should be true if language accepted", "res .sendFile(path) should 404 when not found", "res .sendFile(path, options) should pass options to send module", "res .send(Buffer) should set ETag", "OPTIONS should forward requests down the middleware chain", "Router .multiple callbacks should throw if a callback is not a function", "app.all() should run the callback for a method just once", "req .acceptsLanguage when Accept-Language is not present should always return true", "res .sendfile(path, fn) should utilize the same options as express.static()", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "app .param(fn) should map app.param(name, ...) logic", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "config .get() should otherwise return the value", "web-service GET /api/repos with a valid api key should respond repos json", "res .render(name) should support index.<engine>", "req.is() when given a mime type should ignore charset", "cookies GET /forget should clear cookie", "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise", "req .query should default to parse complex keys", "res .jsonp(object) should respond with jsonp", "web-service GET /api/users without an api key should respond with 400 bad request", "error-pages Accept: text/plain GET /403 should respond with 403", "config .set() should set a value", "Router error should handle throwing inside routes with params", "config .set() should return the app", "req .range(size, options) with \"combine: true\" option should return combined ranges", "mvc PUT /user/:id should 500 on error", "app.router * should not be greedy immediately after param", "req .host should work with IPv6 Host", "res .render(name, option) should give precedence to res.render() locals over app.locals", "res \"etag\" setting when enabled should send ETag in response to COPY request", "content-negotiation GET / should accept to text/plain", "res should be chainable", "app.router methods should reject numbers for app.mkactivity", "app .locals.settings should expose app settings", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be undefined by default", "res .jsonp(object) should use first callback parameter with jsonp", "req .acceptsLanguages should be false if language not accepted", "res .send(String) should set ETag", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "res .sendfile(path) with a relative path should allow ../ when \"root\" is set", "res .type(str) should set the Content-Type with type/subtype", "app.router * should keep correct parameter indexes", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "app .param(name, fn) should only call once per request", "route-separation GET /users should list users", "multi-router GET /api/v1/ should respond with APIv1 root handler", "multi-router GET /api/v2/users should respond with users from APIv2", "Router .use should reject string as middleware", "downloads GET /files/missing.txt should respond with 404", "Router should support .use of other routers", "app.router methods should include HEAD", "app .render(name, fn) caching should cache with \"view cache\" setting", "app.router should run in order added", "res .jsonp(object) should include security header and prologue", "req .query should default to {}", "Router parallel requests should not mix requests", "res .attachment(utf8filename) should set the Content-Type", "res .send(code) should set .statusCode", "res .json(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to LINK request", "req .query when \"query parser fn\" is missing should act like \"extended\"", "res should not support jsonp callbacks", "mvc POST /user/:id/pet should create a pet for user"], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 854, "failed_count": 2, "skipped_count": 0, "passed_tests": ["app should emit \"mount\" when mounted", "res .jsonp(object) when given primitives should respond with json", "res .sendfile(path) should accept dotfiles option", "req .accepts(types) should return the first acceptable type", "res .sendFile(path) should error missing path", "app.router methods should reject numbers for app.rebind", "res .json(object) should not support jsonp callbacks", "res .sendfile(path, fn) should invoke the callback when complete", "app.router * should denote a greedy capture group", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "app.router methods should include BIND", "req .query when \"query parser\" disabled should not parse complex keys", "Router .multiple callbacks should throw if a callback is undefined", "req.is() when given a mime type should return the type when matching", "Router .all should be called for any URL when \"*\"", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "req .accepts(type) should return false otherwise", "vhost example.com GET / should say hello", "multi-router GET / should respond with root handler", "req .host should return the Host when present", "auth GET /restricted should redirect to /login without cookie", "app .param(names, fn) should map the array", "app.router methods should reject numbers for app.search", "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to ACL request", "res .jsonp(object) should not override previous Content-Types with no callback", "auth POST /login should fail without proper username", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "utils.setCharset(type, charset) should keep charset if not given charset", "res .sendFile(path, fn) should invoke the callback when complete", "res .cookie(name, string, options) signed without secret should throw an error", "res \"etag\" setting when disabled should send ETag when manually set", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.bind", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app.router :name should match a single segment only", "app.router methods should include NOTIFY", "app .render(name, options, fn) should render the template", "req .acceptsEncoding should be true if encoding accepted", "res .format(obj) with parameters should allow wildcard type/subtypes", "app.router * should require a preceding /", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "utils.wetag(body, encoding) should support buffer", "res .format(obj) in router should default the Content-Type", "content-negotiation GET / should accept to application/json", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "res .send(Buffer) should not override ETag", "req .range(size) should cap to the given size", "req .fresh should return false without response headers", "res when accepting text should include the redirect type", "app.router methods should include PUT", "exports should permit modifying the .application prototype", "app.router methods should reject numbers for app.acl", "res .send(Buffer) should not override Content-Type", "app .param(name, fn) should work with encoded values", "app .render(name, fn) should expose app.locals", "Router .multiple callbacks should not throw if all callbacks are functions", "app.router methods should reject numbers for app.proppatch", "res .format(obj) in router when Accept is not present should invoke the first callback", "app.router methods should reject numbers for app.subscribe", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "route-map GET /users/:id/pets/:pid should get a users pet", "app.router methods should include DEL", "res .render(name) should support absolute paths", "Router should handle blank URL", "app.router methods should include UNBIND", "req .accepts(type) should return true when Accept is not present", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "res \"etag\" setting when enabled should send ETag for empty string response", "Router FQDN should adjust FQDN req.url with multiple handlers", "app.options() should override the default behavior", "Router .use should reject number as middleware", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.merge", "in development should disable \"view cache\"", "utils.etag(body, encoding) should support empty string", "Router .use should reject Date as middleware", "res .sendFile(path) should not override manual content-types", "Route errors should handle throw in .all", "app .use(path, middleware) should support array of paths", "res .render(name) when an error occurs should next(err)", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "req .accepts(types) should return the first when Accept is not present", "config .enabled() should default to false", "app.router methods should reject numbers for app.checkout", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should strip port number", "cookie-sessions GET / should set a session cookie", "app.router methods should reject numbers for app.get", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "res .render(name, options, fn) should pass the resulting string", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "res \"etag\" setting when enabled should not override ETag when manually set", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "app.router decode params should not accept params in malformed paths", "app.router when given a regexp should match the pathname only", "error-pages Accept: application/json GET /404 should respond with 404", "app.router trailing slashes should be optional by default", "app.router methods should reject numbers for app.head", "res .sendfile(path, fn) should invoke the callback without error when HEAD", "app .render(name, options, fn) should give precedence to app.render() locals", "res should always check regardless of length", "req .hostname should work with IPv6 Host", "app.router decode params should work with unicode", "content-negotiation GET / should default to text/html", "app.router methods should include SUBSCRIBE", "res .sendFile(path) with \"root\" option should not transfer relative with without", "res .jsonp(status, object) should respond with json and set the .statusCode", "req.is() when given */subtype should return false when not matching", "ejs GET / should respond with html", "res .render(name, fn) when an error occurs should pass it to the callback", "utils.setCharset(type, charset) should return type if not given charset", "app.router methods should include MOVE", "app.router methods should reject numbers for app.unlink", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "app .VERB() should not get invoked without error handler on error", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router * should be optional", "req .fresh should return true when the resource is not modified", "res .jsonp(object) should disallow arbitrary js", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "res .render(name, option) should render the template", "res .json(object) should not override previous Content-Types", "app.router params should merge numeric indices req.params when parent has same number", "app.router methods should reject numbers for app.put", "req.is() when given an extension should lookup the mime type", "res .sendfile(path, fn) should invoke the callback on socket error", "utils.setCharset(type, charset) should set charset", "res .sendfile(path, fn) should invoke the callback without error when 304", "app .use(middleware) should accept nested arrays of middleware", "app .use(app) should mount the app", "app.router methods should reject numbers for app.mkcol", "app.router :name should work following a partial capture group", "res .sendfile(path) should accept headers option", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app.router params should restore req.params", "app.router should throw with notice", "app.router :name? should denote an optional capture group", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains with no host should return an empty array", "Router .all should support using .all to capture all http verbs", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "content-negotiation GET /users should accept to application/json", "HEAD should default to GET", "res .format(obj) with extnames should set the correct charset for the Content-Type", "res .format(obj) with parameters should Vary: Accept", "exports should permit modifying the .response prototype", "app.router decode params should not decode spaces", "res .cookie(name, string) should allow multiple calls", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "res .jsonp(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "req .param(name, default) should use the default value unless defined", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "mvc GET /users should display a list of users", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "cookie-sessions GET / should display 1 view on revisit", "app.router methods should reject numbers for app.trace", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "req .get(field) should return the header field value", "app.router methods should reject numbers for app.notify", "mvc GET /pet/0 should get pet", "mvc GET /user/:id when present should display the user", "req .hostname should work with IPv6 Host and port", "Route errors should handle throw", "Router FQDN should not obscure FQDNs", "app .use(path, middleware) should support array of paths with middleware array", "res .jsonp(object) when given an object should respond with json", "res \"etag\" setting when enabled should send ETag in response to BIND request", "req.is() when given type/* should return the full type when matching", "req .subdomains with trusted X-Forwarded-Host should return an array", "app .request should extend the request prototype", "throw after .end() should fail gracefully", "config .get() when mounted should default to the parent app", "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set", "app.router methods should include POST", "app.router * should allow naming", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "req should accept an argument list of type names", "app.parent should return the parent when mounted", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should include UNSUBSCRIBE", ".sendfile(path, options) should pass options to send module", "Router FQDN should adjust FQDN req.url", "res .sendfile(path) should transfer a directory index file", "error GET /next should respond with 500", "req .protocol should return the protocol string", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "res \"etag\" setting when enabled should send ETag in response to POST request", "Router error should skip non error middleware", "res when accepting html should escape the url", "res .sendfile(path) should transfer a file", "req .xhr should return false otherwise", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "utils.setCharset(type, charset) should do anything without type", "app.router methods should include DELETE", "res .sendFile(path, fn) should invoke the callback when client already aborted", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "app .use(app) should support mount-points", "res .cookie(name, string, options) maxAge should set max-age", "res .set(field, values) should throw when Content-Type is an array", "app .param(name, fn) should not invoke without route handler", "app .use(path, middleware) should invoke middleware for all requests starting with path", "res when the request method is HEAD should ignore the body", "res .append(field, val) should accept array of values", "res .send(code, body) should set .statusCode and body", "app .use(path, middleware) should strip path from req.url", "res .format(obj) in router should set the correct charset for the Content-Type", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "downloads GET /files/amazing.txt should have a download header", "res .type(str) should set the Content-Type based on a filename", "app.router :name should work in array of paths", "res .download(path, filename, options, fn) should invoke the callback", "app.router when next() is called should continue lookup", "res .redirect(url) should encode \"url\"", "res .sendfile(path, fn) should not override manual content-types", "app.router methods should include MERGE", "res .sendfile(path) with an absolute path should transfer the file", "req .ip when X-Forwarded-For is not present should return the remote address", "res .send(Buffer) should send as octet-stream", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "res .redirect(url, status) should set the response status", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "mvc GET /user/:id when not present should 404", "resource GET / should respond with instructions", "res .jsonp(object) should escape utf whitespace", "app .use(path, middleware) should support empty string path", "res should respond with 304 Not Modified when fresh", "in production should enable \"view cache\"", "route-separation GET /user/:id/view should get a user", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "app .param(name, fn) should defer to next route", "res .sendfile(path) should not error if the client aborts", "res .append(field, val) should append multiple headers", "utils.etag(body, encoding) should support buffer", "Route .VERB should allow fallthrough", "Route errors should handle single error handler", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app .render(name, fn) should support absolute paths", "OPTIONS should not be affected by app.all", "app.router * should decore the capture", "app.router should allow rewriting of the url", "app.router methods should include SOURCE", "utils.wetag(body, encoding) should support utf8 strings", "req .range(size) should cap to the given size when open-ended", "app .use(path, middleware) should reject Date as middleware", "app.router when next(err) is called should break out of app.router", "app.router * should eat everything after /", "app.router methods should include ACL", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "mvc PUT /user/:id should update the user", "req.is() when given */subtype should return the full type when matching", "app .param(name, fn) should call when values differ", "config .set() should return the app when undefined", "req .acceptsLanguages should be true if language accepted", "route-map GET /users/:id/pets should get a users pets", "res .location(url) should not touch already-encoded sequences in \"url\"", "app.router * should span multiple segments", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "app.path() should return the canonical", "Router .param should call param function when routing VERBS", "req .query when \"query parser\" is extended should parse complex keys", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "req .range(size) should return parsed ranges", "params GET /users/foo-bar should fail integer parsing", "OPTIONS should only include each method once", "Router .handle should dispatch", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "Route .all should stack", "req .acceptsLanguages when Accept-Language is not present should always return true", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "mvc PUT /pet/2 should update the pet", "app.router * should work with several", "res .format(obj) in router should utilize qvalues in negotiation", "app .engine(ext, fn) should map a template engine", "error-pages Accept: text/html GET /404 should respond with 404", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "req .param(name) should check req.body", "req .hostname should strip port number", "req.is() when content-type is not present should return false", "res .render(name, option) should give precedence to res.locals over app.locals", "res .format(obj) with parameters should default the Content-Type", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively", "error GET /missing should respond with 404", "route-separation GET /posts should get a list of posts", "res .sendfile(path) with a relative path with non-GET should still serve", "config .get() when mounted should prefer child \"trust proxy\" setting", "res .json(object) when given an array should respond with json", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "error-pages Accept: application/json GET /403 should respond with 403", "res .set(field, value) should set the response header field", "exports should expose the request prototype", "app .use(app) should support mounted app anywhere", "res .cookie(name, string, options) maxAge should not mutate the options object", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "res .set(field, values) should not set a charset of one is already set", "app .param(name, fn) should map logic for a single param", "res .status(code) when code is undefined should throw a TypeError", "auth GET /login should display login error", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "Router .param should call when values differ", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "res when accepting neither text or html should respond with an empty body", "req .range(size) should have a .type", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "app.all() should add a router per method", "markdown GET / should respond with html", "app.route should return a new route", "mvc GET /user/:id/edit should display the edit form", "app .use(path, middleware) should accept nested arrays of middleware", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "req .host when \"trust proxy\" is enabled should default to Host", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "res .format(obj) with canonicalized mime types should Vary: Accept", "app.route should all .VERB after .all", "res .jsonp(object) should allow []", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "app.router :name should denote a capture group", "vhost bar.example.com GET / should redirect to /bar", "app .use(path, middleware) should accept multiple arrays of middleware", "res .type(str) should default to application/octet-stream", "req .range(size) should return undefined if no range", "res .sendfile(path, fn) should invoke the callback on 403", "req .subdomains otherwise should return an empty array", "res .render(name, option) should expose res.locals", "req .xhr should case-insensitive", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "res .cookie(name, object) should generate a JSON cookie", "app.router methods should include PROPPATCH", "Router should handle missing URL", "app .engine(ext, fn) should work without leading \".\"", "req .subdomains when present should work with IPv4 address", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "app.router methods should include SEARCH", "app .engine(ext, fn) should work \"view engine\" setting", "res .send(body, code) should be supported for backwards compat", "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat", "resource GET /users/1 should respond with user 1", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "res .set(field, values) should coerce to an array of strings", "app .render(name, fn) should support absolute paths with \"view engine\"", "app .render(name, fn) should handle render error throws", "app.router methods should reject numbers for app.mkcalendar", "Route .all should add handler", "app.router methods should include CHECKOUT", "app.listen() should wrap with an HTTP server", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .send(String) should override charset in Content-Type", "Router .use should be called for any URL", "res \"etag\" setting when enabled should send ETag in response to PUT request", "res should not override previous Content-Types", "app.router methods should reject numbers for app.unbind", "app.router should allow escaped regexp", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "cookies POST / should set a cookie", "app.router methods should reject numbers for app.link", "req .baseUrl should travel through routers correctly", "res .sendfile(path, fn) should invoke the callback on 404", "req .subdomains when present should work with IPv6 address", "cookies POST / should no set cookie w/o reminder", "res .status(code) when code is null should throw a TypeError", "res .set(object) should coerce to a string", "req .stale should return true without response headers", "req .ips when X-Forwarded-For is not present should return []", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "req .acceptsLanguage should be false if language not accepted", "res .download(path, filename) should provide an alternate filename", "req .signedCookies should return a signed JSON cookie", "res .send(null) should set body to \"\"", "res .cookie(name, string, options) maxAge should set relative expires", "app should 404 without routes", "app.router * should work cross-segment", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "app.router .:name? should denote an optional format", "app.router methods should reject numbers for app.source", "res .render(name) should support absolute paths with \"view engine\"", "app.router params should allow merging existing req.params", "req .route should be the executed Route", "auth GET / should redirect to /login", "req .get(field) should throw missing header name", "auth GET /logout should redirect to /", "app .response should not be influenced by other app protos", "res .format(obj) given .default should be invoked instead of auto-responding", "res .jsonp(object) should ignore object callback parameter with jsonp", "res \"etag\" setting when enabled should not send ETag for res.send()", "config .get() when mounted should inherit \"trust proxy\" setting", "req .secure when X-Forwarded-Proto is missing should return false when http", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app .render(name, fn) when \"view engine\" is given should render the template", "res .format(obj) in router should allow wildcard type/subtypes", "app.router methods should include REPORT", "res .sendFile(path) should 404 for directory", "app .param(fn) should fail if not given fn", "Route should work without handlers", "app.router :name should work inside literal parenthesis", "req .host should return undefined otherwise", "res .download(path, fn) should invoke the callback", "params GET / should respond with instructions", "req .param(name) should check req.query", "res .jsonp(object) when given primitives should respond with json for null", "app .use(middleware) should accept multiple arguments", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "Router .use should reject null as middleware", "vhost example.com GET /foo should say foo", "auth POST /login should fail without proper password", "app.route should support dynamic routes", "app.router methods should include M-SEARCH", "route-separation GET /user/:id should get a user", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "res .jsonp(object) when given an array should respond with json", "Router FQDN should ignore FQDN in path", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "app .param(name, fn) should not call when values differ on error", "auth GET /restricted should succeed with proper cookie", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "route-map GET /users/:id should get a user", "req .acceptsCharset(type) when Accept-Charset is not present should return true when present", "app.router should restore req.params after leaving router", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .sendfile(path) with a relative path should transfer the file", "res .append(field, val) should work with cookies", "req .query when \"query parser\" an unknown value should throw", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "route-separation PUT /user/:id/edit should edit a user", "res .json(object) when given primitives should respond with json for Number", "Router should return a function with router methods", "without NODE_ENV should default to development", "exports should permit modifying the .request prototype", "app.router methods should include REBIND", "res .redirect(status, url) should set the response status", "res .render(name, option) should give precedence to res.render() locals over res.locals", "app.router methods should reject numbers for app.purge", "res .sendfile(path) should ignore headers option on 404", "res .send(undefined) should set body to \"\"", "res.vary() with an empty array should not set Vary", "app.router methods should include MKACTIVITY", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "Route .all should handle VERBS", "app .render(name, fn) should support index.<engine>", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "app .response should extend the response prototype", "app.router params should merge numeric indices req.params when more in parent", "route-map DELETE /users should delete users", "res .json(status, object) should respond with json and set the .statusCode", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "app.router methods should reject numbers for app.del", "req .fresh should return false when the resource is modified", "req .acceptsCharset(type) when Accept-Charset is not present should return true", "req.is() when given a mime type should return false when not matching", "res when accepting html should respond with html", "res .format(obj) with extnames should default the Content-Type", "app .use(path, middleware) should require middleware", "res \"etag\" setting when enabled should send ETag for long response", "req .accepts(types) should take quality into account", "params GET /user/0 should respond with a user", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include TRACE", "mvc GET / should redirect to /users", "req .xhr should return false when not present", "res .cookie(name, string, options) should set params", "web-service GET /api/users with a valid api key should respond users json", "res .send(Object) should send as application/json", "res .sendfile(path) should 404 for directory without trailing slash", "Route .VERB should support .get", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .render(name) should expose app.locals with `name` property", "cookies GET / should respond to cookie", "res .sendFile(path) should transfer a file", "content-negotiation GET /users should default to text/html", "res .download(path) should transfer as an attachment", "app .use(path, middleware) should accept multiple arguments", "req .hostname should return the Host when present", "req .query when \"query parser\" disabled should not parse query", "route-separation GET /user/:id should 404 on missing user", "req.is() when given */subtype should ignore charset", "app.router :name should allow several capture groups", "app .render(name, fn) when an error occurs should invoke the callback", "res on failure should remove Content-Disposition", "res .sendfile(path, fn) should invoke the callback when client aborts", "config .disabled() should default to true", "app .engine(ext, fn) should throw when the callback is missing", "app .use(path, middleware) should accept array of middleware", "res .render(name, option) should expose app.locals", "error GET / should respond with 500", "Router should support dynamic routes", "app.router methods should reject numbers for app.delete", "app.router methods should include MKCALENDAR", "app.router should be chainable", "utils.etag(body, encoding) should support strings", "req .subdomains when subdomain offset is set when present should return an array", "exports should throw on old middlewares", "cookies GET / should respond with no cookies", "req .param(name) should check req.params", "app.router * should work within arrays", "config .get() should return undefined when unset", "req .secure when X-Forwarded-Proto is present should return false when http", "app .use(app) should set the child's .parent", "res .format(obj) with canonicalized mime types should default the Content-Type", "res .json(object, status) should use status as second number for backwards compat", "res .render(name) when \"view engine\" is given should render the template", "res .format(obj) with extnames should Vary: Accept", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "app.router methods should reject numbers for app.m-search", "error-pages GET / should respond with page list", "error-pages Accept: text/plain GET /404 should respond with 404", "web-service when requesting an invalid route should respond with 404 json", "app.router methods should reject numbers for app.patch", "req .baseUrl should contain lower path", "error-pages Accept: text/plain GET /500 should respond with 500", "res .sendFile(path) should error for non-string path", "Route errors should handle errors via arity 4 functions", "res should not perform freshness check unless 2xx or 304", "app.del() should alias app.delete()", "res .locals should be empty by default", "resource DELETE /users/9 should fail", "app.router methods should reject numbers for app.post", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "app .locals(obj) should merge locals", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "res .status(code) should set the response .statusCode", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app .use(path, middleware) should support regexp path", "res .sendFile(path) should 304 when ETag matches", "res .sendFile(path, fn) should invoke the callback when client aborts", "resource DELETE /users/1 should delete user 1", "res .set(object) should set multiple fields", "app.router methods should include UNLINK", "res .location(url) should encode \"url\"", "content-negotiation GET /users should accept to text/plain", "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise", "res \"etag\" setting when disabled should send no ETag", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "res .jsonp(object, status) should use status as second number for backwards compat", "res .sendfile(path) with a relative path should disallow requesting out of \"root\"", "res .json(object, status) should respond with json and set the .statusCode for backwards compat", "res .attachment(utf8filename) should add the filename and filename* params", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "utils.wetag(body, encoding) should support empty string", "multi-router GET /api/v1/users should respond with users from APIv1", "res .format(obj) with parameters should utilize qvalues in negotiation", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "res .send(String) should keep charset in Content-Type for Buffers", "app.router params should ignore invalid incoming req.params", "res .render(name) when \"views\" is given should lookup the file in the path", "app.router when next(err) is called should call handler in same route, if exists", "exports should expose the response prototype", "res .format(obj) with extnames should utilize qvalues in negotiation", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "app.router methods should include PURGE", "req .get(field) should throw for non-string header name", "app.router params should overwrite existing req.params by default", "res when accepting text should encode the url", "app.router .:name should denote a format", "res .sendfile(path) should transfer a file with urlencoded name", "res .format(obj) with extnames should allow wildcard type/subtypes", "app.head() should override", "app.router methods should include LOCK", "res on failure should invoke the callback", "app .render(name, fn) when an extension is given should render the template", "app.router when next(\"router\") is called should jump out of router", "app .param(name, fn) should support altering req.params across routes", "res .set(field, values) should set multiple response header fields", "req .query when \"query parser\" is extended should parse parameters with dots", "res .sendFile(path) should include ETag", "config .set() \"etag\" should throw on bad value", "res .download(path, filename, fn) should invoke the callback", "utils.wetag(body, encoding) should support strings", "res .jsonp(object) should allow renaming callback", "app.router params should use params from router", "utils.isAbsolute() should support windows", "utils.flatten(arr) should flatten an array", "res .get(field) should get the response header field", "res.vary() with an array should set the values", "req .acceptsEncodingss should be true if encoding accepted", "app.router when next(\"route\") is called should jump to next route", "exports should expose the application prototype", "res .attachment(filename) should add the filename param", "res .set(field, value) should coerce to a string", "res .cookie(name, string) should set a cookie", "app.router methods should reject numbers for app.propfind", "res .sendStatus(statusCode) should work with unknown code", "res .sendfile(path, fn) should invoke the callback when client already aborted", "app.router when given a regexp should populate req.params with the captures", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "app.router decode params should decode correct params", "app .use(middleware) should invoke middleware for all requests", "app .param(name, fn) should catch thrown secondary error", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "res .jsonp(object) should override previous Content-Types with callback", "app.router methods should reject numbers for app.unsubscribe", "config .set() \"etag\" should set \"etag fn\"", "resource GET /users/9 should respond with error", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "app .use(path, middleware) should reject number as middleware", "Router error should handle throwing in handler after async param", "mvc GET /user/:id when present should display the users pets", "req .accepts(types) should return the first acceptable type with canonical mime types", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "app should inherit from event emitter", "app.router methods should include MKCOL", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "resource GET /users/1..3 should respond with users 1 through 3", "route-separation GET / should respond with index", "app .VERB() should only call an error handling routing callback when an error is propagated", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "utils.isAbsolute() should support unices", "req .host should work with IPv6 Host and port", "res .append(field, val) should work with res.set(field, val) first", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .sendFile(path, fn) should invoke the callback without error when 304", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "utils.setCharset(type, charset) should override charset", "res.vary() when the value is present should not add it again", "app .param(name, fn) should catch thrown error", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "error-pages Accept: application/json GET /500 should respond with 500", "app.router methods should include GET", "app.router methods should reject numbers for app.move", "app.router :name? should populate the capture group", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "res .json(object) when given an object should respond with json", "Router should not stack overflow with many registered routes", "res \"etag\" setting when \"weak\" should send weak ETag", "app .param(name, fn) should defer all the param routes", "res \"etag\" setting when a function should send custom ETag", "app .render(name, fn) when the file does not exist should provide a helpful error", "OPTIONS should not respond if the path is not defined", "app .use(middleware) should accept multiple arrays of middleware", "res \"etag\" setting when a function should not send falsy ETag", "req .accepts(types) should return false when no match is made", "route-separation GET /user/:id/view should 404 on missing user", "app .use(middleware) should accept array of middleware", "app.router should allow literal \".\"", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "auth GET /login should render login form", "Router .param should call param function when routing middleware", "app .use(path, middleware) should reject null as middleware", "req .acceptsEncodingss should be false if encoding not accepted", "req .accepts(type) should return true when present", "app .use(path, middleware) should reject string as middleware", "req .hostname should return undefined otherwise", "res .redirect(url) should default to a 302 redirect", "Router error should handle throwing inside error handlers", "res .render(name) should expose app.locals", "params GET /users/0-2 should respond with three users", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "res .sendFile(path) should not error if the client aborts", "app .render(name, fn) caching should always lookup view without cache", "res .sendFile(path) should transfer a file with special characters in string", "app.router should be .use()able", "res .jsonp(object) when given primitives should respond with json for Number", "res .location(url) should set the header", "config .enable() should set the value to true", "res .send(String) should send as html", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should include LINK", "req .range(size) should accept any type", "req.is() when given type/* should return false when not matching", "res .sendfile(path) should not serve dotfiles", "vhost foo.example.com GET / should redirect to /foo", "req .baseUrl should be empty for top-level route", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "res .attachment() should Content-Disposition to attachment", "config .disabled() should return false when set", "route-map GET /users should respond with users", "req.is() when given type/* should ignore charset", "OPTIONS when error occurs in response handler should pass error to callback", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .clearCookie(name) should set a cookie passed expiry", "Router .multiple callbacks should throw if a callback is null", "res .format(obj) given .default should work when only .default is provided", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored", "res .jsonp(object) should not escape utf whitespace for json fallback", "req .hostname when \"trust proxy\" is enabled should default to Host", "app.router methods should include PATCH", "res.vary() with a string should set the value", "HEAD should output the same headers as GET requests", "app .param(name, fn) should call when values differ when using \"next\"", "app.route should not error on empty routes", "res .sendStatus(statusCode) should send the status code and message as body", "res when accepting html should include the redirect type", "app.router * should capture everything", "config .enabled() should return true when set", "app should be callable", "Route errors should handle throwing inside error handlers", "res .render(name, fn) should pass the resulting string", "app .use(path, middleware) should work if path has trailing slash", "res .sendfile(path) with a relative path should next(404) when not found", "Router .use should require middleware", "res .append(field, val) should get reset by res.set(field, val)", "res.vary() with no arguments should not set Vary", "req .baseUrl should contain full lower path", "app.mountpath should return the mounted path", "app.router methods should include OPTIONS", "app.router params should merge numeric indices req.params", "config .disable() should set the value to false", "res \"etag\" setting when enabled should send ETag", "utils.isAbsolute() should support windows unc", "req .stale should return false when the resource is not modified", "res .clearCookie(name, options) should set the given params", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "res .format(obj) in router should Vary: Accept", "req .path should return the parsed pathname", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "error-pages Accept: text/html GET /500 should respond with 500", "req .acceptsEncoding should be false if encoding not accepted", "req .subdomains when present should return an array", "auth POST /login should succeed with proper credentials", "app.router methods should include COPY", "cookies GET / should have a form", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "res .sendFile(path, fn) should invoke the callback on 404", "downloads GET / should have a link to amazing.txt", "app.router methods should reject numbers for app.lock", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res \"etag\" setting when \"strong\" should send strong ETag", "req .subdomains when subdomain offset is set otherwise should return an empty array", "Router .use should accept array of middleware", "app.router methods should include UNLOCK", "mvc GET /pet/0/edit should get pet edit page", "res .send() should set body to \"\"", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "route-separation GET /user/:id/edit should get a user to edit", "app.router methods should re-route when method is altered", "req .get(field) should special-case Referer", "res should work when mounted", "app.router case sensitivity should be disabled by default", "res .links(obj) should set Link header field for multiple calls", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "req .stale should return true when the resource is modified", "markdown GET /fail should respond with an error", "app.router methods should reject numbers for app.unlock", "res \"etag\" setting when enabled should send ETag in response to GET request", "res .send(code, number) should send number as json", "Router .param should only call once per request", "error-pages Accept: text/html GET /403 should respond with 403", "res .sendfile(path) with a relative path should serve relative to \"root\"", "Route .VERB should limit to just .VERB", "utils.etag(body, encoding) should support utf8 strings", "res .links(obj) should set Link header field", "params GET /user/9 should fail to find user", "res when accepting text should respond with text", "config .get() when mounted should given precedence to the child", "app.router methods should reject numbers for app.options", "res .send(String) should not override Content-Type", "resource GET /users should respond with all users", "Router FQDN should ignore FQDN in search", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "multi-router GET /api/v2/ should respond with APIv2 root handler", "res .format(obj) with parameters should set the correct charset for the Content-Type", "res .sendFile(path) with \"headers\" option should accept headers option", "req .query when \"query parser\" is a function should parse using function", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .json(object) when given primitives should respond with json for null", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "res .jsonp(object) when given primitives should respond with json for String", "app.router methods should include PROPFIND", "exports should expose Router", "res .render(name) should error without \"view engine\" set and no file extension", "middleware .next() should behave like connect", "req .host should strip port number", "res .json(object) when given primitives should respond with json for String", "app.router methods should reject numbers for app.copy", "app .use(app) should support dynamic routes", "req .xhr should return true when X-Requested-With is xmlhttprequest", "cookie-sessions GET / should display no views", "res .attachment(filename) should set the Content-Type", "app.router methods should reject numbers for app.report", "req .acceptsLanguage should be true if language accepted", "res .sendFile(path) should 404 when not found", "res .sendFile(path, options) should pass options to send module", "res .send(Buffer) should set ETag", "OPTIONS should forward requests down the middleware chain", "Router .multiple callbacks should throw if a callback is not a function", "app.all() should run the callback for a method just once", "req .acceptsLanguage when Accept-Language is not present should always return true", "res .sendfile(path, fn) should utilize the same options as express.static()", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "app .param(fn) should map app.param(name, ...) logic", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "config .get() should otherwise return the value", "web-service GET /api/repos with a valid api key should respond repos json", "res .render(name) should support index.<engine>", "req.is() when given a mime type should ignore charset", "cookies GET /forget should clear cookie", "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise", "req .query should default to parse complex keys", "res .jsonp(object) should respond with jsonp", "web-service GET /api/users without an api key should respond with 400 bad request", "error-pages Accept: text/plain GET /403 should respond with 403", "config .set() should set a value", "Router error should handle throwing inside routes with params", "config .set() should return the app", "req .range(size, options) with \"combine: true\" option should return combined ranges", "mvc PUT /user/:id should 500 on error", "app.router * should not be greedy immediately after param", "req .host should work with IPv6 Host", "res .render(name, option) should give precedence to res.render() locals over app.locals", "res \"etag\" setting when enabled should send ETag in response to COPY request", "content-negotiation GET / should accept to text/plain", "res should be chainable", "app.router methods should reject numbers for app.mkactivity", "app .locals.settings should expose app settings", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be undefined by default", "res .jsonp(object) should use first callback parameter with jsonp", "req .acceptsLanguages should be false if language not accepted", "res .send(String) should set ETag", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "res .sendfile(path) with a relative path should allow ../ when \"root\" is set", "res .type(str) should set the Content-Type with type/subtype", "app.router * should keep correct parameter indexes", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "app .param(name, fn) should only call once per request", "route-separation GET /users should list users", "multi-router GET /api/v1/ should respond with APIv1 root handler", "multi-router GET /api/v2/users should respond with users from APIv2", "Router .use should reject string as middleware", "downloads GET /files/missing.txt should respond with 404", "Router should support .use of other routers", "app.router methods should include HEAD", "app .render(name, fn) caching should cache with \"view cache\" setting", "app.router should run in order added", "res .jsonp(object) should include security header and prologue", "req .query should default to {}", "Router parallel requests should not mix requests", "res .attachment(utf8filename) should set the Content-Type", "res .send(code) should set .statusCode", "res .json(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to LINK request", "req .query when \"query parser fn\" is missing should act like \"extended\"", "res should not support jsonp callbacks", "mvc POST /user/:id/pet should create a pet for user"], "failed_tests": ["req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should remove OWS around comma", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should use the first value"], "skipped_tests": []}, "fix_patch_result": {"passed_count": 856, "failed_count": 0, "skipped_count": 0, "passed_tests": ["app should emit \"mount\" when mounted", "res .jsonp(object) when given primitives should respond with json", "res .sendfile(path) should accept dotfiles option", "req .accepts(types) should return the first acceptable type", "res .sendFile(path) should error missing path", "app.router methods should reject numbers for app.rebind", "res .json(object) should not support jsonp callbacks", "res .sendfile(path, fn) should invoke the callback when complete", "app.router * should denote a greedy capture group", "res .jsonp(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "app.router methods should include BIND", "req .query when \"query parser\" disabled should not parse complex keys", "Router .multiple callbacks should throw if a callback is undefined", "req.is() when given a mime type should return the type when matching", "Router .all should be called for any URL when \"*\"", "res \"etag\" setting when enabled should send ETag in response to MOVE request", "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash", "req .accepts(type) should return false otherwise", "vhost example.com GET / should say hello", "multi-router GET / should respond with root handler", "req .host should return the Host when present", "auth GET /restricted should redirect to /login without cookie", "app .param(names, fn) should map the array", "app.router methods should reject numbers for app.search", "req .acceptsCharsets(type) when Accept-Charset is not present should return true when present", "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled", "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to ACL request", "res .jsonp(object) should not override previous Content-Types with no callback", "auth POST /login should fail without proper username", "res .format(obj) with parameters when Accept is not present should invoke the first callback", "utils.setCharset(type, charset) should keep charset if not given charset", "res .sendFile(path, fn) should invoke the callback when complete", "res .cookie(name, string, options) signed without secret should throw an error", "res \"etag\" setting when disabled should send ETag when manually set", "OPTIONS should default to the routes defined", "app.router methods should reject numbers for app.bind", "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()", "app.router :name should match a single segment only", "app.router methods should include NOTIFY", "app .render(name, options, fn) should render the template", "req .acceptsEncoding should be true if encoding accepted", "res .format(obj) with parameters should allow wildcard type/subtypes", "app.router * should require a preceding /", "app.router trailing slashes when \"strict routing\" is enabled should pass-though mounted middleware", "res .format(obj) with parameters when no match is made should should respond with 406 not acceptable", "utils.wetag(body, encoding) should support buffer", "res .format(obj) in router should default the Content-Type", "content-negotiation GET / should accept to application/json", "app.router trailing slashes when \"strict routing\" is enabled should match no slashes", "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing", "res .send(Buffer) should not override ETag", "req .range(size) should cap to the given size", "req .fresh should return false without response headers", "res when accepting text should include the redirect type", "app.router methods should include PUT", "exports should permit modifying the .application prototype", "app.router methods should reject numbers for app.acl", "res .send(Buffer) should not override Content-Type", "app .param(name, fn) should work with encoded values", "app .render(name, fn) should expose app.locals", "Router .multiple callbacks should not throw if all callbacks are functions", "app.router methods should reject numbers for app.proppatch", "res .format(obj) in router when Accept is not present should invoke the first callback", "app.router methods should reject numbers for app.subscribe", "res \"etag\" setting when enabled should send ETag in response to MKCOL request", "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise", "route-map GET /users/:id/pets/:pid should get a users pet", "app.router methods should include DEL", "res .render(name) should support absolute paths", "Router should handle blank URL", "app.router methods should include UNBIND", "req .accepts(type) should return true when Accept is not present", "res \"etag\" setting when enabled should send ETag in response to PATCH request", "res \"etag\" setting when enabled should send ETag for empty string response", "Router FQDN should adjust FQDN req.url with multiple handlers", "app.options() should override the default behavior", "Router .use should reject number as middleware", "app .render(name, options, fn) should expose app.locals", "app.router methods should reject numbers for app.merge", "in development should disable \"view cache\"", "utils.etag(body, encoding) should support empty string", "Router .use should reject Date as middleware", "res .sendFile(path) should not override manual content-types", "Route errors should handle throw in .all", "app .use(path, middleware) should support array of paths", "res .render(name) when an error occurs should next(err)", "res .location(url) when url is \"back\" should set location from \"Referer\" header", "res \"etag\" setting when enabled should send ETag in response to UNLINK request", "req .accepts(types) should return the first when Accept is not present", "config .enabled() should default to false", "app.router methods should reject numbers for app.checkout", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should strip port number", "cookie-sessions GET / should set a session cookie", "app.router methods should reject numbers for app.get", "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http", "res .render(name, options, fn) should pass the resulting string", "res \"etag\" setting when enabled should send ETag in response to OPTIONS request", "res \"etag\" setting when enabled should not override ETag when manually set", "res .sendFile(path) with \"root\" option should disallow requesting out of \"root\"", "app.router decode params should not accept params in malformed paths", "app.router when given a regexp should match the pathname only", "error-pages Accept: application/json GET /404 should respond with 404", "app.router trailing slashes should be optional by default", "app.router methods should reject numbers for app.head", "res .sendfile(path, fn) should invoke the callback without error when HEAD", "app .render(name, options, fn) should give precedence to app.render() locals", "res should always check regardless of length", "req .hostname should work with IPv6 Host", "app.router decode params should work with unicode", "content-negotiation GET / should default to text/html", "app.router methods should include SUBSCRIBE", "res .sendFile(path) with \"root\" option should not transfer relative with without", "res .jsonp(status, object) should respond with json and set the .statusCode", "req.is() when given */subtype should return false when not matching", "ejs GET / should respond with html", "res .render(name, fn) when an error occurs should pass it to the callback", "utils.setCharset(type, charset) should return type if not given charset", "app.router methods should include MOVE", "app.router methods should reject numbers for app.unlink", "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted", "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto", "app .VERB() should not get invoked without error handler on error", "req .protocol when \"trust proxy\" is enabled should default to http", "app.router * should be optional", "req .fresh should return true when the resource is not modified", "res .jsonp(object) should disallow arbitrary js", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4", "res .render(name, option) should render the template", "res .json(object) should not override previous Content-Types", "app.router params should merge numeric indices req.params when parent has same number", "app.router methods should reject numbers for app.put", "req.is() when given an extension should lookup the mime type", "res .sendfile(path, fn) should invoke the callback on socket error", "utils.setCharset(type, charset) should set charset", "res .sendfile(path, fn) should invoke the callback without error when 304", "app .use(middleware) should accept nested arrays of middleware", "app .use(app) should mount the app", "app.router methods should reject numbers for app.mkcol", "app.router :name should work following a partial capture group", "res .sendfile(path) should accept headers option", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app", "app.router params should restore req.params", "app.router should throw with notice", "app.router :name? should denote an optional capture group", "req .query when \"query parser\" is simple should not parse complex keys", "req .subdomains with no host should return an empty array", "Router .all should support using .all to capture all http verbs", "res .sendFile(path) with \"cacheControl\" option should enable cacheControl by default", "content-negotiation GET /users should accept to application/json", "HEAD should default to GET", "res .format(obj) with extnames should set the correct charset for the Content-Type", "res .format(obj) with parameters should Vary: Accept", "exports should permit modifying the .response prototype", "app.router decode params should not decode spaces", "res .cookie(name, string) should allow multiple calls", "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation", "res .jsonp(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request", "req .param(name, default) should use the default value unless defined", "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body", "mvc GET /users should display a list of users", "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request", "cookie-sessions GET / should display 1 view on revisit", "app.router methods should reject numbers for app.trace", "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from string", "req .get(field) should return the header field value", "app.router methods should reject numbers for app.notify", "mvc GET /pet/0 should get pet", "mvc GET /user/:id when present should display the user", "req .hostname should work with IPv6 Host and port", "Route errors should handle throw", "Router FQDN should not obscure FQDNs", "app .use(path, middleware) should support array of paths with middleware array", "res .jsonp(object) when given an object should respond with json", "res \"etag\" setting when enabled should send ETag in response to BIND request", "req.is() when given type/* should return the full type when matching", "req .subdomains with trusted X-Forwarded-Host should return an array", "app .request should extend the request prototype", "throw after .end() should fail gracefully", "config .get() when mounted should default to the parent app", "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set", "app.router methods should include POST", "app.router * should allow naming", "res \"etag\" setting when enabled should send ETag in response to SEARCH request", "res .sendFile(path) with \"dotfiles\" option should not serve dotfiles by default", "req should accept an argument list of type names", "app.parent should return the parent when mounted", "app .render(name, options, fn) caching should cache with cache option", "app.router methods should include UNSUBSCRIBE", ".sendfile(path, options) should pass options to send module", "Router FQDN should adjust FQDN req.url", "res .sendfile(path) should transfer a directory index file", "error GET /next should respond with 500", "req .protocol should return the protocol string", "req .protocol when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Proto", "res \"etag\" setting when enabled should send ETag in response to POST request", "Router error should skip non error middleware", "res when accepting html should escape the url", "res .sendfile(path) should transfer a file", "req .xhr should return false otherwise", "app.router trailing slashes when \"strict routing\" is enabled should pass-though middleware", "utils.setCharset(type, charset) should do anything without type", "app.router methods should include DELETE", "res .sendFile(path, fn) should invoke the callback when client already aborted", "req .secure when X-Forwarded-Proto is present when \"trust proxy\" trusting hop count should respect X-Forwarded-Proto", "app .use(app) should support mount-points", "res .cookie(name, string, options) maxAge should set max-age", "res .set(field, values) should throw when Content-Type is an array", "app .param(name, fn) should not invoke without route handler", "app .use(path, middleware) should invoke middleware for all requests starting with path", "res when the request method is HEAD should ignore the body", "res .append(field, val) should accept array of values", "res .send(code, body) should set .statusCode and body", "app .use(path, middleware) should strip path from req.url", "res .format(obj) in router should set the correct charset for the Content-Type", "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized", "downloads GET /files/amazing.txt should have a download header", "res .type(str) should set the Content-Type based on a filename", "app.router :name should work in array of paths", "res .download(path, filename, options, fn) should invoke the callback", "app.router when next() is called should continue lookup", "res .redirect(url) should encode \"url\"", "res .sendfile(path, fn) should not override manual content-types", "app.router methods should include MERGE", "res .sendfile(path) with an absolute path should transfer the file", "req .ip when X-Forwarded-For is not present should return the remote address", "res .send(Buffer) should send as octet-stream", "res .sendFile(path, fn) should invoke the callback without error when HEAD", "res .redirect(url, status) should set the response status", "res .render(name) when \"views\" is given when array of paths should lookup in later paths until found", "mvc GET /user/:id when not present should 404", "resource GET / should respond with instructions", "res .jsonp(object) should escape utf whitespace", "app .use(path, middleware) should support empty string path", "res should respond with 304 Not Modified when fresh", "in production should enable \"view cache\"", "route-separation GET /user/:id/view should get a user", "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable", "app .param(name, fn) should defer to next route", "res .sendfile(path) should not error if the client aborts", "res .append(field, val) should append multiple headers", "utils.etag(body, encoding) should support buffer", "Route .VERB should allow fallthrough", "Route errors should handle single error handler", "res .sendFile(path) with \"maxAge\" option should set cache-control max-age from number", "app .render(name, fn) should support absolute paths", "OPTIONS should not be affected by app.all", "app.router * should decore the capture", "app.router should allow rewriting of the url", "app.router methods should include SOURCE", "utils.wetag(body, encoding) should support utf8 strings", "req .range(size) should cap to the given size when open-ended", "app .use(path, middleware) should reject Date as middleware", "app.router when next(err) is called should break out of app.router", "app.router * should eat everything after /", "app.router methods should include ACL", "app .engine(ext, fn) should work \"view engine\" with leading \".\"", "res .download(path, filename, options, fn) should allow options to res.sendFile()", "mvc PUT /user/:id should update the user", "req.is() when given */subtype should return the full type when matching", "app .param(name, fn) should call when values differ", "config .set() should return the app when undefined", "req .acceptsLanguages should be true if language accepted", "route-map GET /users/:id/pets should get a users pets", "res .location(url) should not touch already-encoded sequences in \"url\"", "app.router * should span multiple segments", "web-service GET /api/user/:name/repos with a valid api key should respond user repos json", "app.path() should return the canonical", "Router .param should call param function when routing VERBS", "req .query when \"query parser\" is extended should parse complex keys", "res .sendFile(path) with \"cacheControl\" option should accept cacheControl option", "req .range(size) should return parsed ranges", "params GET /users/foo-bar should fail integer parsing", "OPTIONS should only include each method once", "Router .handle should dispatch", "req .host when \"trust proxy\" is enabled when trusting hop count should respect X-Forwarded-Host", "Route .all should stack", "req .acceptsLanguages when Accept-Language is not present should always return true", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy", "mvc PUT /pet/2 should update the pet", "app.router * should work with several", "res .format(obj) in router should utilize qvalues in negotiation", "app .engine(ext, fn) should map a template engine", "error-pages Accept: text/html GET /404 should respond with 404", "app .render(name, fn) when a \"view\" constructor is given should create an instance of it", "req .param(name) should check req.body", "req .hostname should strip port number", "req.is() when content-type is not present should return false", "res .render(name, option) should give precedence to res.locals over app.locals", "res .format(obj) with parameters should default the Content-Type", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored case-insensitively", "error GET /missing should respond with 404", "route-separation GET /posts should get a list of posts", "res .sendfile(path) with a relative path with non-GET should still serve", "config .get() when mounted should prefer child \"trust proxy\" setting", "res .json(object) when given an array should respond with json", "res .render(name) when \"views\" is given when array of paths should lookup the file in the path", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain", "error-pages Accept: application/json GET /403 should respond with 403", "res .set(field, value) should set the response header field", "exports should expose the request prototype", "app .use(app) should support mounted app anywhere", "res .cookie(name, string, options) maxAge should not mutate the options object", "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address", "res .set(field, values) should not set a charset of one is already set", "app .param(name, fn) should map logic for a single param", "res .status(code) when code is undefined should throw a TypeError", "auth GET /login should display login error", "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request", "Router .param should call when values differ", "res \"etag\" setting when enabled should send ETag in response to NOTIFY request", "res when accepting neither text or html should respond with an empty body", "req .range(size) should have a .type", "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6", "app.all() should add a router per method", "markdown GET / should respond with html", "app.route should return a new route", "mvc GET /user/:id/edit should display the edit form", "app .use(path, middleware) should accept nested arrays of middleware", "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized", "req .host when \"trust proxy\" is enabled should default to Host", "app .render(name, fn) when \"views\" is given when array of paths should lookup the file in the path", "res .format(obj) with canonicalized mime types should Vary: Accept", "app.route should all .VERB after .all", "res .jsonp(object) should allow []", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when adding the trailing slash", "app.router :name should denote a capture group", "vhost bar.example.com GET / should redirect to /bar", "app .use(path, middleware) should accept multiple arrays of middleware", "res .type(str) should default to application/octet-stream", "req .range(size) should return undefined if no range", "res .sendfile(path, fn) should invoke the callback on 403", "req .subdomains otherwise should return an empty array", "res .render(name, option) should expose res.locals", "req .xhr should case-insensitive", "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present", "res .cookie(name, object) should generate a JSON cookie", "app.router methods should include PROPPATCH", "Router should handle missing URL", "app .engine(ext, fn) should work without leading \".\"", "req .subdomains when present should work with IPv4 address", "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes", "app.router methods should include SEARCH", "app .engine(ext, fn) should work \"view engine\" setting", "res .send(body, code) should be supported for backwards compat", "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat", "resource GET /users/1 should respond with user 1", "res \"etag\" setting when enabled should send ETag in response to MERGE request", "res .set(field, values) should coerce to an array of strings", "app .render(name, fn) should support absolute paths with \"view engine\"", "app .render(name, fn) should handle render error throws", "app.router methods should reject numbers for app.mkcalendar", "Route .all should add handler", "app.router methods should include CHECKOUT", "app.listen() should wrap with an HTTP server", "res .format(obj) in router when no match is made should should respond with 406 not acceptable", "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request", "res .send(String) should override charset in Content-Type", "Router .use should be called for any URL", "res \"etag\" setting when enabled should send ETag in response to PUT request", "res should not override previous Content-Types", "app.router methods should reject numbers for app.unbind", "app.router should allow escaped regexp", "res .sendFile(path) with \"headers\" option should ignore headers option on 404", "cookies POST / should set a cookie", "app.router methods should reject numbers for app.link", "req .baseUrl should travel through routers correctly", "res .sendfile(path, fn) should invoke the callback on 404", "req .subdomains when present should work with IPv6 address", "cookies POST / should no set cookie w/o reminder", "res .status(code) when code is null should throw a TypeError", "res .set(object) should coerce to a string", "req .stale should return true without response headers", "req .ips when X-Forwarded-For is not present should return []", "res .location(url) when url is \"back\" should set the header to \"/\" without referrer", "req .acceptsLanguage should be false if language not accepted", "res .download(path, filename) should provide an alternate filename", "req .signedCookies should return a signed JSON cookie", "res .send(null) should set body to \"\"", "res .cookie(name, string, options) maxAge should set relative expires", "app should 404 without routes", "app.router * should work cross-segment", "res .format(obj) with extnames when Accept is not present should invoke the first callback", "app.router .:name? should denote an optional format", "app.router methods should reject numbers for app.source", "res .render(name) should support absolute paths with \"view engine\"", "app.router params should allow merging existing req.params", "req .route should be the executed Route", "auth GET / should redirect to /login", "req .get(field) should throw missing header name", "auth GET /logout should redirect to /", "app .response should not be influenced by other app protos", "res .format(obj) given .default should be invoked instead of auto-responding", "res .jsonp(object) should ignore object callback parameter with jsonp", "res \"etag\" setting when enabled should not send ETag for res.send()", "config .get() when mounted should inherit \"trust proxy\" setting", "req .secure when X-Forwarded-Proto is missing should return false when http", "route-separation POST /user/:id/edit?_method=PUT should edit a user", "res \"etag\" setting when enabled should send ETag in response to HEAD request", "app .render(name, fn) when \"view engine\" is given should render the template", "res .format(obj) in router should allow wildcard type/subtypes", "app.router methods should include REPORT", "res .sendFile(path) should 404 for directory", "app .param(fn) should fail if not given fn", "Route should work without handlers", "app.router :name should work inside literal parenthesis", "req .host should return undefined otherwise", "res .download(path, fn) should invoke the callback", "params GET / should respond with instructions", "req .param(name) should check req.query", "res .jsonp(object) when given primitives should respond with json for null", "app .use(middleware) should accept multiple arguments", "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user", "Router .use should reject null as middleware", "vhost example.com GET /foo should say foo", "auth POST /login should fail without proper password", "app.route should support dynamic routes", "app.router methods should include M-SEARCH", "route-separation GET /user/:id should get a user", "config .set() \"trust proxy\" should set \"trust proxy fn\"", "res .jsonp(object) when given an array should respond with json", "Router FQDN should ignore FQDN in path", "res .sendFile(path) with \"dotfiles\" option should accept dotfiles option", "app .param(name, fn) should not call when values differ on error", "auth GET /restricted should succeed with proper cookie", "app .render(name, fn) when \"views\" is given should lookup the file in the path", "route-map GET /users/:id should get a user", "req .acceptsCharset(type) when Accept-Charset is not present should return true when present", "app.router should restore req.params after leaving router", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses", "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr", "res .sendfile(path) with a relative path should transfer the file", "res .append(field, val) should work with cookies", "req .query when \"query parser\" an unknown value should throw", "app .render(name, fn) when \"views\" is given when array of paths should error if file does not exist", "route-separation PUT /user/:id/edit should edit a user", "res .json(object) when given primitives should respond with json for Number", "Router should return a function with router methods", "without NODE_ENV should default to development", "exports should permit modifying the .request prototype", "app.router methods should include REBIND", "res .redirect(status, url) should set the response status", "res .render(name, option) should give precedence to res.render() locals over res.locals", "app.router methods should reject numbers for app.purge", "res .sendfile(path) should ignore headers option on 404", "res .send(undefined) should set body to \"\"", "res.vary() with an empty array should not set Vary", "app.router methods should include MKACTIVITY", "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request", "Route .all should handle VERBS", "app .render(name, fn) should support index.<engine>", "res .sendFile(path) with \"immutable\" option should add immutable cache-control directive", "app .response should extend the response prototype", "app.router params should merge numeric indices req.params when more in parent", "route-map DELETE /users should delete users", "res .json(status, object) should respond with json and set the .statusCode", "res \"etag\" setting when enabled should send ETag in response to SOURCE request", "app.router methods should reject numbers for app.del", "req .fresh should return false when the resource is modified", "req .acceptsCharset(type) when Accept-Charset is not present should return true", "req.is() when given a mime type should return false when not matching", "res when accepting html should respond with html", "res .format(obj) with extnames should default the Content-Type", "app .use(path, middleware) should require middleware", "res \"etag\" setting when enabled should send ETag for long response", "req .accepts(types) should take quality into account", "params GET /user/0 should respond with a user", "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body", "app.router methods should include TRACE", "mvc GET / should redirect to /users", "req .xhr should return false when not present", "res .cookie(name, string, options) should set params", "web-service GET /api/users with a valid api key should respond users json", "res .send(Object) should send as application/json", "res .sendfile(path) should 404 for directory without trailing slash", "Route .VERB should support .get", "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()", "res .render(name) should expose app.locals with `name` property", "cookies GET / should respond to cookie", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should remove OWS around comma", "res .sendFile(path) should transfer a file", "content-negotiation GET /users should default to text/html", "res .download(path) should transfer as an attachment", "app .use(path, middleware) should accept multiple arguments", "req .hostname should return the Host when present", "req .query when \"query parser\" disabled should not parse query", "route-separation GET /user/:id should 404 on missing user", "req.is() when given */subtype should ignore charset", "app.router :name should allow several capture groups", "app .render(name, fn) when an error occurs should invoke the callback", "res on failure should remove Content-Disposition", "res .sendfile(path, fn) should invoke the callback when client aborts", "config .disabled() should default to true", "app .engine(ext, fn) should throw when the callback is missing", "app .use(path, middleware) should accept array of middleware", "res .render(name, option) should expose app.locals", "error GET / should respond with 500", "Router should support dynamic routes", "app.router methods should reject numbers for app.delete", "app.router methods should include MKCALENDAR", "app.router should be chainable", "utils.etag(body, encoding) should support strings", "req .subdomains when subdomain offset is set when present should return an array", "exports should throw on old middlewares", "cookies GET / should respond with no cookies", "req .param(name) should check req.params", "app.router * should work within arrays", "config .get() should return undefined when unset", "req .secure when X-Forwarded-Proto is present should return false when http", "app .use(app) should set the child's .parent", "res .format(obj) with canonicalized mime types should default the Content-Type", "res .json(object, status) should use status as second number for backwards compat", "res .render(name) when \"view engine\" is given should render the template", "res .format(obj) with extnames should Vary: Accept", "Router FQDN should adjust FQDN req.url with multiple routed handlers", "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie", "res .redirect(url) should not touch already-encoded sequences in \"url\"", "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request", "app.router methods should reject numbers for app.m-search", "error-pages GET / should respond with page list", "error-pages Accept: text/plain GET /404 should respond with 404", "web-service when requesting an invalid route should respond with 404 json", "app.router methods should reject numbers for app.patch", "req .baseUrl should contain lower path", "error-pages Accept: text/plain GET /500 should respond with 500", "res .sendFile(path) should error for non-string path", "Route errors should handle errors via arity 4 functions", "res should not perform freshness check unless 2xx or 304", "app.del() should alias app.delete()", "res .locals should be empty by default", "resource DELETE /users/9 should fail", "app.router methods should reject numbers for app.post", "res .render(name) should error without \"view engine\" set and file extension to a non-engine module", "app .locals(obj) should merge locals", "resource GET /users/1..3.json should respond with users 2 and 3 as json", "web-service GET /api/users with an invalid api key should respond with 401 unauthorized", "res .status(code) should set the response .statusCode", "res .jsonp(object) \"json spaces\" setting should be undefined by default", "app .use(path, middleware) should support regexp path", "res .sendFile(path) should 304 when ETag matches", "res .sendFile(path, fn) should invoke the callback when client aborts", "resource DELETE /users/1 should delete user 1", "res .set(object) should set multiple fields", "app.router methods should include UNLINK", "res .location(url) should encode \"url\"", "content-negotiation GET /users should accept to text/plain", "req .acceptsCharsets(type) when Accept-Charset is not present should return false otherwise", "res \"etag\" setting when disabled should send no ETag", "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted", "res .jsonp(object, status) should use status as second number for backwards compat", "res .sendfile(path) with a relative path should disallow requesting out of \"root\"", "res .json(object, status) should respond with json and set the .statusCode for backwards compat", "res .attachment(utf8filename) should add the filename and filename* params", "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "utils.wetag(body, encoding) should support empty string", "multi-router GET /api/v1/users should respond with users from APIv1", "res .format(obj) with parameters should utilize qvalues in negotiation", "res \"etag\" setting when enabled should send ETag in response to PROPFIND request", "res .send(String) should keep charset in Content-Type for Buffers", "app.router params should ignore invalid incoming req.params", "res .render(name) when \"views\" is given should lookup the file in the path", "app.router when next(err) is called should call handler in same route, if exists", "exports should expose the response prototype", "res .format(obj) with extnames should utilize qvalues in negotiation", "app.router trailing slashes when \"strict routing\" is enabled should match middleware when omitting the trailing slash", "app.router methods should include PURGE", "req .get(field) should throw for non-string header name", "app.router params should overwrite existing req.params by default", "res when accepting text should encode the url", "app.router .:name should denote a format", "res .sendfile(path) should transfer a file with urlencoded name", "res .format(obj) with extnames should allow wildcard type/subtypes", "app.head() should override", "app.router methods should include LOCK", "res on failure should invoke the callback", "app .render(name, fn) when an extension is given should render the template", "app.router when next(\"router\") is called should jump out of router", "app .param(name, fn) should support altering req.params across routes", "res .set(field, values) should set multiple response header fields", "req .query when \"query parser\" is extended should parse parameters with dots", "res .sendFile(path) should include ETag", "config .set() \"etag\" should throw on bad value", "res .download(path, filename, fn) should invoke the callback", "utils.wetag(body, encoding) should support strings", "res .jsonp(object) should allow renaming callback", "app.router params should use params from router", "req .hostname when \"trust proxy\" is enabled when multiple X-Forwarded-Host should use the first value", "utils.isAbsolute() should support windows", "utils.flatten(arr) should flatten an array", "res .get(field) should get the response header field", "res.vary() with an array should set the values", "req .acceptsEncodingss should be true if encoding accepted", "app.router when next(\"route\") is called should jump to next route", "exports should expose the application prototype", "res .attachment(filename) should add the filename param", "res .set(field, value) should coerce to a string", "res .cookie(name, string) should set a cookie", "app.router methods should reject numbers for app.propfind", "res .sendStatus(statusCode) should work with unknown code", "res .sendfile(path, fn) should invoke the callback when client already aborted", "app.router when given a regexp should populate req.params with the captures", "res \"etag\" setting when enabled should send ETag in response to REPORT request", "app.router decode params should decode correct params", "app .use(middleware) should invoke middleware for all requests", "app .param(name, fn) should catch thrown secondary error", "res .json(object) \"json escape\" setting should unicode escape HTML-sniffing characters", "res .jsonp(object) should override previous Content-Types with callback", "app.router methods should reject numbers for app.unsubscribe", "config .set() \"etag\" should set \"etag fn\"", "resource GET /users/9 should respond with error", "res \"etag\" setting when enabled should send ETag in response to TRACE request", "app .use(path, middleware) should reject number as middleware", "Router error should handle throwing in handler after async param", "mvc GET /user/:id when present should display the users pets", "req .accepts(types) should return the first acceptable type with canonical mime types", "req .acceptsCharsets(type) when Accept-Charset is not present should return true", "app should inherit from event emitter", "app.router methods should include MKCOL", "app .render(name, fn) when \"views\" is given when array of paths should lookup in later paths until found", "resource GET /users/1..3 should respond with users 1 through 3", "route-separation GET / should respond with index", "app .VERB() should only call an error handling routing callback when an error is propagated", "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https", "utils.isAbsolute() should support unices", "req .host should work with IPv6 Host and port", "res .append(field, val) should work with res.set(field, val) first", "req .hostname when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .sendFile(path, fn) should invoke the callback without error when 304", "res \"etag\" setting when enabled should send ETag in response to UNBIND request", "utils.setCharset(type, charset) should override charset", "res.vary() when the value is present should not add it again", "app .param(name, fn) should catch thrown error", "res \"etag\" setting when enabled should send ETag in response to UNLOCK request", "error-pages Accept: application/json GET /500 should respond with 500", "app.router methods should include GET", "app.router methods should reject numbers for app.move", "app.router :name? should populate the capture group", "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request", "res .json(object) when given an object should respond with json", "Router should not stack overflow with many registered routes", "res \"etag\" setting when \"weak\" should send weak ETag", "app .param(name, fn) should defer all the param routes", "res \"etag\" setting when a function should send custom ETag", "app .render(name, fn) when the file does not exist should provide a helpful error", "OPTIONS should not respond if the path is not defined", "app .use(middleware) should accept multiple arrays of middleware", "res \"etag\" setting when a function should not send falsy ETag", "req .accepts(types) should return false when no match is made", "route-separation GET /user/:id/view should 404 on missing user", "app .use(middleware) should accept array of middleware", "app.router should allow literal \".\"", "res \"etag\" setting when enabled should send ETag in response to PURGE request", "auth GET /login should render login form", "Router .param should call param function when routing middleware", "app .use(path, middleware) should reject null as middleware", "req .acceptsEncodingss should be false if encoding not accepted", "req .accepts(type) should return true when present", "app .use(path, middleware) should reject string as middleware", "req .hostname should return undefined otherwise", "res .redirect(url) should default to a 302 redirect", "Router error should handle throwing inside error handlers", "res .render(name) should expose app.locals", "params GET /users/0-2 should respond with three users", "res \"etag\" setting when enabled should send ETag in response to DELETE request", "res .sendFile(path) should not error if the client aborts", "app .render(name, fn) caching should always lookup view without cache", "res .sendFile(path) should transfer a file with special characters in string", "app.router should be .use()able", "res .jsonp(object) when given primitives should respond with json for Number", "res .location(url) should set the header", "config .enable() should set the value to true", "res .send(String) should send as html", "web-service GET /api/repos without an api key should respond with 400 bad request", "app.router methods should include LINK", "req .range(size) should accept any type", "req.is() when given type/* should return false when not matching", "res .sendfile(path) should not serve dotfiles", "vhost foo.example.com GET / should redirect to /foo", "req .baseUrl should be empty for top-level route", "res \"etag\" setting when enabled should send ETag in response to LOCK request", "res .attachment() should Content-Disposition to attachment", "config .disabled() should return false when set", "route-map GET /users should respond with users", "req.is() when given type/* should ignore charset", "OPTIONS when error occurs in response handler should pass error to callback", "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted", "res .clearCookie(name) should set a cookie passed expiry", "Router .multiple callbacks should throw if a callback is null", "res .format(obj) given .default should work when only .default is provided", "res .download(path, filename, options, fn) when options.headers contains Content-Disposition should should be ignored", "res .jsonp(object) should not escape utf whitespace for json fallback", "req .hostname when \"trust proxy\" is enabled should default to Host", "app.router methods should include PATCH", "res.vary() with a string should set the value", "HEAD should output the same headers as GET requests", "app .param(name, fn) should call when values differ when using \"next\"", "app.route should not error on empty routes", "res .sendStatus(statusCode) should send the status code and message as body", "res when accepting html should include the redirect type", "app.router * should capture everything", "config .enabled() should return true when set", "app should be callable", "Route errors should handle throwing inside error handlers", "res .render(name, fn) should pass the resulting string", "app .use(path, middleware) should work if path has trailing slash", "res .sendfile(path) with a relative path should next(404) when not found", "Router .use should require middleware", "res .append(field, val) should get reset by res.set(field, val)", "res.vary() with no arguments should not set Vary", "req .baseUrl should contain full lower path", "app.mountpath should return the mounted path", "app.router methods should include OPTIONS", "app.router params should merge numeric indices req.params", "config .disable() should set the value to false", "res \"etag\" setting when enabled should send ETag", "utils.isAbsolute() should support windows unc", "req .stale should return false when the resource is not modified", "res .clearCookie(name, options) should set the given params", "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback", "res .format(obj) in router should Vary: Accept", "req .path should return the parsed pathname", "res .cookie(name, string, options) signed should generate a signed JSON cookie", "error-pages Accept: text/html GET /500 should respond with 500", "req .acceptsEncoding should be false if encoding not accepted", "req .subdomains when present should return an array", "auth POST /login should succeed with proper credentials", "app.router methods should include COPY", "cookies GET / should have a form", "res .sendFile(path) with \"root\" option should serve relative to \"root\"", "res .sendFile(path, fn) should invoke the callback on 404", "downloads GET / should have a link to amazing.txt", "app.router methods should reject numbers for app.lock", "req .hostname when \"trust proxy\" is disabled should ignore X-Forwarded-Host", "res \"etag\" setting when \"strong\" should send strong ETag", "req .subdomains when subdomain offset is set otherwise should return an empty array", "Router .use should accept array of middleware", "app.router methods should include UNLOCK", "mvc GET /pet/0/edit should get pet edit page", "res .send() should set body to \"\"", "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto", "route-separation GET /user/:id/edit should get a user to edit", "app.router methods should re-route when method is altered", "req .get(field) should special-case Referer", "res should work when mounted", "app.router case sensitivity should be disabled by default", "res .links(obj) should set Link header field for multiple calls", "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash", "req .stale should return true when the resource is modified", "markdown GET /fail should respond with an error", "app.router methods should reject numbers for app.unlock", "res \"etag\" setting when enabled should send ETag in response to GET request", "res .send(code, number) should send number as json", "Router .param should only call once per request", "error-pages Accept: text/html GET /403 should respond with 403", "res .sendfile(path) with a relative path should serve relative to \"root\"", "Route .VERB should limit to just .VERB", "utils.etag(body, encoding) should support utf8 strings", "res .links(obj) should set Link header field", "params GET /user/9 should fail to find user", "res when accepting text should respond with text", "config .get() when mounted should given precedence to the child", "app.router methods should reject numbers for app.options", "res .send(String) should not override Content-Type", "resource GET /users should respond with all users", "Router FQDN should ignore FQDN in search", "res \"etag\" setting when enabled should send ETag in response to REBIND request", "multi-router GET /api/v2/ should respond with APIv2 root handler", "res .format(obj) with parameters should set the correct charset for the Content-Type", "res .sendFile(path) with \"headers\" option should accept headers option", "req .query when \"query parser\" is a function should parse using function", "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes", "res .json(object) when given primitives should respond with json for null", "res .format(obj) with canonicalized mime types should set the correct charset for the Content-Type", "app.router trailing slashes when \"strict routing\" is enabled should match middleware", "res .jsonp(object) when given primitives should respond with json for String", "app.router methods should include PROPFIND", "exports should expose Router", "res .render(name) should error without \"view engine\" set and no file extension", "middleware .next() should behave like connect", "req .host should strip port number", "res .json(object) when given primitives should respond with json for String", "app.router methods should reject numbers for app.copy", "app .use(app) should support dynamic routes", "req .xhr should return true when X-Requested-With is xmlhttprequest", "cookie-sessions GET / should display no views", "res .attachment(filename) should set the Content-Type", "app.router methods should reject numbers for app.report", "req .acceptsLanguage should be true if language accepted", "res .sendFile(path) should 404 when not found", "res .sendFile(path, options) should pass options to send module", "res .send(Buffer) should set ETag", "OPTIONS should forward requests down the middleware chain", "Router .multiple callbacks should throw if a callback is not a function", "app.all() should run the callback for a method just once", "req .acceptsLanguage when Accept-Language is not present should always return true", "res .sendfile(path, fn) should utilize the same options as express.static()", "req .hostname when \"trust proxy\" is enabled should respect X-Forwarded-Host", "app .param(fn) should map app.param(name, ...) logic", "res .location(url) when url is \"back\" should set location from \"Referrer\" header", "config .get() should otherwise return the value", "web-service GET /api/repos with a valid api key should respond repos json", "res .render(name) should support index.<engine>", "req.is() when given a mime type should ignore charset", "cookies GET /forget should clear cookie", "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise", "req .query should default to parse complex keys", "res .jsonp(object) should respond with jsonp", "web-service GET /api/users without an api key should respond with 400 bad request", "error-pages Accept: text/plain GET /403 should respond with 403", "config .set() should set a value", "Router error should handle throwing inside routes with params", "config .set() should return the app", "req .range(size, options) with \"combine: true\" option should return combined ranges", "mvc PUT /user/:id should 500 on error", "app.router * should not be greedy immediately after param", "req .host should work with IPv6 Host", "res .render(name, option) should give precedence to res.render() locals over app.locals", "res \"etag\" setting when enabled should send ETag in response to COPY request", "content-negotiation GET / should accept to text/plain", "res should be chainable", "app.router methods should reject numbers for app.mkactivity", "app .locals.settings should expose app settings", "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host", "res .json(object) \"json spaces\" setting should be undefined by default", "res .jsonp(object) should use first callback parameter with jsonp", "req .acceptsLanguages should be false if language not accepted", "res .send(String) should set ETag", "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request", "res .sendfile(path) with a relative path should allow ../ when \"root\" is set", "res .type(str) should set the Content-Type with type/subtype", "app.router * should keep correct parameter indexes", "res .location(url) when url is \"back\" should prefer \"Referrer\" header", "app .param(name, fn) should only call once per request", "route-separation GET /users should list users", "multi-router GET /api/v1/ should respond with APIv1 root handler", "multi-router GET /api/v2/users should respond with users from APIv2", "Router .use should reject string as middleware", "downloads GET /files/missing.txt should respond with 404", "Router should support .use of other routers", "app.router methods should include HEAD", "app .render(name, fn) caching should cache with \"view cache\" setting", "app.router should run in order added", "res .jsonp(object) should include security header and prologue", "req .query should default to {}", "Router parallel requests should not mix requests", "res .attachment(utf8filename) should set the Content-Type", "res .send(code) should set .statusCode", "res .json(object) \"json escape\" setting should be undefined by default", "res \"etag\" setting when enabled should send ETag in response to LINK request", "req .query when \"query parser fn\" is missing should act like \"extended\"", "res should not support jsonp callbacks", "mvc POST /user/:id/pet should create a pet for user"], "failed_tests": [], "skipped_tests": []}, "instance_id": "expressjs__express-3495"}
